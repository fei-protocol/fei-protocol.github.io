{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Welcome to the Fei Protocol documentation guide! The docs are organized into 3 categories: * User * Developer * Operator For a high level overview of Fei v2 check out our introduction post ! User Docs Developer Docs Operator Docs","title":"Overview"},{"location":"#overview","text":"Welcome to the Fei Protocol documentation guide! The docs are organized into 3 categories: * User * Developer * Operator For a high level overview of Fei v2 check out our introduction post !","title":"Overview"},{"location":"#user-docs","text":"","title":"User Docs"},{"location":"#developer-docs","text":"","title":"Developer Docs"},{"location":"#operator-docs","text":"","title":"Operator Docs"},{"location":"developers/addresses/","text":"Core Name Address core 0x8d5ED43dCa8C2F7dFB20CF7b53CC7E593635d7b9 fei 0x956F47F50A910163D8BF957Cf5846D573E7f87CA feiTribeLBPSwapper 0x16ef9601076d45e8cc564cDD91E5dF3Ae83dD3B3 noFeeFeiTribeLBPSwapper 0xC05FAF6C5C4bC1bD841AdFC92b3D3f20180F26E8 optimisticMinter 0xE66c4De480Bd317054B5a3CF8E8689649d0728c9 pcvEquityMinter 0x904Deb2Dac1EdfCBBb69b9c279aE5F75E57Cf5E9 pcvGuardian 0x2D1b1b509B6432A73e3d798572f0648f6453a5D9 proxyAdmin 0xf8c2b645988b7658E7748BA637fE25bdD46A704A ratioPCVControllerV2 0x221fff24FB66dA3c722c7C5B856956a6a30C0179 tribe 0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B tribeMinter 0xFC3532b443383d9022b1B2c6FD5Fd0895943360A Governance Name Address feiDAO 0x0BEF27FEB58e857046d630B2c03dFb7bae567494 feiDAOTimelock 0xd51dbA7a94e1adEa403553A8235C302cEbF41a3c guardian 0xB8f482539F2d3Ae2C9ea6076894df36D1f632775 optimisticMultisig 0x35ED000468f397AA943009bD60cc6d2d9a7d32fF optimisticTimelock 0xbC9C084a12678ef5B516561df902fdc426d95483 rariTimelock 0x8ace03Fc45139fDDba944c6A4082b604041d19FC tribeRariDAO 0x637deEED4e4deb1D222650bD4B64192abf002c00 Peg Name Address aaveEthPCVDripController 0xb3D63876d95d3a5e591D4DE536dC410b97244086 bondingCurve 0xB783c0E21763bEf9F2d04E6499abFbe23AdB7e1F compoundEthPCVDripController 0xa84C8be28f3d560059339f06C6b6c5B23f53C58C daiPCVDripController 0x3e0f66c5687FF917809A3F7fA7096e1Bc409fB03 daiPSM 0x210300C158f95E1342fD008aE417ef68311c49C2 ethReserveStabilizer 0x17305f0e18318994a57b494078CAC866A857F7b6 tribeReserveStabilizer 0xE1A468418f4D8D3F070A06d49b3575A9562b6CfD PCV Name Address agEurAngleUniswapPCVDeposit 0x7AC2Ab8143634419c5bc230A9f9955C3e29f64Ef bammDeposit 0x374628EBE7Ef6AcA0574e750B618097531A26Ff8 balancerDepositBalWeth 0xcd1Ac0014E2ebd972f40f24dF1694e6F528B2fD4 d3poolConvexPCVDeposit 0x5ae217dE26f6Ff5F481C6e10ec48b2cf2fc857C8 d3poolCurvePCVDeposit 0x24F663c69Cd4B263cf5685A49013Ff5f1C898D24 dpiUniswapPCVDeposit 0x902199755219A9f8209862d09F1891cfb34F59a3 ethTokemakPCVDeposit 0x0961d2a545e0c1201B313d14C57023682a546b9D liquityFusePoolLusdPCVDeposit 0x8C51E4532CC745cF3DFec5CEBd835D07E7BA1002 rariPool28FeiPCVDeposit 0xb0D5eBA35E1cecE568096064Ed68A49C6A24d961 rariPool31FeiPCVDeposit 0x81DCB06eA4db474D1506Ca6275Ff7D870bA3A1Be rariPool72FeiPCVDeposit 0x4A5Af5A124E672C156241b76CAd4E41D09dd4883 rariPool79FeiPCVDeposit 0x76dFcf06E7D7B8248094DC319b284fB244f06309 rariPool7LusdPCVDeposit 0x6026a1559CDd44a63C5CA9A078CC996a9eb68ABB rariPool90FeiPCVDeposit 0x61d26126D2F8A44b41c1D8E1B1F276551DC8EEc6 rariPool91FeiPCVDeposit 0x2296a2417D1f02d394ab22aF794a0f426eD53436 uniswapPCVDeposit 0x15958381E9E6dc98bD49655e36f524D2203a28bD aaveEthPCVDepositWrapper 0x43Ef03755991056681F01EE2182234eF6aF1f658 aaveFeiPCVDepositWrapper 0xFAc571b6054619053ac311dA8112939C9a374A85 aaveRaiPCVDepositWrapper 0x1267B39c93711Dd374DEAB15e0127e4adB259BE0 compoundDaiPCVDepositWrapper 0xfDe7077AAEcDaf2C4B85261Aa858c96A7E737a61 compoundEthPCVDepositWrapper 0x0735e14D28eD395048d5Fa4a8dbe6e6EB9fc0470 creamDepositWrapper 0x3a1838Ac9EcA864054bebB82C32455Dd7d7Fc89c ethLidoPCVDepositWrapper 0xA271fF86426c7fdAaAE72603e6Ce68c892d69ED7 ethReserveStabilizerWrapper 0xB24570Bc46efDf97b4Aa7f008B4268005Eb7A27E feiBuybackLensNoFee 0x89DfBC12001b41985eFAbd7dFCae6a77B22E4Ec3 feiOATimelockWrapper 0x7Eb88140af813294aEDce981b6aC08fcd139d408 rariPool18FeiPCVDepositWrapper 0x07F2DD7E6A78D96c08D0a8212f4097dCC129d629 rariPool19DpiPCVDepositWrapper 0x9a774a1B1208C323EDeD05E6Daf592E6E59cAa55 rariPool19FeiPCVDepositWrapper 0x7e39bBA9D0d967Ee55524fAe9e54900B02d9889a rariPool24FeiPCVDepositWrapper 0x508f6fbd78B6569C29E9D75986a51558dE9E5865 rariPool25FeiPCVDepositWrapper 0xB4FFD10C4C290Dc13E8e30BF186F1509001515fD rariPool26FeiPCVDepositWrapper 0x82aebeE64a52180d8541eB601A8381e012A1eD04 rariPool27FeiPCVDepositWrapper 0xe2e35097638F0Ff2EeCA2EF70F352Be37431945f rariPool6FeiPCVDepositWrapper 0x7aA4b1558C3e219cFFFd6a356421C071F71966e7 rariPool7FeiPCVDepositWrapper 0xb13C755107301eBFeD6A93190aCdE09281b2f8A5 rariPool8FeiPCVDepositWrapper 0xD6598a23418c7FEf7c0Dc863265515B623B720F9 rariPool9FeiPCVDepositWrapper 0x96A657eE40A79A964c6b4eA551c895D98e885a75 rariPool9RaiPCVDepositWrapper 0xCCe230c087F31032fc17621a2CF5E425A0b80C96 PCV_V1 Name Address aaveEthPCVDeposit 0x5B86887e171bAE0C2C826e87E34Df8D558C079B9 aaveFeiPCVDeposit 0xaFBd7Bd91B4c1Dd289EE47a4F030FBeDfa7ABc12 aaveRaiPCVDeposit 0xd2174d78637a40448112aa6B30F9B19e6CF9d1F9 compoundDaiPCVDeposit 0xe0f73b8d76D2Ad33492F995af218b03564b8Ce20 compoundEthPCVDeposit 0x4fCB1435fD42CE7ce7Af3cB2e98289F79d2962b3 ethLidoPCVDeposit 0xac38ee05c0204a1e119c625d0a560d6731478880 indexCoopFusePoolDpiPCVDeposit 0x3dD3d945C4253bAc5B4Cc326a001B7d3f9C4DD66 indexCoopFusePoolFeiPCVDeposit 0xD6960adba53212bBE96E54a7AFeDA2066437D000 indexDelegator 0x0ee81df08B20e4f9E0F534e50da437D24491c4ee rariPool18FeiPCVDeposit 0x5A8CB4556e5D5935Af06beab8292905f48131479 rariPool24FeiPCVDeposit 0x1434F99EDB2bD03DECCCFe21288767b8324B7403 rariPool25FeiPCVDeposit 0xe1662531aA5de1DAD8ab5B5756b8F6c8F3C759Ca rariPool26FeiPCVDeposit 0xFdCc96967C86250f333cE52Ba706Ec2961c3302f rariPool27FeiPCVDeposit 0x91f50E3183a8CC30D2A981C3aFA85A2Bf6691c67 rariPool19DpiPCVDeposit 0x3dD3d945C4253bAc5B4Cc326a001B7d3f9C4DD66 rariPool19FeiPCVDeposit 0xD6960adba53212bBE96E54a7AFeDA2066437D000 rariPool6FeiPCVDeposit 0xB51f09B6F103D697dc5d64DC904Ad6a2Dad39987 rariPool7FeiPCVDeposit 0x74B235Fef146cDB5BE0D3786a9f3774674b3615E rariPool8FeiPCVDeposit 0x37349d9cc523D28e6aBFC03fc5F44879bC8BfFD9 rariPool9FeiPCVDeposit 0xF2D8beE45f29A779cFB9F04ac233E703974a2C53 rariPool9RaiPCVDeposit 0x9aAdFfe00eAe6d8e59bB4F7787C6b99388A6960D Collateralization Name Address collateralizationOracle 0xFF6f59333cfD8f4Ebc14aD0a0E181a83e655d257 collateralizationOracleGuardian 0x81De6bA8df84A4B679061952E171a27F096F3eAe collateralizationOracleWrapper 0xd1866289B4Bd22D453fFF676760961e0898EE9BF collateralizationOracleWrapperImpl 0x656aA9c9875eB089b11869d4730d6963D25E76ad namedStaticPCVDepositWrapper 0x06dAcca04e201AD31393754E68dA04Dc14778Fa6 Oracle Name Address balUsdCompositeOracle 0xDe0407851AEC6F073A63D27C7D29805CCD59D3e0 chainlinkBALEthOracle 0x7261D245454Daa070C77B2a26eA192E3a4c8F655 chainlinkCREAMEthOracle 0xDE02522cDc4959117fe839a7326D80F9858f383C chainlinkDaiUsdOracleWrapper 0x231aDa12E273eDf3fA54CbD90c5C1a73129D5bb9 chainlinkDpiUsdOracleWrapper 0xB594d2bd55Ede471e16b92AE6F7651648DA871c3 chainlinkEthUsdOracleWrapper 0xCd3c40AE1256922BA16C7872229385E20Bc8351e chainlinkEurUsdOracleWrapper 0xFb3a062236A7E08b572F17bc9Ad2bBc2becB87b1 chainlinkFeiEthOracleWrapper 0x060Be7B51F78DFFd04749332fd306BA1228e7444 chainlinkLUSDOracleWrapper 0xe61d11ec732d556A26fb863B192052BEa03eF8B5 chainlinkRaiEthOracleWrapper 0x3d49573ee6aFCBDe606F8a1c2AA1C498048E7190 chainlinkRaiUsdCompositeOracle 0x392b1d29eDab680c5CA778D3A32b8284859BFBB0 chainlinkTribeEthOracleWrapper 0x061118ccabF0c2c62f05a2e3C2bd4379c0C70079 compositeOracle 0x8721f9EAba0B9081069970bCBce38763D3D4f28E creamUsdCompositeOracle 0x2BDca027c7f57eD9AC1769Ba3a3D64600578bA49 oneConstantOracle 0x2374800337c6BE8B935f96AA6c10b33f9F12Bd40 tribeUsdCompositeOracle 0xD7B8207f8644ee5cc60095023a8fcb8BdCF54732 zeroConstantOracle 0x43b99923CF06D6D9101110b595234670f73A4934 Keeper Name Address collateralizationOracleKeeper 0x62378C316a6161A613D02E11F65290aED79B3eD5 Rewards Name Address aaveTribeIncentivesController 0xDee5c1662bBfF8f80f7c572D8091BF251b3B0dAB aaveTribeIncentivesControllerImpl 0xFF865335401F12B88fa3FF5A3a51685A7f224191 autoRewardsDistributor 0x61be49dfbd869a601fea076e1a1379903e61a895 erc20Dripper 0x3Fe0EAD3500e767F0F8bC2d3B5AF7755B1b21A6a rariRewardsDistributorDelegate 0x220f93183a69d1598e8405310cB361CFF504146F rariRewardsDistributorDelegator 0x73F16f0c0Cd1A078A54894974C5C054D8dC1A3d7 rewardsDistributorAdmin 0x4e979E8b136Cd7BdEBB83ea50a599C3BED1e15c0 stakingTokenWrapperBribeD3pool 0x462515dC7c21C728C8b7A777fDC89EEdAcF74537 stakingTokenWrapperFOXLaaS 0x3CD384ff1Fa1cbA8f06DF326AF4cbDA634aF94e8 stakingTokenWrapperGROLaaS 0x508629e8E0B96986Df4D0F1F60aadeF1d0FbaE96 stakingTokenWrapperKYLINLaaS 0xFe266d143dB42a9835e2B1AB43B64a46278398cc stakingTokenWrapperMStableLaaS 0x9B9ad20Cd99Cac3B536b94497A18346d66db0379 stakingTokenWrapperNEARLaaS 0x3b3591a4f7FD386E9987Eb48d898e29b57c30c47 stakingTokenWrapperPoolTogetherLaaS 0x6b018170311F3DA23c3fA62AFe1b2D0638522CCD stakingTokenWrapperRari 0xd81Be1B9A7895C996704A8DDa794BbA4454EeB90 stakingTokenWrapperSYNLaaS 0x5Db85e395735Bb42eEB720Fe2EE69627d246e300 stakingTokenWrapperUMALaaS 0x90B336dFF819b9e4b3D9A32cabdcAB0E92836065 stwBulkHarvest 0x83433D925048d7e9D2D7Eec2A0Efbb4456Af2F93 tribalChief 0x9e1076cC0d19F9B0b8019F384B0a29E48Ee46f7f tribalChiefImpl 0x2d91362e8bcAA8826b482B531dcb170FC9d17777 tribalChiefSyncV2 0xb41c594f9a6a2E0882212598337AF8145f63731b votiumBriberD3pool 0x0BEC570466B466aB689Ad33F1Ce5238CA43C8003 FeiRari Name Address rariPool8Comptroller 0xc54172e34046c1653d1920d40333dd358c7a1af4 rariPool8Dai 0x7e9cE3CAa9910cc048590801e64174957Ed41d43 rariPool8DaiIrm 0xede47399e2aa8f076d40dc52896331cba8bd40f7 rariPool8Eth 0xbB025D470162CC5eA24daF7d4566064EE7f5F111 rariPool8EthIrm 0xbab47e4b692195bf064923178a90ef999a15f819 rariPool8Fei 0xd8553552f8868C1Ef160eEdf031cF0BCf9686945 rariPool8FeiIrm 0x8f47be5692180079931e2f983db6996647aba0a5 rariPool8Tribe 0xFd3300A9a74b3250F1b2AbC12B47611171910b07 rariPool8TribeIrm 0x075538650a9c69ac8019507a7dd1bd879b12c1d7","title":"Mainnet Addresses"},{"location":"developers/addresses/#core","text":"Name Address core 0x8d5ED43dCa8C2F7dFB20CF7b53CC7E593635d7b9 fei 0x956F47F50A910163D8BF957Cf5846D573E7f87CA feiTribeLBPSwapper 0x16ef9601076d45e8cc564cDD91E5dF3Ae83dD3B3 noFeeFeiTribeLBPSwapper 0xC05FAF6C5C4bC1bD841AdFC92b3D3f20180F26E8 optimisticMinter 0xE66c4De480Bd317054B5a3CF8E8689649d0728c9 pcvEquityMinter 0x904Deb2Dac1EdfCBBb69b9c279aE5F75E57Cf5E9 pcvGuardian 0x2D1b1b509B6432A73e3d798572f0648f6453a5D9 proxyAdmin 0xf8c2b645988b7658E7748BA637fE25bdD46A704A ratioPCVControllerV2 0x221fff24FB66dA3c722c7C5B856956a6a30C0179 tribe 0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B tribeMinter 0xFC3532b443383d9022b1B2c6FD5Fd0895943360A","title":"Core"},{"location":"developers/addresses/#governance","text":"Name Address feiDAO 0x0BEF27FEB58e857046d630B2c03dFb7bae567494 feiDAOTimelock 0xd51dbA7a94e1adEa403553A8235C302cEbF41a3c guardian 0xB8f482539F2d3Ae2C9ea6076894df36D1f632775 optimisticMultisig 0x35ED000468f397AA943009bD60cc6d2d9a7d32fF optimisticTimelock 0xbC9C084a12678ef5B516561df902fdc426d95483 rariTimelock 0x8ace03Fc45139fDDba944c6A4082b604041d19FC tribeRariDAO 0x637deEED4e4deb1D222650bD4B64192abf002c00","title":"Governance"},{"location":"developers/addresses/#peg","text":"Name Address aaveEthPCVDripController 0xb3D63876d95d3a5e591D4DE536dC410b97244086 bondingCurve 0xB783c0E21763bEf9F2d04E6499abFbe23AdB7e1F compoundEthPCVDripController 0xa84C8be28f3d560059339f06C6b6c5B23f53C58C daiPCVDripController 0x3e0f66c5687FF917809A3F7fA7096e1Bc409fB03 daiPSM 0x210300C158f95E1342fD008aE417ef68311c49C2 ethReserveStabilizer 0x17305f0e18318994a57b494078CAC866A857F7b6 tribeReserveStabilizer 0xE1A468418f4D8D3F070A06d49b3575A9562b6CfD","title":"Peg"},{"location":"developers/addresses/#pcv","text":"Name Address agEurAngleUniswapPCVDeposit 0x7AC2Ab8143634419c5bc230A9f9955C3e29f64Ef bammDeposit 0x374628EBE7Ef6AcA0574e750B618097531A26Ff8 balancerDepositBalWeth 0xcd1Ac0014E2ebd972f40f24dF1694e6F528B2fD4 d3poolConvexPCVDeposit 0x5ae217dE26f6Ff5F481C6e10ec48b2cf2fc857C8 d3poolCurvePCVDeposit 0x24F663c69Cd4B263cf5685A49013Ff5f1C898D24 dpiUniswapPCVDeposit 0x902199755219A9f8209862d09F1891cfb34F59a3 ethTokemakPCVDeposit 0x0961d2a545e0c1201B313d14C57023682a546b9D liquityFusePoolLusdPCVDeposit 0x8C51E4532CC745cF3DFec5CEBd835D07E7BA1002 rariPool28FeiPCVDeposit 0xb0D5eBA35E1cecE568096064Ed68A49C6A24d961 rariPool31FeiPCVDeposit 0x81DCB06eA4db474D1506Ca6275Ff7D870bA3A1Be rariPool72FeiPCVDeposit 0x4A5Af5A124E672C156241b76CAd4E41D09dd4883 rariPool79FeiPCVDeposit 0x76dFcf06E7D7B8248094DC319b284fB244f06309 rariPool7LusdPCVDeposit 0x6026a1559CDd44a63C5CA9A078CC996a9eb68ABB rariPool90FeiPCVDeposit 0x61d26126D2F8A44b41c1D8E1B1F276551DC8EEc6 rariPool91FeiPCVDeposit 0x2296a2417D1f02d394ab22aF794a0f426eD53436 uniswapPCVDeposit 0x15958381E9E6dc98bD49655e36f524D2203a28bD aaveEthPCVDepositWrapper 0x43Ef03755991056681F01EE2182234eF6aF1f658 aaveFeiPCVDepositWrapper 0xFAc571b6054619053ac311dA8112939C9a374A85 aaveRaiPCVDepositWrapper 0x1267B39c93711Dd374DEAB15e0127e4adB259BE0 compoundDaiPCVDepositWrapper 0xfDe7077AAEcDaf2C4B85261Aa858c96A7E737a61 compoundEthPCVDepositWrapper 0x0735e14D28eD395048d5Fa4a8dbe6e6EB9fc0470 creamDepositWrapper 0x3a1838Ac9EcA864054bebB82C32455Dd7d7Fc89c ethLidoPCVDepositWrapper 0xA271fF86426c7fdAaAE72603e6Ce68c892d69ED7 ethReserveStabilizerWrapper 0xB24570Bc46efDf97b4Aa7f008B4268005Eb7A27E feiBuybackLensNoFee 0x89DfBC12001b41985eFAbd7dFCae6a77B22E4Ec3 feiOATimelockWrapper 0x7Eb88140af813294aEDce981b6aC08fcd139d408 rariPool18FeiPCVDepositWrapper 0x07F2DD7E6A78D96c08D0a8212f4097dCC129d629 rariPool19DpiPCVDepositWrapper 0x9a774a1B1208C323EDeD05E6Daf592E6E59cAa55 rariPool19FeiPCVDepositWrapper 0x7e39bBA9D0d967Ee55524fAe9e54900B02d9889a rariPool24FeiPCVDepositWrapper 0x508f6fbd78B6569C29E9D75986a51558dE9E5865 rariPool25FeiPCVDepositWrapper 0xB4FFD10C4C290Dc13E8e30BF186F1509001515fD rariPool26FeiPCVDepositWrapper 0x82aebeE64a52180d8541eB601A8381e012A1eD04 rariPool27FeiPCVDepositWrapper 0xe2e35097638F0Ff2EeCA2EF70F352Be37431945f rariPool6FeiPCVDepositWrapper 0x7aA4b1558C3e219cFFFd6a356421C071F71966e7 rariPool7FeiPCVDepositWrapper 0xb13C755107301eBFeD6A93190aCdE09281b2f8A5 rariPool8FeiPCVDepositWrapper 0xD6598a23418c7FEf7c0Dc863265515B623B720F9 rariPool9FeiPCVDepositWrapper 0x96A657eE40A79A964c6b4eA551c895D98e885a75 rariPool9RaiPCVDepositWrapper 0xCCe230c087F31032fc17621a2CF5E425A0b80C96","title":"PCV"},{"location":"developers/addresses/#pcv_v1","text":"Name Address aaveEthPCVDeposit 0x5B86887e171bAE0C2C826e87E34Df8D558C079B9 aaveFeiPCVDeposit 0xaFBd7Bd91B4c1Dd289EE47a4F030FBeDfa7ABc12 aaveRaiPCVDeposit 0xd2174d78637a40448112aa6B30F9B19e6CF9d1F9 compoundDaiPCVDeposit 0xe0f73b8d76D2Ad33492F995af218b03564b8Ce20 compoundEthPCVDeposit 0x4fCB1435fD42CE7ce7Af3cB2e98289F79d2962b3 ethLidoPCVDeposit 0xac38ee05c0204a1e119c625d0a560d6731478880 indexCoopFusePoolDpiPCVDeposit 0x3dD3d945C4253bAc5B4Cc326a001B7d3f9C4DD66 indexCoopFusePoolFeiPCVDeposit 0xD6960adba53212bBE96E54a7AFeDA2066437D000 indexDelegator 0x0ee81df08B20e4f9E0F534e50da437D24491c4ee rariPool18FeiPCVDeposit 0x5A8CB4556e5D5935Af06beab8292905f48131479 rariPool24FeiPCVDeposit 0x1434F99EDB2bD03DECCCFe21288767b8324B7403 rariPool25FeiPCVDeposit 0xe1662531aA5de1DAD8ab5B5756b8F6c8F3C759Ca rariPool26FeiPCVDeposit 0xFdCc96967C86250f333cE52Ba706Ec2961c3302f rariPool27FeiPCVDeposit 0x91f50E3183a8CC30D2A981C3aFA85A2Bf6691c67 rariPool19DpiPCVDeposit 0x3dD3d945C4253bAc5B4Cc326a001B7d3f9C4DD66 rariPool19FeiPCVDeposit 0xD6960adba53212bBE96E54a7AFeDA2066437D000 rariPool6FeiPCVDeposit 0xB51f09B6F103D697dc5d64DC904Ad6a2Dad39987 rariPool7FeiPCVDeposit 0x74B235Fef146cDB5BE0D3786a9f3774674b3615E rariPool8FeiPCVDeposit 0x37349d9cc523D28e6aBFC03fc5F44879bC8BfFD9 rariPool9FeiPCVDeposit 0xF2D8beE45f29A779cFB9F04ac233E703974a2C53 rariPool9RaiPCVDeposit 0x9aAdFfe00eAe6d8e59bB4F7787C6b99388A6960D","title":"PCV_V1"},{"location":"developers/addresses/#collateralization","text":"Name Address collateralizationOracle 0xFF6f59333cfD8f4Ebc14aD0a0E181a83e655d257 collateralizationOracleGuardian 0x81De6bA8df84A4B679061952E171a27F096F3eAe collateralizationOracleWrapper 0xd1866289B4Bd22D453fFF676760961e0898EE9BF collateralizationOracleWrapperImpl 0x656aA9c9875eB089b11869d4730d6963D25E76ad namedStaticPCVDepositWrapper 0x06dAcca04e201AD31393754E68dA04Dc14778Fa6","title":"Collateralization"},{"location":"developers/addresses/#oracle","text":"Name Address balUsdCompositeOracle 0xDe0407851AEC6F073A63D27C7D29805CCD59D3e0 chainlinkBALEthOracle 0x7261D245454Daa070C77B2a26eA192E3a4c8F655 chainlinkCREAMEthOracle 0xDE02522cDc4959117fe839a7326D80F9858f383C chainlinkDaiUsdOracleWrapper 0x231aDa12E273eDf3fA54CbD90c5C1a73129D5bb9 chainlinkDpiUsdOracleWrapper 0xB594d2bd55Ede471e16b92AE6F7651648DA871c3 chainlinkEthUsdOracleWrapper 0xCd3c40AE1256922BA16C7872229385E20Bc8351e chainlinkEurUsdOracleWrapper 0xFb3a062236A7E08b572F17bc9Ad2bBc2becB87b1 chainlinkFeiEthOracleWrapper 0x060Be7B51F78DFFd04749332fd306BA1228e7444 chainlinkLUSDOracleWrapper 0xe61d11ec732d556A26fb863B192052BEa03eF8B5 chainlinkRaiEthOracleWrapper 0x3d49573ee6aFCBDe606F8a1c2AA1C498048E7190 chainlinkRaiUsdCompositeOracle 0x392b1d29eDab680c5CA778D3A32b8284859BFBB0 chainlinkTribeEthOracleWrapper 0x061118ccabF0c2c62f05a2e3C2bd4379c0C70079 compositeOracle 0x8721f9EAba0B9081069970bCBce38763D3D4f28E creamUsdCompositeOracle 0x2BDca027c7f57eD9AC1769Ba3a3D64600578bA49 oneConstantOracle 0x2374800337c6BE8B935f96AA6c10b33f9F12Bd40 tribeUsdCompositeOracle 0xD7B8207f8644ee5cc60095023a8fcb8BdCF54732 zeroConstantOracle 0x43b99923CF06D6D9101110b595234670f73A4934","title":"Oracle"},{"location":"developers/addresses/#keeper","text":"Name Address collateralizationOracleKeeper 0x62378C316a6161A613D02E11F65290aED79B3eD5","title":"Keeper"},{"location":"developers/addresses/#rewards","text":"Name Address aaveTribeIncentivesController 0xDee5c1662bBfF8f80f7c572D8091BF251b3B0dAB aaveTribeIncentivesControllerImpl 0xFF865335401F12B88fa3FF5A3a51685A7f224191 autoRewardsDistributor 0x61be49dfbd869a601fea076e1a1379903e61a895 erc20Dripper 0x3Fe0EAD3500e767F0F8bC2d3B5AF7755B1b21A6a rariRewardsDistributorDelegate 0x220f93183a69d1598e8405310cB361CFF504146F rariRewardsDistributorDelegator 0x73F16f0c0Cd1A078A54894974C5C054D8dC1A3d7 rewardsDistributorAdmin 0x4e979E8b136Cd7BdEBB83ea50a599C3BED1e15c0 stakingTokenWrapperBribeD3pool 0x462515dC7c21C728C8b7A777fDC89EEdAcF74537 stakingTokenWrapperFOXLaaS 0x3CD384ff1Fa1cbA8f06DF326AF4cbDA634aF94e8 stakingTokenWrapperGROLaaS 0x508629e8E0B96986Df4D0F1F60aadeF1d0FbaE96 stakingTokenWrapperKYLINLaaS 0xFe266d143dB42a9835e2B1AB43B64a46278398cc stakingTokenWrapperMStableLaaS 0x9B9ad20Cd99Cac3B536b94497A18346d66db0379 stakingTokenWrapperNEARLaaS 0x3b3591a4f7FD386E9987Eb48d898e29b57c30c47 stakingTokenWrapperPoolTogetherLaaS 0x6b018170311F3DA23c3fA62AFe1b2D0638522CCD stakingTokenWrapperRari 0xd81Be1B9A7895C996704A8DDa794BbA4454EeB90 stakingTokenWrapperSYNLaaS 0x5Db85e395735Bb42eEB720Fe2EE69627d246e300 stakingTokenWrapperUMALaaS 0x90B336dFF819b9e4b3D9A32cabdcAB0E92836065 stwBulkHarvest 0x83433D925048d7e9D2D7Eec2A0Efbb4456Af2F93 tribalChief 0x9e1076cC0d19F9B0b8019F384B0a29E48Ee46f7f tribalChiefImpl 0x2d91362e8bcAA8826b482B531dcb170FC9d17777 tribalChiefSyncV2 0xb41c594f9a6a2E0882212598337AF8145f63731b votiumBriberD3pool 0x0BEC570466B466aB689Ad33F1Ce5238CA43C8003","title":"Rewards"},{"location":"developers/addresses/#feirari","text":"Name Address rariPool8Comptroller 0xc54172e34046c1653d1920d40333dd358c7a1af4 rariPool8Dai 0x7e9cE3CAa9910cc048590801e64174957Ed41d43 rariPool8DaiIrm 0xede47399e2aa8f076d40dc52896331cba8bd40f7 rariPool8Eth 0xbB025D470162CC5eA24daF7d4566064EE7f5F111 rariPool8EthIrm 0xbab47e4b692195bf064923178a90ef999a15f819 rariPool8Fei 0xd8553552f8868C1Ef160eEdf031cF0BCf9686945 rariPool8FeiIrm 0x8f47be5692180079931e2f983db6996647aba0a5 rariPool8Tribe 0xFd3300A9a74b3250F1b2AbC12B47611171910b07 rariPool8TribeIrm 0x075538650a9c69ac8019507a7dd1bd879b12c1d7","title":"FeiRari"},{"location":"developers/bug-bounty/","text":"Bug Bounty Bug Bounties Program overview Fei Protocol's goal is to maintain a liquid market in which ETH/FEI trades closely to the ETH/USD price. FEI achieves this via a new stability mechanism known as direct incentives. Direct incentive stable coins use dynamic mint rewards and burn penalties on DEX trade volume to maintain the peg. Governance can add and update DEX integrations and other incentives as needed, which uses the TRIBE governance token. The bug bounty program is focused on its smart contracts and website and the prevention of the loss of user funds and the disruption of the governance system. All bug submissions must go through Immunefi's bug submission process on the Fei bug bounty page The Fei bug bounty page can be viewed at https://immunefi.com/bounty/feiprotocol . When a hacker hits the \"Submit bug report\" button, they will be sent to bugs.immunefi.com which will guide them through the process of creating a bug report. Rewards by threat level Rewards are distributed according to the impact of the vulnerability based on the Immunefi Vulnerability Severity Classification System . This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from a consequence of exploitation to privilege required to the likelihood of a successful exploit. Smart Contracts and Blockchain Critical* Up to USD 1 000 000 High USD 7 500 Medium USD 3 250 Low USD 1 000 Websites and Apps Critical USD 15 000 High USD 10 000 Medium USD 1 000 Low USD 200 Payouts are handled by the Fei Protocol team directly and are denominated in USD. However, payouts are done in TRIBE or FEI . *Critical-level smart contract vulnerabilities that result in the loss of user funds will have rewards additionally capped at 10% of the funds potentially affected based on the vulnerability that was identified. These rewards are additionally only payable in TRIBE and have a vesting schedule lasting between 6-12 months with a minimum of 6 months for rewards up to USD 400 000, with an additional month added for every USD 100,000 tranche, rounded up. Assets in Scope Prioritized vulnerabilities We are especially interested in receiving and rewarding vulnerabilities of the following types: Smart Contracts and Blockchain Re-entrancy Logic errors including user authentication errors Solidity/EVM details not considered including integer over-/under-flow including unhandled exceptions Trusting trust/dependency vulnerabilities including composability vulnerabilities Oracle failure/manipulation Novel governance attacks Economic/financial attacks including flash loan attacks Congestion and scalability including running out of gas including block stuffing including susceptibility to frontrunning Consensus failures Cryptography problems Signature malleability Susceptibility to replay attacks Weak randomness Weak encryption Susceptibility to block timestamp manipulation Missing access controls / unprotected internal or debugging interfaces Websites and Apps Remote Code Execution Trusting trust/dependency vulnerabilities Vertical Privilege Escalation XML External Entities Injection SQL Injection LFI/RFI Horizontal Privilege Escalation Stored XSS Reflective XSS with impact CSRF CSRF with impact Direct object reference Internal SSRF Session fixation Insecure Deserialization Direct object reference Path Traversal DOM XSS SSL misconfigurations SPF configuration problems SSL/TLS issues (weak crypto, improper setup) URL redirect Clickjacking Misleading Unicode text (e.g., using right to left override characters) Coercing the application to display/return specific text to other users Out of Scope & Rules The following vulnerabilities are excluded from the rewards for this bug bounty program: All Programs Attacks that the reporter has already exploited themselves, leading to damage Attacks requiring access to leaked keys/credentials Attacks requiring access to privileged addresses (governance, strategist) Smart Contracts and Blockchain Incorrect data supplied by third party oracles Not to exclude oracle manipulation/flash loan attacks Basic economic governance attacks (e.g. 51% attack) Lack of liquidity Best practice critiques Sybil attacks Websites and Apps Theoretical vulnerabilities without any proof or demonstration Content spoofing / Text injection issues Self-XSS Captcha bypass using OCR CSRF with no security impact (logout CSRF, change language, etc.) Missing HTTP Security Headers (such as X-FRAME-OPTIONS) or cookie security flags (such as \u201chttponly\u201d) Server-side information disclosure such as IPs, server names, and most stack traces Vulnerabilities used to enumerate or confirm the existence of users or tenants Vulnerabilities requiring unlikely user actions URL Redirects (unless combined with another vulnerability to produce a more severe vulnerability) Lack of SSL/TLS best practices DDoS vulnerabilities Attacks requiring privileged access from within the organization The bug bounty program prohibits the following activities: Any testing with mainnet or public testnet contracts; all testing should be done on private testnets Any testing with pricing oracles or third party smart contracts Attempting phishing or other social engineering attacks against our employees and/or customers Any testing with third-party systems and applications (e.g., browser extensions) as well as websites (e.g., SSO providers, advertising networks) Any denial of service attacks Automated testing of services that generates significant amounts of traffic Public disclosure of an unpatched vulnerability in an embargoed bounty","title":"Bug Bounty"},{"location":"developers/bug-bounty/#bug-bounty","text":"","title":"Bug Bounty"},{"location":"developers/bug-bounty/#bug-bounties","text":"Program overview Fei Protocol's goal is to maintain a liquid market in which ETH/FEI trades closely to the ETH/USD price. FEI achieves this via a new stability mechanism known as direct incentives. Direct incentive stable coins use dynamic mint rewards and burn penalties on DEX trade volume to maintain the peg. Governance can add and update DEX integrations and other incentives as needed, which uses the TRIBE governance token. The bug bounty program is focused on its smart contracts and website and the prevention of the loss of user funds and the disruption of the governance system. All bug submissions must go through Immunefi's bug submission process on the Fei bug bounty page The Fei bug bounty page can be viewed at https://immunefi.com/bounty/feiprotocol . When a hacker hits the \"Submit bug report\" button, they will be sent to bugs.immunefi.com which will guide them through the process of creating a bug report. Rewards by threat level Rewards are distributed according to the impact of the vulnerability based on the Immunefi Vulnerability Severity Classification System . This is a simplified 5-level scale, with separate scales for websites/apps and smart contracts/blockchains, encompassing everything from a consequence of exploitation to privilege required to the likelihood of a successful exploit. Smart Contracts and Blockchain Critical* Up to USD 1 000 000 High USD 7 500 Medium USD 3 250 Low USD 1 000 Websites and Apps Critical USD 15 000 High USD 10 000 Medium USD 1 000 Low USD 200 Payouts are handled by the Fei Protocol team directly and are denominated in USD. However, payouts are done in TRIBE or FEI . *Critical-level smart contract vulnerabilities that result in the loss of user funds will have rewards additionally capped at 10% of the funds potentially affected based on the vulnerability that was identified. These rewards are additionally only payable in TRIBE and have a vesting schedule lasting between 6-12 months with a minimum of 6 months for rewards up to USD 400 000, with an additional month added for every USD 100,000 tranche, rounded up. Assets in Scope Prioritized vulnerabilities We are especially interested in receiving and rewarding vulnerabilities of the following types: Smart Contracts and Blockchain Re-entrancy Logic errors including user authentication errors Solidity/EVM details not considered including integer over-/under-flow including unhandled exceptions Trusting trust/dependency vulnerabilities including composability vulnerabilities Oracle failure/manipulation Novel governance attacks Economic/financial attacks including flash loan attacks Congestion and scalability including running out of gas including block stuffing including susceptibility to frontrunning Consensus failures Cryptography problems Signature malleability Susceptibility to replay attacks Weak randomness Weak encryption Susceptibility to block timestamp manipulation Missing access controls / unprotected internal or debugging interfaces Websites and Apps Remote Code Execution Trusting trust/dependency vulnerabilities Vertical Privilege Escalation XML External Entities Injection SQL Injection LFI/RFI Horizontal Privilege Escalation Stored XSS Reflective XSS with impact CSRF CSRF with impact Direct object reference Internal SSRF Session fixation Insecure Deserialization Direct object reference Path Traversal DOM XSS SSL misconfigurations SPF configuration problems SSL/TLS issues (weak crypto, improper setup) URL redirect Clickjacking Misleading Unicode text (e.g., using right to left override characters) Coercing the application to display/return specific text to other users Out of Scope & Rules The following vulnerabilities are excluded from the rewards for this bug bounty program: All Programs Attacks that the reporter has already exploited themselves, leading to damage Attacks requiring access to leaked keys/credentials Attacks requiring access to privileged addresses (governance, strategist) Smart Contracts and Blockchain Incorrect data supplied by third party oracles Not to exclude oracle manipulation/flash loan attacks Basic economic governance attacks (e.g. 51% attack) Lack of liquidity Best practice critiques Sybil attacks Websites and Apps Theoretical vulnerabilities without any proof or demonstration Content spoofing / Text injection issues Self-XSS Captcha bypass using OCR CSRF with no security impact (logout CSRF, change language, etc.) Missing HTTP Security Headers (such as X-FRAME-OPTIONS) or cookie security flags (such as \u201chttponly\u201d) Server-side information disclosure such as IPs, server names, and most stack traces Vulnerabilities used to enumerate or confirm the existence of users or tenants Vulnerabilities requiring unlikely user actions URL Redirects (unless combined with another vulnerability to produce a more severe vulnerability) Lack of SSL/TLS best practices DDoS vulnerabilities Attacks requiring privileged access from within the organization The bug bounty program prohibits the following activities: Any testing with mainnet or public testnet contracts; all testing should be done on private testnets Any testing with pricing oracles or third party smart contracts Attempting phishing or other social engineering attacks against our employees and/or customers Any testing with third-party systems and applications (e.g., browser extensions) as well as websites (e.g., SSO providers, advertising networks) Any denial of service attacks Automated testing of services that generates significant amounts of traffic Public disclosure of an unpatched vulnerability in an embargoed bounty","title":"Bug Bounties"},{"location":"developers/permissions/","text":"MINTER_ROLE Name Address bondingCurve 0xB783c0E21763bEf9F2d04E6499abFbe23AdB7e1F uniswapPCVDeposit 0x15958381E9E6dc98bD49655e36f524D2203a28bD feiDAOTimelock 0xd51dbA7a94e1adEa403553A8235C302cEbF41a3c dpiUniswapPCVDeposit 0x902199755219A9f8209862d09F1891cfb34F59a3 pcvEquityMinter 0x904Deb2Dac1EdfCBBb69b9c279aE5F75E57Cf5E9 collateralizationOracleKeeper 0x62378C316a6161A613D02E11F65290aED79B3eD5 optimisticMinter 0xE66c4De480Bd317054B5a3CF8E8689649d0728c9 agEurAngleUniswapPCVDeposit 0x7AC2Ab8143634419c5bc230A9f9955C3e29f64Ef daiPSM 0x210300C158f95E1342fD008aE417ef68311c49C2 BURNER_ROLE Name Address ethReserveStabilizer 0x17305f0e18318994a57b494078CAC866A857F7b6 GOVERN_ROLE Name Address core 0x8d5ED43dCa8C2F7dFB20CF7b53CC7E593635d7b9 timelock 0x639572471f2f318464dc01066a56867130e45E25 feiDAOTimelock 0xd51dbA7a94e1adEa403553A8235C302cEbF41a3c PCV_CONTROLLER_ROLE Name Address feiDAOTimelock 0xd51dbA7a94e1adEa403553A8235C302cEbF41a3c ratioPCVControllerV2 0x221fff24FB66dA3c722c7C5B856956a6a30C0179 aaveEthPCVDripController 0xb3D63876d95d3a5e591D4DE536dC410b97244086 compoundEthPCVDripController 0xa84C8be28f3d560059339f06C6b6c5B23f53C58C pcvGuardian 0x2D1b1b509B6432A73e3d798572f0648f6453a5D9 daiPCVDripController 0x3e0f66c5687FF917809A3F7fA7096e1Bc409fB03 GUARDIAN_ROLE Name Address multisig 0xB8f482539F2d3Ae2C9ea6076894df36D1f632775 pcvGuardian 0x2D1b1b509B6432A73e3d798572f0648f6453a5D9 ORACLE_ADMIN_ROLE Name Address collateralizationOracleGuardian 0x81De6bA8df84A4B679061952E171a27F096F3eAe optimisticTimelock 0xbC9C084a12678ef5B516561df902fdc426d95483 SWAP_ADMIN_ROLE Name Address pcvEquityMinter 0x904Deb2Dac1EdfCBBb69b9c279aE5F75E57Cf5E9 optimisticTimelock 0xbC9C084a12678ef5B516561df902fdc426d95483 BALANCER_MANAGER_ADMIN_ROLE Name Address PSM_ADMIN_ROLE Name Address TRIBAL_CHIEF_ADMIN_ROLE Name Address optimisticTimelock 0xbC9C084a12678ef5B516561df902fdc426d95483 tribalChiefSyncV2 0xb41c594f9a6a2E0882212598337AF8145f63731b","title":"Permissions"},{"location":"developers/permissions/#minter_role","text":"Name Address bondingCurve 0xB783c0E21763bEf9F2d04E6499abFbe23AdB7e1F uniswapPCVDeposit 0x15958381E9E6dc98bD49655e36f524D2203a28bD feiDAOTimelock 0xd51dbA7a94e1adEa403553A8235C302cEbF41a3c dpiUniswapPCVDeposit 0x902199755219A9f8209862d09F1891cfb34F59a3 pcvEquityMinter 0x904Deb2Dac1EdfCBBb69b9c279aE5F75E57Cf5E9 collateralizationOracleKeeper 0x62378C316a6161A613D02E11F65290aED79B3eD5 optimisticMinter 0xE66c4De480Bd317054B5a3CF8E8689649d0728c9 agEurAngleUniswapPCVDeposit 0x7AC2Ab8143634419c5bc230A9f9955C3e29f64Ef daiPSM 0x210300C158f95E1342fD008aE417ef68311c49C2","title":"MINTER_ROLE"},{"location":"developers/permissions/#burner_role","text":"Name Address ethReserveStabilizer 0x17305f0e18318994a57b494078CAC866A857F7b6","title":"BURNER_ROLE"},{"location":"developers/permissions/#govern_role","text":"Name Address core 0x8d5ED43dCa8C2F7dFB20CF7b53CC7E593635d7b9 timelock 0x639572471f2f318464dc01066a56867130e45E25 feiDAOTimelock 0xd51dbA7a94e1adEa403553A8235C302cEbF41a3c","title":"GOVERN_ROLE"},{"location":"developers/permissions/#pcv_controller_role","text":"Name Address feiDAOTimelock 0xd51dbA7a94e1adEa403553A8235C302cEbF41a3c ratioPCVControllerV2 0x221fff24FB66dA3c722c7C5B856956a6a30C0179 aaveEthPCVDripController 0xb3D63876d95d3a5e591D4DE536dC410b97244086 compoundEthPCVDripController 0xa84C8be28f3d560059339f06C6b6c5B23f53C58C pcvGuardian 0x2D1b1b509B6432A73e3d798572f0648f6453a5D9 daiPCVDripController 0x3e0f66c5687FF917809A3F7fA7096e1Bc409fB03","title":"PCV_CONTROLLER_ROLE"},{"location":"developers/permissions/#guardian_role","text":"Name Address multisig 0xB8f482539F2d3Ae2C9ea6076894df36D1f632775 pcvGuardian 0x2D1b1b509B6432A73e3d798572f0648f6453a5D9","title":"GUARDIAN_ROLE"},{"location":"developers/permissions/#oracle_admin_role","text":"Name Address collateralizationOracleGuardian 0x81De6bA8df84A4B679061952E171a27F096F3eAe optimisticTimelock 0xbC9C084a12678ef5B516561df902fdc426d95483","title":"ORACLE_ADMIN_ROLE"},{"location":"developers/permissions/#swap_admin_role","text":"Name Address pcvEquityMinter 0x904Deb2Dac1EdfCBBb69b9c279aE5F75E57Cf5E9 optimisticTimelock 0xbC9C084a12678ef5B516561df902fdc426d95483","title":"SWAP_ADMIN_ROLE"},{"location":"developers/permissions/#balancer_manager_admin_role","text":"Name Address","title":"BALANCER_MANAGER_ADMIN_ROLE"},{"location":"developers/permissions/#psm_admin_role","text":"Name Address","title":"PSM_ADMIN_ROLE"},{"location":"developers/permissions/#tribal_chief_admin_role","text":"Name Address optimisticTimelock 0xbC9C084a12678ef5B516561df902fdc426d95483 tribalChiefSyncV2 0xb41c594f9a6a2E0882212598337AF8145f63731b","title":"TRIBAL_CHIEF_ADMIN_ROLE"},{"location":"developers/contracts/AavePCVDeposit/","text":"\u2b05\ufe0f Contracts AavePCVDeposit Aave PCV Deposit Author: Fei Protocol Events ClaimRewards event ClaimRewards(address,uint256) Params Param Type Notes caller indexed address amount uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 aToken function aToken() view returns(address) the associated Aave aToken for the deposit Returns Param Type Notes address balance function balance() view returns(uint256) returns total balance of PCV in the Deposit aTokens are rebasing, so represent 1:1 on underlying value Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address claimRewards function claimRewards() nonpayable claims Aave rewards from the deposit and transfers to this address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address deposit function deposit() nonpayable deposit buffered aTokens fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 incentivesController function incentivesController() view returns(address) the Aave incentives controller for the aToken Returns Param Type Notes address isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool lendingPool function lendingPool() view returns(address) the Aave v2 lending pool Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit Returns Param Type Notes uint256 uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address token function token() view returns(address) the underlying token of the PCV deposit Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused withdraw function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation Params Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send wrapETH function wrapETH() nonpayable Wraps all ETH held by the contract to WETH Anyone can call it \u2b05\ufe0f Contracts","title":"AavePCVDeposit"},{"location":"developers/contracts/AavePCVDeposit/#aavepcvdeposit","text":"Aave PCV Deposit Author: Fei Protocol","title":"AavePCVDeposit"},{"location":"developers/contracts/AavePCVDeposit/#events","text":"","title":"Events"},{"location":"developers/contracts/AavePCVDeposit/#claimrewards","text":"event ClaimRewards(address,uint256)","title":"ClaimRewards"},{"location":"developers/contracts/AavePCVDeposit/#params","text":"Param Type Notes caller indexed address amount uint256","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/AavePCVDeposit/#params_1","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/AavePCVDeposit/#params_2","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/AavePCVDeposit/#params_3","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/AavePCVDeposit/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/AavePCVDeposit/#params_5","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/AavePCVDeposit/#params_6","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/AavePCVDeposit/#params_7","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/AavePCVDeposit/#params_8","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/AavePCVDeposit/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/AavePCVDeposit/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#atoken","text":"function aToken() view returns(address) the associated Aave aToken for the deposit","title":"aToken"},{"location":"developers/contracts/AavePCVDeposit/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#balance","text":"function balance() view returns(uint256) returns total balance of PCV in the Deposit aTokens are rebasing, so represent 1:1 on underlying value","title":"balance"},{"location":"developers/contracts/AavePCVDeposit/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/AavePCVDeposit/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#claimrewards_1","text":"function claimRewards() nonpayable claims Aave rewards from the deposit and transfers to this address","title":"claimRewards"},{"location":"developers/contracts/AavePCVDeposit/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/AavePCVDeposit/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#deposit_1","text":"function deposit() nonpayable deposit buffered aTokens","title":"deposit"},{"location":"developers/contracts/AavePCVDeposit/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/AavePCVDeposit/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/AavePCVDeposit/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#incentivescontroller","text":"function incentivesController() view returns(address) the Aave incentives controller for the aToken","title":"incentivesController"},{"location":"developers/contracts/AavePCVDeposit/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/AavePCVDeposit/#params_9","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#lendingpool","text":"function lendingPool() view returns(address) the Aave v2 lending pool","title":"lendingPool"},{"location":"developers/contracts/AavePCVDeposit/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/AavePCVDeposit/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/AavePCVDeposit/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/AavePCVDeposit/#returns_11","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/AavePCVDeposit/#params_10","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/AavePCVDeposit/#params_11","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#token","text":"function token() view returns(address) the underlying token of the PCV deposit","title":"token"},{"location":"developers/contracts/AavePCVDeposit/#returns_12","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/AavePCVDeposit/#returns_13","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/AavePCVDeposit/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/AavePCVDeposit/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/AavePCVDeposit/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation","title":"withdraw"},{"location":"developers/contracts/AavePCVDeposit/#params_12","text":"Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/AavePCVDeposit/#params_13","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/AavePCVDeposit/#params_14","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send","title":"Params"},{"location":"developers/contracts/AavePCVDeposit/#wrapeth","text":"function wrapETH() nonpayable Wraps all ETH held by the contract to WETH Anyone can call it \u2b05\ufe0f Contracts","title":"wrapETH"},{"location":"developers/contracts/AngleUniswapPCVDeposit/","text":"\u2b05\ufe0f Contracts AngleUniswapPCVDeposit implementation for Angle PCV Deposit Author: Angle Core Team and Fei Protocol Events BackupOracleUpdate event BackupOracleUpdate(address,address) Params Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DecimalsNormalizerUpdate event DecimalsNormalizerUpdate(int256,int256) Params Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256 Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 InvertUpdate event InvertUpdate(bool,bool) Params Param Type Notes oldDoInvert bool newDoInvert bool MaxBasisPointsFromPegLPUpdate event MaxBasisPointsFromPegLPUpdate(uint256,uint256) Params Param Type Notes oldMaxBasisPointsFromPegLP uint256 newMaxBasisPointsFromPegLP uint256 OracleUpdate event OracleUpdate(address,address) Params Param Type Notes oldOracle indexed address newOracle indexed address PairUpdate event PairUpdate(address,address) Params Param Type Notes oldPair indexed address newPair indexed address Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 backupOracle function backupOracle() view returns(address) the backup oracle reference by the contract Returns Param Type Notes address balance function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address burnAgToken function burnAgToken(uint256) nonpayable burn agToken for FEI the call will revert if slippage is too high compared to oracle Params Param Type Notes amountAgToken uint256 burnAgTokenAll function burnAgTokenAll() nonpayable burn ALL agToken held for FEI see burnAgToken(uint256 amount). claimRewards function claimRewards() nonpayable claim staking rewards core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address decimalsNormalizer function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer) Returns Param Type Notes int256 deposit function deposit() nonpayable deposit tokens into the PCV allocation doInvert function doInvert() view returns(bool) Returns Param Type Notes bool fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getReserves function getReserves() view returns(uint256,uint256) pair reserves with fei listed first Returns Param Type Notes feiReserves uint256 tokenReserves uint256 invert function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI Params Param Type Notes price tuple the peg price to invert Returns Param Type Notes tuple isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool liquidityOwned function liquidityOwned() view returns(uint256) amount of pair liquidity owned by this contract Returns Param Type Notes uint256 maxBasisPointsFromPegLP function maxBasisPointsFromPegLP() view returns(uint256) a slippage protection parameter, deposits revert when spot price is > this % from oracle Returns Param Type Notes uint256 mintAgToken function mintAgToken(uint256) nonpayable mint agToken from FEI the call will revert if slippage is too high compared to oracle. Params Param Type Notes amountFei uint256 oracle function oracle() view returns(address) the oracle reference by the contract Returns Param Type Notes address pair function pair() view returns(address) the referenced Uniswap pair contract Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool poolManager function poolManager() view returns(address) the Angle PoolManager contract Returns Param Type Notes address readOracle function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc Returns Param Type Notes tuple resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) get the manipulation resistant Other(example ETH) and FEI in the Uniswap pool Returns Param Type Notes uint256 uint256 router function router() view returns(address) the Uniswap router contract Returns Param Type Notes address setBackupOracle function setBackupOracle(address) nonpayable sets the referenced backup oracle Params Param Type Notes newBackupOracle address the new backup oracle to reference setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDecimalsNormalizer function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer Params Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer setDoInvert function setDoInvert(bool) nonpayable sets the flag for whether to invert or not Params Param Type Notes newDoInvert bool the new flag for whether to invert setMaxBasisPointsFromPegLP function setMaxBasisPointsFromPegLP(uint256) nonpayable sets the new slippage parameter for depositing liquidity Params Param Type Notes _maxBasisPointsFromPegLP uint256 the new distance in basis points (1/10000) from peg beyond which a liquidity provision will fail setOracle function setOracle(address) nonpayable sets the referenced oracle Params Param Type Notes newOracle address the new oracle to reference setPair function setPair(address) nonpayable set the new pair contract also approves the router for the new pair token and underlying token Params Param Type Notes _pair address the new pair setPoolManager function setPoolManager(address) nonpayable set a new poolManager address Params Param Type Notes _poolManager address the new poolManager setStakingRewards function setStakingRewards(address) nonpayable set a new stakingRewards address Params Param Type Notes _stakingRewards address the new stakingRewards stableMaster function stableMaster() view returns(address) the Angle StableMaster contract Returns Param Type Notes address stakingRewards function stakingRewards() view returns(address) the Angle StakingRewards contract Returns Param Type Notes address token function token() view returns(address) the address of the non-fei underlying token Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused updateOracle function updateOracle() nonpayable updates the referenced oracle withdraw function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation has rounding errors on amount to withdraw, can differ from the input \"amountUnderlying\" Params Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"AngleUniswapPCVDeposit"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#angleuniswappcvdeposit","text":"implementation for Angle PCV Deposit Author: Angle Core Team and Fei Protocol","title":"AngleUniswapPCVDeposit"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#events","text":"","title":"Events"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#backuporacleupdate","text":"event BackupOracleUpdate(address,address)","title":"BackupOracleUpdate"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params","text":"Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_1","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_2","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#decimalsnormalizerupdate","text":"event DecimalsNormalizerUpdate(int256,int256)","title":"DecimalsNormalizerUpdate"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_3","text":"Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_4","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#invertupdate","text":"event InvertUpdate(bool,bool)","title":"InvertUpdate"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_5","text":"Param Type Notes oldDoInvert bool newDoInvert bool","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#maxbasispointsfrompeglpupdate","text":"event MaxBasisPointsFromPegLPUpdate(uint256,uint256)","title":"MaxBasisPointsFromPegLPUpdate"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_6","text":"Param Type Notes oldMaxBasisPointsFromPegLP uint256 newMaxBasisPointsFromPegLP uint256","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#oracleupdate","text":"event OracleUpdate(address,address)","title":"OracleUpdate"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_7","text":"Param Type Notes oldOracle indexed address newOracle indexed address","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#pairupdate","text":"event PairUpdate(address,address)","title":"PairUpdate"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_8","text":"Param Type Notes oldPair indexed address newPair indexed address","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_9","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_10","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_11","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_12","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_13","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#backuporacle","text":"function backupOracle() view returns(address) the backup oracle reference by the contract","title":"backupOracle"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#balance","text":"function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI","title":"balance"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#burnagtoken","text":"function burnAgToken(uint256) nonpayable burn agToken for FEI the call will revert if slippage is too high compared to oracle","title":"burnAgToken"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_14","text":"Param Type Notes amountAgToken uint256","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#burnagtokenall","text":"function burnAgTokenAll() nonpayable burn ALL agToken held for FEI see burnAgToken(uint256 amount).","title":"burnAgTokenAll"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#claimrewards","text":"function claimRewards() nonpayable claim staking rewards","title":"claimRewards"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#decimalsnormalizer","text":"function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer)","title":"decimalsNormalizer"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_5","text":"Param Type Notes int256","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#deposit_1","text":"function deposit() nonpayable deposit tokens into the PCV allocation","title":"deposit"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#doinvert","text":"function doInvert() view returns(bool)","title":"doInvert"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#getreserves","text":"function getReserves() view returns(uint256,uint256) pair reserves with fei listed first","title":"getReserves"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_9","text":"Param Type Notes feiReserves uint256 tokenReserves uint256","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#invert","text":"function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI","title":"invert"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_15","text":"Param Type Notes price tuple the peg price to invert","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_10","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_16","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#liquidityowned","text":"function liquidityOwned() view returns(uint256) amount of pair liquidity owned by this contract","title":"liquidityOwned"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#maxbasispointsfrompeglp","text":"function maxBasisPointsFromPegLP() view returns(uint256) a slippage protection parameter, deposits revert when spot price is > this % from oracle","title":"maxBasisPointsFromPegLP"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#mintagtoken","text":"function mintAgToken(uint256) nonpayable mint agToken from FEI the call will revert if slippage is too high compared to oracle.","title":"mintAgToken"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_17","text":"Param Type Notes amountFei uint256","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#oracle","text":"function oracle() view returns(address) the oracle reference by the contract","title":"oracle"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_14","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#pair","text":"function pair() view returns(address) the referenced Uniswap pair contract","title":"pair"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_15","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_16","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#poolmanager","text":"function poolManager() view returns(address) the Angle PoolManager contract","title":"poolManager"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_17","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#readoracle","text":"function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc","title":"readOracle"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_18","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) get the manipulation resistant Other(example ETH) and FEI in the Uniswap pool","title":"resistantBalanceAndFei"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_19","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#router","text":"function router() view returns(address) the Uniswap router contract","title":"router"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_20","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#setbackuporacle","text":"function setBackupOracle(address) nonpayable sets the referenced backup oracle","title":"setBackupOracle"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_18","text":"Param Type Notes newBackupOracle address the new backup oracle to reference","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_19","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_20","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#setdecimalsnormalizer","text":"function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer","title":"setDecimalsNormalizer"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_21","text":"Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#setdoinvert","text":"function setDoInvert(bool) nonpayable sets the flag for whether to invert or not","title":"setDoInvert"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_22","text":"Param Type Notes newDoInvert bool the new flag for whether to invert","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#setmaxbasispointsfrompeglp","text":"function setMaxBasisPointsFromPegLP(uint256) nonpayable sets the new slippage parameter for depositing liquidity","title":"setMaxBasisPointsFromPegLP"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_23","text":"Param Type Notes _maxBasisPointsFromPegLP uint256 the new distance in basis points (1/10000) from peg beyond which a liquidity provision will fail","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#setoracle","text":"function setOracle(address) nonpayable sets the referenced oracle","title":"setOracle"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_24","text":"Param Type Notes newOracle address the new oracle to reference","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#setpair","text":"function setPair(address) nonpayable set the new pair contract also approves the router for the new pair token and underlying token","title":"setPair"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_25","text":"Param Type Notes _pair address the new pair","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#setpoolmanager","text":"function setPoolManager(address) nonpayable set a new poolManager address","title":"setPoolManager"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_26","text":"Param Type Notes _poolManager address the new poolManager","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#setstakingrewards","text":"function setStakingRewards(address) nonpayable set a new stakingRewards address","title":"setStakingRewards"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_27","text":"Param Type Notes _stakingRewards address the new stakingRewards","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#stablemaster","text":"function stableMaster() view returns(address) the Angle StableMaster contract","title":"stableMaster"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_21","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#stakingrewards","text":"function stakingRewards() view returns(address) the Angle StakingRewards contract","title":"stakingRewards"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_22","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#token","text":"function token() view returns(address) the address of the non-fei underlying token","title":"token"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_23","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_24","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#returns_25","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#updateoracle","text":"function updateOracle() nonpayable updates the referenced oracle","title":"updateOracle"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation has rounding errors on amount to withdraw, can differ from the input \"amountUnderlying\"","title":"withdraw"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_28","text":"Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_29","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/AngleUniswapPCVDeposit/#params_30","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/AutoRewardsDistributor/","text":"\u2b05\ufe0f Contracts AutoRewardsDistributor Controller Contract to set tribe per block in Rewards Distributor Admin on Rari Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Paused event Paused(address) Params Param Type Notes account address RewardsDistributorAdminChanged event RewardsDistributorAdminChanged(address,address) Params Param Type Notes oldRewardsDistributorAdmin address newRewardsDistributorAdmin address SpeedChanged event SpeedChanged(uint256) Params Param Type Notes newSpeed uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 cTokenAddress function cTokenAddress() view returns(address) address of the CToken this contract controls rewards for Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getNewRewardSpeed function getNewRewardSpeed() view returns(uint256,bool) function to get the new comp speed and figure out if an update is needed Returns Param Type Notes newCompSpeed uint256 the newly calculated compSpeed based on allocation points in the TribalChief updateNeeded bool boolean indicating whether the new compSpeed is not equal to the existing compSpeed isBorrowIncentivized function isBorrowIncentivized() view returns(bool) boolean which decides the action to incentivize Returns Param Type Notes bool isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool rewardsDistributorAdmin function rewardsDistributorAdmin() view returns(address) rewards distributor admin contract Returns Param Type Notes address setAutoRewardsDistribution function setAutoRewardsDistribution() nonpayable function to automatically set the rewards speed on the RewardsDistributor contract through the RewardsDistributorAdmin setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setRewardsDistributorAdmin function setRewardsDistributorAdmin(address) nonpayable API to point to a new rewards distributor admin contract Params Param Type Notes _newRewardsDistributorAdmin address the address of the new RewardsDistributorAdmin contract tribalChief function tribalChief() view returns(address) tribal chief contract Returns Param Type Notes address tribalChiefRewardIndex function tribalChiefRewardIndex() view returns(uint256) reward index on tribal chief to grab this staked token wrapper's index Returns Param Type Notes uint256 tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"AutoRewardsDistributor"},{"location":"developers/contracts/AutoRewardsDistributor/#autorewardsdistributor","text":"Controller Contract to set tribe per block in Rewards Distributor Admin on Rari","title":"AutoRewardsDistributor"},{"location":"developers/contracts/AutoRewardsDistributor/#events","text":"","title":"Events"},{"location":"developers/contracts/AutoRewardsDistributor/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/AutoRewardsDistributor/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/AutoRewardsDistributor/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/AutoRewardsDistributor/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/AutoRewardsDistributor/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/AutoRewardsDistributor/#params_2","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/AutoRewardsDistributor/#rewardsdistributoradminchanged","text":"event RewardsDistributorAdminChanged(address,address)","title":"RewardsDistributorAdminChanged"},{"location":"developers/contracts/AutoRewardsDistributor/#params_3","text":"Param Type Notes oldRewardsDistributorAdmin address newRewardsDistributorAdmin address","title":"Params"},{"location":"developers/contracts/AutoRewardsDistributor/#speedchanged","text":"event SpeedChanged(uint256)","title":"SpeedChanged"},{"location":"developers/contracts/AutoRewardsDistributor/#params_4","text":"Param Type Notes newSpeed uint256","title":"Params"},{"location":"developers/contracts/AutoRewardsDistributor/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/AutoRewardsDistributor/#params_5","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/AutoRewardsDistributor/#methods","text":"","title":"Methods"},{"location":"developers/contracts/AutoRewardsDistributor/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/AutoRewardsDistributor/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#ctokenaddress","text":"function cTokenAddress() view returns(address) address of the CToken this contract controls rewards for","title":"cTokenAddress"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#getnewrewardspeed","text":"function getNewRewardSpeed() view returns(uint256,bool) function to get the new comp speed and figure out if an update is needed","title":"getNewRewardSpeed"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_5","text":"Param Type Notes newCompSpeed uint256 the newly calculated compSpeed based on allocation points in the TribalChief updateNeeded bool boolean indicating whether the new compSpeed is not equal to the existing compSpeed","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#isborrowincentivized","text":"function isBorrowIncentivized() view returns(bool) boolean which decides the action to incentivize","title":"isBorrowIncentivized"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/AutoRewardsDistributor/#params_6","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/AutoRewardsDistributor/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#rewardsdistributoradmin","text":"function rewardsDistributorAdmin() view returns(address) rewards distributor admin contract","title":"rewardsDistributorAdmin"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#setautorewardsdistribution","text":"function setAutoRewardsDistribution() nonpayable function to automatically set the rewards speed on the RewardsDistributor contract through the RewardsDistributorAdmin","title":"setAutoRewardsDistribution"},{"location":"developers/contracts/AutoRewardsDistributor/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/AutoRewardsDistributor/#params_7","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/AutoRewardsDistributor/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/AutoRewardsDistributor/#params_8","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/AutoRewardsDistributor/#setrewardsdistributoradmin","text":"function setRewardsDistributorAdmin(address) nonpayable API to point to a new rewards distributor admin contract","title":"setRewardsDistributorAdmin"},{"location":"developers/contracts/AutoRewardsDistributor/#params_9","text":"Param Type Notes _newRewardsDistributorAdmin address the address of the new RewardsDistributorAdmin contract","title":"Params"},{"location":"developers/contracts/AutoRewardsDistributor/#tribalchief","text":"function tribalChief() view returns(address) tribal chief contract","title":"tribalChief"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#tribalchiefrewardindex","text":"function tribalChiefRewardIndex() view returns(uint256) reward index on tribal chief to grab this staked token wrapper's index","title":"tribalChiefRewardIndex"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_12","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/AutoRewardsDistributor/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/AutoRewardsDistributor/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/BPTLens/","text":"\u2b05\ufe0f Contracts BPTLens BPTLens Author: Fei Protocol a contract to read manipulation resistant balances from BPTs Methods VAULT function VAULT() view returns(address) the Balancer V2 Vault Returns Param Type Notes address balance function balance() view returns(uint256) gets the effective balance of \"balanceReportedIn\" token if the deposit were fully withdrawn Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) the token the lens reports balances in Returns Param Type Notes address feiInPair function feiInPair() view returns(bool) true if FEI is in the pair Returns Param Type Notes bool feiIsReportedIn function feiIsReportedIn() view returns(bool) true if FEI is the reported balance Returns Param Type Notes bool otherOracle function otherOracle() view returns(address) the oracle for the other token in the pair (not balanceReportedIn) Returns Param Type Notes address pool function pool() view returns(address) the balancer pool to look at Returns Param Type Notes address reportedOracle function reportedOracle() view returns(address) the oracle for balanceReportedIn token Returns Param Type Notes address resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) Calculates the manipulation resistant balances of Balancer pool tokens using the logic described here: https://docs.gyro.finance/learn/oracles/bpt-oracle This is robust to price manipulations within the Balancer pool. Returns Param Type Notes uint256 uint256 \u2b05\ufe0f Contracts","title":"BPTLens"},{"location":"developers/contracts/BPTLens/#bptlens","text":"BPTLens Author: Fei Protocol a contract to read manipulation resistant balances from BPTs","title":"BPTLens"},{"location":"developers/contracts/BPTLens/#methods","text":"","title":"Methods"},{"location":"developers/contracts/BPTLens/#vault","text":"function VAULT() view returns(address) the Balancer V2 Vault","title":"VAULT"},{"location":"developers/contracts/BPTLens/#returns","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BPTLens/#balance","text":"function balance() view returns(uint256) gets the effective balance of \"balanceReportedIn\" token if the deposit were fully withdrawn","title":"balance"},{"location":"developers/contracts/BPTLens/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BPTLens/#balancereportedin","text":"function balanceReportedIn() view returns(address) the token the lens reports balances in","title":"balanceReportedIn"},{"location":"developers/contracts/BPTLens/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BPTLens/#feiinpair","text":"function feiInPair() view returns(bool) true if FEI is in the pair","title":"feiInPair"},{"location":"developers/contracts/BPTLens/#returns_3","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BPTLens/#feiisreportedin","text":"function feiIsReportedIn() view returns(bool) true if FEI is the reported balance","title":"feiIsReportedIn"},{"location":"developers/contracts/BPTLens/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BPTLens/#otheroracle","text":"function otherOracle() view returns(address) the oracle for the other token in the pair (not balanceReportedIn)","title":"otherOracle"},{"location":"developers/contracts/BPTLens/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BPTLens/#pool","text":"function pool() view returns(address) the balancer pool to look at","title":"pool"},{"location":"developers/contracts/BPTLens/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BPTLens/#reportedoracle","text":"function reportedOracle() view returns(address) the oracle for balanceReportedIn token","title":"reportedOracle"},{"location":"developers/contracts/BPTLens/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BPTLens/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) Calculates the manipulation resistant balances of Balancer pool tokens using the logic described here: https://docs.gyro.finance/learn/oracles/bpt-oracle This is robust to price manipulations within the Balancer pool.","title":"resistantBalanceAndFei"},{"location":"developers/contracts/BPTLens/#returns_8","text":"Param Type Notes uint256 uint256 \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/","text":"\u2b05\ufe0f Contracts BalancerLBPSwapper BalancerLBPSwapper Author: Fei Protocol an auction contract which cyclically sells one token for another using Balancer LBP Events BackupOracleUpdate event BackupOracleUpdate(address,address) Params Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DecimalsNormalizerUpdate event DecimalsNormalizerUpdate(int256,int256) Params Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256 DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 ExitPool event ExitPool() InvertUpdate event InvertUpdate(bool,bool) Params Param Type Notes oldDoInvert bool newDoInvert bool MinTokenSpentUpdate event MinTokenSpentUpdate(uint256,uint256) Params Param Type Notes oldMinTokenSpentBalance uint256 newMinTokenSpentBalance uint256 OracleUpdate event OracleUpdate(address,address) Params Param Type Notes oldOracle indexed address newOracle indexed address Paused event Paused(address) Params Param Type Notes account address Swap event Swap(address,address,address,uint256,uint256) Params Param Type Notes _caller indexed address _tokenSpent indexed address _tokenReceived indexed address _amountSpent uint256 _amountReceived uint256 TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address UpdateReceivingAddress event UpdateReceivingAddress(address,address) Params Param Type Notes oldTokenReceivingAddress address newTokenReceivingAddress address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 backupOracle function backupOracle() view returns(address) the backup oracle reference by the contract Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address decimalsNormalizer function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer) Returns Param Type Notes int256 doInvert function doInvert() view returns(bool) Returns Param Type Notes bool duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 exitPool function exitPool(address) nonpayable redeeem all assets from LP pool Params Param Type Notes to address destination for withdrawn tokens fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 forceSwap function forceSwap() nonpayable Force a swap() call, without waiting afterTime. This should only be callable after init() call, when no other swap is happening (call reverts if weight change is in progress). getTokensIn function getTokensIn(uint256) view returns(address[],uint256[]) return the amount of tokens needed to seed the next auction Params Param Type Notes spentTokenBalance uint256 Returns Param Type Notes tokens address[] amountsIn uint256[] init function init(address) nonpayable initialize Balancer LBP Needs to be a separate method because this contract needs to be deployed and supplied as the owner of the pool on construction. Includes various checks to ensure the pool contract is correct and initialization can only be done once Params Param Type Notes _pool address the Balancer LBP used for swapping invert function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI Params Param Type Notes price tuple the peg price to invert Returns Param Type Notes tuple isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool minTokenSpentBalance function minTokenSpentBalance() view returns(uint256) the minimum amount of tokenSpent to kick off a new auction on swap() Returns Param Type Notes uint256 oracle function oracle() view returns(address) the oracle reference by the contract Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool pid function pid() view returns(bytes32) the Balancer V2 Pool id of pool Returns Param Type Notes bytes32 pool function pool() view returns(address) the Balancer LBP used for swapping Returns Param Type Notes address readOracle function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc Returns Param Type Notes tuple remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setAssetManagerPoolConfig function setAssetManagerPoolConfig(address,address,(uint64,uint64,uint64)) nonpayable Params Param Type Notes pool address token address poolConfig tuple setBackupOracle function setBackupOracle(address) nonpayable sets the referenced backup oracle Params Param Type Notes newBackupOracle address the new backup oracle to reference setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDecimalsNormalizer function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer Params Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer setDoInvert function setDoInvert(bool) nonpayable sets the flag for whether to invert or not Params Param Type Notes newDoInvert bool the new flag for whether to invert setMinTokenSpent function setMinTokenSpent(uint256) nonpayable sets the minimum token spent balance Params Param Type Notes newMinTokenSpentBalance uint256 minimum amount of FEI to trigger a new auction setOracle function setOracle(address) nonpayable sets the referenced oracle Params Param Type Notes newOracle address the new oracle to reference setPaused function setPaused(address,bool) nonpayable Params Param Type Notes pool address paused bool setReceivingAddress function setReceivingAddress(address) nonpayable Sets the address receiving swap's inbound tokens Params Param Type Notes newTokenReceivingAddress address the address that will receive tokens setSwapEnabled function setSwapEnabled(address,bool) nonpayable Params Param Type Notes pool address swapEnabled bool setSwapFee function setSwapFee(address,uint256) nonpayable Params Param Type Notes pool address swapFee uint256 setSwapFrequency function setSwapFrequency(uint256) nonpayable sets the minimum time between swaps Params Param Type Notes _frequency uint256 minimum time between swaps in seconds startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 swap function swap() nonpayable Swap algorithm 1. Withdraw existing LP tokens 2. Reset weights 3. Provide new liquidity 4. Trigger gradual weight change 5. Transfer remaining tokenReceived to tokenReceivingAddress assumes tokenSpent balance of contract exceeds minTokenSpentBalance to kick off a new auction swapEndTime function swapEndTime() view returns(uint256) returns when the next auction ends Returns Param Type Notes endTime uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 tokenReceived function tokenReceived() view returns(address) the token to buy Returns Param Type Notes address tokenReceivingAddress function tokenReceivingAddress() view returns(address) the address to send tokenReceived Returns Param Type Notes address tokenSpent function tokenSpent() view returns(address) the token to be auctioned Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused updateOracle function updateOracle() nonpayable updates the referenced oracle updateWeightsGradually function updateWeightsGradually(address,uint256,uint256,uint256[]) nonpayable Params Param Type Notes pool address startTime uint256 endTime uint256 endWeights uint256[] vault function vault() view returns(address) the Balancer V2 Vault contract Returns Param Type Notes address withdrawCollectedManagementFees function withdrawCollectedManagementFees(address,address) nonpayable Params Param Type Notes pool address recipient address withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send \u2b05\ufe0f Contracts","title":"BalancerLBPSwapper"},{"location":"developers/contracts/BalancerLBPSwapper/#balancerlbpswapper","text":"BalancerLBPSwapper Author: Fei Protocol an auction contract which cyclically sells one token for another using Balancer LBP","title":"BalancerLBPSwapper"},{"location":"developers/contracts/BalancerLBPSwapper/#events","text":"","title":"Events"},{"location":"developers/contracts/BalancerLBPSwapper/#backuporacleupdate","text":"event BackupOracleUpdate(address,address)","title":"BackupOracleUpdate"},{"location":"developers/contracts/BalancerLBPSwapper/#params","text":"Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/BalancerLBPSwapper/#params_1","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/BalancerLBPSwapper/#params_2","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#decimalsnormalizerupdate","text":"event DecimalsNormalizerUpdate(int256,int256)","title":"DecimalsNormalizerUpdate"},{"location":"developers/contracts/BalancerLBPSwapper/#params_3","text":"Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/BalancerLBPSwapper/#params_4","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#exitpool","text":"event ExitPool()","title":"ExitPool"},{"location":"developers/contracts/BalancerLBPSwapper/#invertupdate","text":"event InvertUpdate(bool,bool)","title":"InvertUpdate"},{"location":"developers/contracts/BalancerLBPSwapper/#params_5","text":"Param Type Notes oldDoInvert bool newDoInvert bool","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#mintokenspentupdate","text":"event MinTokenSpentUpdate(uint256,uint256)","title":"MinTokenSpentUpdate"},{"location":"developers/contracts/BalancerLBPSwapper/#params_6","text":"Param Type Notes oldMinTokenSpentBalance uint256 newMinTokenSpentBalance uint256","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#oracleupdate","text":"event OracleUpdate(address,address)","title":"OracleUpdate"},{"location":"developers/contracts/BalancerLBPSwapper/#params_7","text":"Param Type Notes oldOracle indexed address newOracle indexed address","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/BalancerLBPSwapper/#params_8","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#swap","text":"event Swap(address,address,address,uint256,uint256)","title":"Swap"},{"location":"developers/contracts/BalancerLBPSwapper/#params_9","text":"Param Type Notes _caller indexed address _tokenSpent indexed address _tokenReceived indexed address _amountSpent uint256 _amountReceived uint256","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/BalancerLBPSwapper/#params_10","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/BalancerLBPSwapper/#params_11","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#updatereceivingaddress","text":"event UpdateReceivingAddress(address,address)","title":"UpdateReceivingAddress"},{"location":"developers/contracts/BalancerLBPSwapper/#params_12","text":"Param Type Notes oldTokenReceivingAddress address newTokenReceivingAddress address","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/BalancerLBPSwapper/#params_13","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#methods","text":"","title":"Methods"},{"location":"developers/contracts/BalancerLBPSwapper/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/BalancerLBPSwapper/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#backuporacle","text":"function backupOracle() view returns(address) the backup oracle reference by the contract","title":"backupOracle"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#decimalsnormalizer","text":"function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer)","title":"decimalsNormalizer"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_3","text":"Param Type Notes int256","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#doinvert","text":"function doInvert() view returns(bool)","title":"doInvert"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#exitpool_1","text":"function exitPool(address) nonpayable redeeem all assets from LP pool","title":"exitPool"},{"location":"developers/contracts/BalancerLBPSwapper/#params_14","text":"Param Type Notes to address destination for withdrawn tokens","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#forceswap","text":"function forceSwap() nonpayable Force a swap() call, without waiting afterTime. This should only be callable after init() call, when no other swap is happening (call reverts if weight change is in progress).","title":"forceSwap"},{"location":"developers/contracts/BalancerLBPSwapper/#gettokensin","text":"function getTokensIn(uint256) view returns(address[],uint256[]) return the amount of tokens needed to seed the next auction","title":"getTokensIn"},{"location":"developers/contracts/BalancerLBPSwapper/#params_15","text":"Param Type Notes spentTokenBalance uint256","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_8","text":"Param Type Notes tokens address[] amountsIn uint256[]","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#init","text":"function init(address) nonpayable initialize Balancer LBP Needs to be a separate method because this contract needs to be deployed and supplied as the owner of the pool on construction. Includes various checks to ensure the pool contract is correct and initialization can only be done once","title":"init"},{"location":"developers/contracts/BalancerLBPSwapper/#params_16","text":"Param Type Notes _pool address the Balancer LBP used for swapping","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#invert","text":"function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI","title":"invert"},{"location":"developers/contracts/BalancerLBPSwapper/#params_17","text":"Param Type Notes price tuple the peg price to invert","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_9","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/BalancerLBPSwapper/#params_18","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#mintokenspentbalance","text":"function minTokenSpentBalance() view returns(uint256) the minimum amount of tokenSpent to kick off a new auction on swap()","title":"minTokenSpentBalance"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#oracle","text":"function oracle() view returns(address) the oracle reference by the contract","title":"oracle"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_14","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/BalancerLBPSwapper/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_15","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#pid","text":"function pid() view returns(bytes32) the Balancer V2 Pool id of pool","title":"pid"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_16","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#pool","text":"function pool() view returns(address) the Balancer LBP used for swapping","title":"pool"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_17","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#readoracle","text":"function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc","title":"readOracle"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_18","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#setassetmanagerpoolconfig","text":"function setAssetManagerPoolConfig(address,address,(uint64,uint64,uint64)) nonpayable","title":"setAssetManagerPoolConfig"},{"location":"developers/contracts/BalancerLBPSwapper/#params_19","text":"Param Type Notes pool address token address poolConfig tuple","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setbackuporacle","text":"function setBackupOracle(address) nonpayable sets the referenced backup oracle","title":"setBackupOracle"},{"location":"developers/contracts/BalancerLBPSwapper/#params_20","text":"Param Type Notes newBackupOracle address the new backup oracle to reference","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/BalancerLBPSwapper/#params_21","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/BalancerLBPSwapper/#params_22","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setdecimalsnormalizer","text":"function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer","title":"setDecimalsNormalizer"},{"location":"developers/contracts/BalancerLBPSwapper/#params_23","text":"Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setdoinvert","text":"function setDoInvert(bool) nonpayable sets the flag for whether to invert or not","title":"setDoInvert"},{"location":"developers/contracts/BalancerLBPSwapper/#params_24","text":"Param Type Notes newDoInvert bool the new flag for whether to invert","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setmintokenspent","text":"function setMinTokenSpent(uint256) nonpayable sets the minimum token spent balance","title":"setMinTokenSpent"},{"location":"developers/contracts/BalancerLBPSwapper/#params_25","text":"Param Type Notes newMinTokenSpentBalance uint256 minimum amount of FEI to trigger a new auction","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setoracle","text":"function setOracle(address) nonpayable sets the referenced oracle","title":"setOracle"},{"location":"developers/contracts/BalancerLBPSwapper/#params_26","text":"Param Type Notes newOracle address the new oracle to reference","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setpaused","text":"function setPaused(address,bool) nonpayable","title":"setPaused"},{"location":"developers/contracts/BalancerLBPSwapper/#params_27","text":"Param Type Notes pool address paused bool","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setreceivingaddress","text":"function setReceivingAddress(address) nonpayable Sets the address receiving swap's inbound tokens","title":"setReceivingAddress"},{"location":"developers/contracts/BalancerLBPSwapper/#params_28","text":"Param Type Notes newTokenReceivingAddress address the address that will receive tokens","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setswapenabled","text":"function setSwapEnabled(address,bool) nonpayable","title":"setSwapEnabled"},{"location":"developers/contracts/BalancerLBPSwapper/#params_29","text":"Param Type Notes pool address swapEnabled bool","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setswapfee","text":"function setSwapFee(address,uint256) nonpayable","title":"setSwapFee"},{"location":"developers/contracts/BalancerLBPSwapper/#params_30","text":"Param Type Notes pool address swapFee uint256","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#setswapfrequency","text":"function setSwapFrequency(uint256) nonpayable sets the minimum time between swaps","title":"setSwapFrequency"},{"location":"developers/contracts/BalancerLBPSwapper/#params_31","text":"Param Type Notes _frequency uint256 minimum time between swaps in seconds","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_20","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#swap_1","text":"function swap() nonpayable Swap algorithm 1. Withdraw existing LP tokens 2. Reset weights 3. Provide new liquidity 4. Trigger gradual weight change 5. Transfer remaining tokenReceived to tokenReceivingAddress assumes tokenSpent balance of contract exceeds minTokenSpentBalance to kick off a new auction","title":"swap"},{"location":"developers/contracts/BalancerLBPSwapper/#swapendtime","text":"function swapEndTime() view returns(uint256) returns when the next auction ends","title":"swapEndTime"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_21","text":"Param Type Notes endTime uint256","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#tokenreceived","text":"function tokenReceived() view returns(address) the token to buy","title":"tokenReceived"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_23","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#tokenreceivingaddress","text":"function tokenReceivingAddress() view returns(address) the address to send tokenReceived","title":"tokenReceivingAddress"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_24","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#tokenspent","text":"function tokenSpent() view returns(address) the token to be auctioned","title":"tokenSpent"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_25","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_26","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_27","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/BalancerLBPSwapper/#updateoracle","text":"function updateOracle() nonpayable updates the referenced oracle","title":"updateOracle"},{"location":"developers/contracts/BalancerLBPSwapper/#updateweightsgradually","text":"function updateWeightsGradually(address,uint256,uint256,uint256[]) nonpayable","title":"updateWeightsGradually"},{"location":"developers/contracts/BalancerLBPSwapper/#params_32","text":"Param Type Notes pool address startTime uint256 endTime uint256 endWeights uint256[]","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#vault","text":"function vault() view returns(address) the Balancer V2 Vault contract","title":"vault"},{"location":"developers/contracts/BalancerLBPSwapper/#returns_28","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BalancerLBPSwapper/#withdrawcollectedmanagementfees","text":"function withdrawCollectedManagementFees(address,address) nonpayable","title":"withdrawCollectedManagementFees"},{"location":"developers/contracts/BalancerLBPSwapper/#params_33","text":"Param Type Notes pool address recipient address","title":"Params"},{"location":"developers/contracts/BalancerLBPSwapper/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/BalancerLBPSwapper/#params_34","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/BondingCurve/","text":"\u2b05\ufe0f Contracts BondingCurve a bonding curve for purchasing FEI with ERC-20 tokens Author: Fei Protocol Events Allocate event Allocate(address,uint256) Params Param Type Notes caller indexed address amount uint256 AllocationUpdate event AllocationUpdate(address[],uint256[],address[],uint256[]) Params Param Type Notes oldPCVDeposits address[] oldRatios uint256[] newPCVDeposits address[] newRatios uint256[] BackupOracleUpdate event BackupOracleUpdate(address,address) Params Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address BufferUpdate event BufferUpdate(uint256,uint256) Params Param Type Notes oldBuffer uint256 newBuffer uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DecimalsNormalizerUpdate event DecimalsNormalizerUpdate(int256,int256) Params Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256 DiscountUpdate event DiscountUpdate(uint256,uint256) Params Param Type Notes oldDiscount uint256 newDiscount uint256 DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 IncentiveUpdate event IncentiveUpdate(uint256,uint256) Params Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256 InvertUpdate event InvertUpdate(bool,bool) Params Param Type Notes oldDoInvert bool newDoInvert bool MintCapUpdate event MintCapUpdate(uint256,uint256) Params Param Type Notes oldMint uint256 newMint uint256 OracleUpdate event OracleUpdate(address,address) Params Param Type Notes oldOracle indexed address newOracle indexed address Paused event Paused(address) Params Param Type Notes account address Purchase event Purchase(address,uint256,uint256) Params Param Type Notes to indexed address amountIn uint256 amountOut uint256 Reset event Reset(uint256) Params Param Type Notes oldTotalPurchased uint256 ScaleUpdate event ScaleUpdate(uint256,uint256) Params Param Type Notes oldScale uint256 newScale uint256 TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 allocate function allocate() nonpayable batch allocate held PCV atScale function atScale() view returns(bool) a boolean signalling whether Scale has been reached Returns Param Type Notes bool availableToMint function availableToMint() view returns(uint256) returns how close to the minting cap we are Returns Param Type Notes uint256 backupOracle function backupOracle() view returns(address) the backup oracle reference by the contract Returns Param Type Notes address balance function balance() view returns(uint256) balance of the bonding curve Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address buffer function buffer() view returns(uint256) the buffer applied on top of the peg purchase price once at Scale Returns Param Type Notes uint256 checkAllocation function checkAllocation(address[],uint256[]) pure make sure an allocation has matching lengths and totals the ALLOCATION_GRANULARITY Params Param Type Notes _pcvDeposits address[] new list of pcv deposits to send to _ratios uint256[] new ratios corresponding to the PCV deposits core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address decimalsNormalizer function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer) Returns Param Type Notes int256 discount function discount() view returns(uint256) the discount applied on top of peg before at Scale Returns Param Type Notes uint256 doInvert function doInvert() view returns(bool) Returns Param Type Notes bool duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getAllocation function getAllocation() view returns(address[],uint256[]) gets the pcvDeposits and ratios of the splitter Returns Param Type Notes address[] uint256[] getAmountOut function getAmountOut(uint256) view returns(uint256) return amount of FEI received after a bonding curve purchase Can be innacurate if outdated, need to call oracle().isOutdated() to check Params Param Type Notes amountIn uint256 the amount of underlying used to purchase Returns Param Type Notes amountOut uint256 the amount of FEI received getCurrentPrice function getCurrentPrice() view returns(tuple) return current instantaneous bonding curve price Can be inaccurate if outdated, need to call oracle().isOutdated() to check Returns Param Type Notes tuple incentiveAmount function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions Returns Param Type Notes uint256 invert function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI Params Param Type Notes price tuple the peg price to invert Returns Param Type Notes tuple isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool mintCap function mintCap() view returns(uint256) the cap on how much FEI can be minted by the bonding curve Returns Param Type Notes uint256 oracle function oracle() view returns(address) the oracle reference by the contract Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool purchase function purchase(address,uint256) payable returns(uint256) purchase FEI for underlying tokens Params Param Type Notes to address address to receive FEI amountIn uint256 amount of underlying tokens input Returns Param Type Notes amountOut uint256 amount of FEI received readOracle function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc Returns Param Type Notes tuple remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 reset function reset() nonpayable resets the totalPurchased resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) returns a manipulation resistant account of both the balance of underlying and protocol owned FEI Returns Param Type Notes uint256 uint256 scale function scale() view returns(uint256) the Scale target at which bonding curve price fixes Returns Param Type Notes uint256 setAllocation function setAllocation(address[],uint256[]) nonpayable sets the allocation of held PCV Params Param Type Notes _allocations address[] _ratios uint256[] setBackupOracle function setBackupOracle(address) nonpayable sets the referenced backup oracle Params Param Type Notes newBackupOracle address the new backup oracle to reference setBuffer function setBuffer(uint256) nonpayable sets the bonding curve price buffer Params Param Type Notes newBuffer uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDecimalsNormalizer function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer Params Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer setDiscount function setDiscount(uint256) nonpayable sets the bonding curve price discount Params Param Type Notes newDiscount uint256 setDoInvert function setDoInvert(bool) nonpayable sets the flag for whether to invert or not Params Param Type Notes newDoInvert bool the new flag for whether to invert setIncentiveAmount function setIncentiveAmount(uint256) nonpayable set the incentiveAmount Params Param Type Notes newIncentiveAmount uint256 setIncentiveFrequency function setIncentiveFrequency(uint256) nonpayable sets the allocate incentive frequency Params Param Type Notes _frequency uint256 setMintCap function setMintCap(uint256) nonpayable sets the mint cap for the bonding curve Params Param Type Notes _mintCap uint256 setOracle function setOracle(address) nonpayable sets the referenced oracle Params Param Type Notes newOracle address the new oracle to reference setScale function setScale(uint256) nonpayable sets the bonding curve Scale target Params Param Type Notes newScale uint256 startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 token function token() view returns(address) the ERC20 token for this bonding curve Returns Param Type Notes address totalPurchased function totalPurchased() view returns(uint256) the total amount of FEI purchased on bonding curve Returns Param Type Notes uint256 tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused updateOracle function updateOracle() nonpayable updates the referenced oracle \u2b05\ufe0f Contracts","title":"BondingCurve"},{"location":"developers/contracts/BondingCurve/#bondingcurve","text":"a bonding curve for purchasing FEI with ERC-20 tokens Author: Fei Protocol","title":"BondingCurve"},{"location":"developers/contracts/BondingCurve/#events","text":"","title":"Events"},{"location":"developers/contracts/BondingCurve/#allocate","text":"event Allocate(address,uint256)","title":"Allocate"},{"location":"developers/contracts/BondingCurve/#params","text":"Param Type Notes caller indexed address amount uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#allocationupdate","text":"event AllocationUpdate(address[],uint256[],address[],uint256[])","title":"AllocationUpdate"},{"location":"developers/contracts/BondingCurve/#params_1","text":"Param Type Notes oldPCVDeposits address[] oldRatios uint256[] newPCVDeposits address[] newRatios uint256[]","title":"Params"},{"location":"developers/contracts/BondingCurve/#backuporacleupdate","text":"event BackupOracleUpdate(address,address)","title":"BackupOracleUpdate"},{"location":"developers/contracts/BondingCurve/#params_2","text":"Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address","title":"Params"},{"location":"developers/contracts/BondingCurve/#bufferupdate","text":"event BufferUpdate(uint256,uint256)","title":"BufferUpdate"},{"location":"developers/contracts/BondingCurve/#params_3","text":"Param Type Notes oldBuffer uint256 newBuffer uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/BondingCurve/#params_4","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/BondingCurve/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/BondingCurve/#params_5","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/BondingCurve/#decimalsnormalizerupdate","text":"event DecimalsNormalizerUpdate(int256,int256)","title":"DecimalsNormalizerUpdate"},{"location":"developers/contracts/BondingCurve/#params_6","text":"Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256","title":"Params"},{"location":"developers/contracts/BondingCurve/#discountupdate","text":"event DiscountUpdate(uint256,uint256)","title":"DiscountUpdate"},{"location":"developers/contracts/BondingCurve/#params_7","text":"Param Type Notes oldDiscount uint256 newDiscount uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/BondingCurve/#params_8","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#incentiveupdate","text":"event IncentiveUpdate(uint256,uint256)","title":"IncentiveUpdate"},{"location":"developers/contracts/BondingCurve/#params_9","text":"Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#invertupdate","text":"event InvertUpdate(bool,bool)","title":"InvertUpdate"},{"location":"developers/contracts/BondingCurve/#params_10","text":"Param Type Notes oldDoInvert bool newDoInvert bool","title":"Params"},{"location":"developers/contracts/BondingCurve/#mintcapupdate","text":"event MintCapUpdate(uint256,uint256)","title":"MintCapUpdate"},{"location":"developers/contracts/BondingCurve/#params_11","text":"Param Type Notes oldMint uint256 newMint uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#oracleupdate","text":"event OracleUpdate(address,address)","title":"OracleUpdate"},{"location":"developers/contracts/BondingCurve/#params_12","text":"Param Type Notes oldOracle indexed address newOracle indexed address","title":"Params"},{"location":"developers/contracts/BondingCurve/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/BondingCurve/#params_13","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/BondingCurve/#purchase","text":"event Purchase(address,uint256,uint256)","title":"Purchase"},{"location":"developers/contracts/BondingCurve/#params_14","text":"Param Type Notes to indexed address amountIn uint256 amountOut uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#reset","text":"event Reset(uint256)","title":"Reset"},{"location":"developers/contracts/BondingCurve/#params_15","text":"Param Type Notes oldTotalPurchased uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#scaleupdate","text":"event ScaleUpdate(uint256,uint256)","title":"ScaleUpdate"},{"location":"developers/contracts/BondingCurve/#params_16","text":"Param Type Notes oldScale uint256 newScale uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/BondingCurve/#params_17","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/BondingCurve/#params_18","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/BondingCurve/#methods","text":"","title":"Methods"},{"location":"developers/contracts/BondingCurve/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/BondingCurve/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/BondingCurve/#allocate_1","text":"function allocate() nonpayable batch allocate held PCV","title":"allocate"},{"location":"developers/contracts/BondingCurve/#atscale","text":"function atScale() view returns(bool) a boolean signalling whether Scale has been reached","title":"atScale"},{"location":"developers/contracts/BondingCurve/#returns_1","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BondingCurve/#availabletomint","text":"function availableToMint() view returns(uint256) returns how close to the minting cap we are","title":"availableToMint"},{"location":"developers/contracts/BondingCurve/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#backuporacle","text":"function backupOracle() view returns(address) the backup oracle reference by the contract","title":"backupOracle"},{"location":"developers/contracts/BondingCurve/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BondingCurve/#balance","text":"function balance() view returns(uint256) balance of the bonding curve","title":"balance"},{"location":"developers/contracts/BondingCurve/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/BondingCurve/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BondingCurve/#buffer","text":"function buffer() view returns(uint256) the buffer applied on top of the peg purchase price once at Scale","title":"buffer"},{"location":"developers/contracts/BondingCurve/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#checkallocation","text":"function checkAllocation(address[],uint256[]) pure make sure an allocation has matching lengths and totals the ALLOCATION_GRANULARITY","title":"checkAllocation"},{"location":"developers/contracts/BondingCurve/#params_19","text":"Param Type Notes _pcvDeposits address[] new list of pcv deposits to send to _ratios uint256[] new ratios corresponding to the PCV deposits","title":"Params"},{"location":"developers/contracts/BondingCurve/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/BondingCurve/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BondingCurve/#decimalsnormalizer","text":"function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer)","title":"decimalsNormalizer"},{"location":"developers/contracts/BondingCurve/#returns_8","text":"Param Type Notes int256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#discount","text":"function discount() view returns(uint256) the discount applied on top of peg before at Scale","title":"discount"},{"location":"developers/contracts/BondingCurve/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#doinvert","text":"function doInvert() view returns(bool)","title":"doInvert"},{"location":"developers/contracts/BondingCurve/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BondingCurve/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/BondingCurve/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/BondingCurve/#returns_12","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BondingCurve/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/BondingCurve/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#getallocation","text":"function getAllocation() view returns(address[],uint256[]) gets the pcvDeposits and ratios of the splitter","title":"getAllocation"},{"location":"developers/contracts/BondingCurve/#returns_14","text":"Param Type Notes address[] uint256[]","title":"Returns"},{"location":"developers/contracts/BondingCurve/#getamountout","text":"function getAmountOut(uint256) view returns(uint256) return amount of FEI received after a bonding curve purchase Can be innacurate if outdated, need to call oracle().isOutdated() to check","title":"getAmountOut"},{"location":"developers/contracts/BondingCurve/#params_20","text":"Param Type Notes amountIn uint256 the amount of underlying used to purchase","title":"Params"},{"location":"developers/contracts/BondingCurve/#returns_15","text":"Param Type Notes amountOut uint256 the amount of FEI received","title":"Returns"},{"location":"developers/contracts/BondingCurve/#getcurrentprice","text":"function getCurrentPrice() view returns(tuple) return current instantaneous bonding curve price Can be inaccurate if outdated, need to call oracle().isOutdated() to check","title":"getCurrentPrice"},{"location":"developers/contracts/BondingCurve/#returns_16","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/BondingCurve/#incentiveamount","text":"function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions","title":"incentiveAmount"},{"location":"developers/contracts/BondingCurve/#returns_17","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#invert","text":"function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI","title":"invert"},{"location":"developers/contracts/BondingCurve/#params_21","text":"Param Type Notes price tuple the peg price to invert","title":"Params"},{"location":"developers/contracts/BondingCurve/#returns_18","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/BondingCurve/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/BondingCurve/#params_22","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/BondingCurve/#returns_19","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BondingCurve/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/BondingCurve/#returns_20","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BondingCurve/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/BondingCurve/#returns_21","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BondingCurve/#mintcap","text":"function mintCap() view returns(uint256) the cap on how much FEI can be minted by the bonding curve","title":"mintCap"},{"location":"developers/contracts/BondingCurve/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#oracle","text":"function oracle() view returns(address) the oracle reference by the contract","title":"oracle"},{"location":"developers/contracts/BondingCurve/#returns_23","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BondingCurve/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/BondingCurve/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/BondingCurve/#returns_24","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/BondingCurve/#purchase_1","text":"function purchase(address,uint256) payable returns(uint256) purchase FEI for underlying tokens","title":"purchase"},{"location":"developers/contracts/BondingCurve/#params_23","text":"Param Type Notes to address address to receive FEI amountIn uint256 amount of underlying tokens input","title":"Params"},{"location":"developers/contracts/BondingCurve/#returns_25","text":"Param Type Notes amountOut uint256 amount of FEI received","title":"Returns"},{"location":"developers/contracts/BondingCurve/#readoracle","text":"function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc","title":"readOracle"},{"location":"developers/contracts/BondingCurve/#returns_26","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/BondingCurve/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/BondingCurve/#returns_27","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#reset_1","text":"function reset() nonpayable resets the totalPurchased","title":"reset"},{"location":"developers/contracts/BondingCurve/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) returns a manipulation resistant account of both the balance of underlying and protocol owned FEI","title":"resistantBalanceAndFei"},{"location":"developers/contracts/BondingCurve/#returns_28","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#scale","text":"function scale() view returns(uint256) the Scale target at which bonding curve price fixes","title":"scale"},{"location":"developers/contracts/BondingCurve/#returns_29","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#setallocation","text":"function setAllocation(address[],uint256[]) nonpayable sets the allocation of held PCV","title":"setAllocation"},{"location":"developers/contracts/BondingCurve/#params_24","text":"Param Type Notes _allocations address[] _ratios uint256[]","title":"Params"},{"location":"developers/contracts/BondingCurve/#setbackuporacle","text":"function setBackupOracle(address) nonpayable sets the referenced backup oracle","title":"setBackupOracle"},{"location":"developers/contracts/BondingCurve/#params_25","text":"Param Type Notes newBackupOracle address the new backup oracle to reference","title":"Params"},{"location":"developers/contracts/BondingCurve/#setbuffer","text":"function setBuffer(uint256) nonpayable sets the bonding curve price buffer","title":"setBuffer"},{"location":"developers/contracts/BondingCurve/#params_26","text":"Param Type Notes newBuffer uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/BondingCurve/#params_27","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/BondingCurve/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/BondingCurve/#params_28","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/BondingCurve/#setdecimalsnormalizer","text":"function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer","title":"setDecimalsNormalizer"},{"location":"developers/contracts/BondingCurve/#params_29","text":"Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer","title":"Params"},{"location":"developers/contracts/BondingCurve/#setdiscount","text":"function setDiscount(uint256) nonpayable sets the bonding curve price discount","title":"setDiscount"},{"location":"developers/contracts/BondingCurve/#params_30","text":"Param Type Notes newDiscount uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#setdoinvert","text":"function setDoInvert(bool) nonpayable sets the flag for whether to invert or not","title":"setDoInvert"},{"location":"developers/contracts/BondingCurve/#params_31","text":"Param Type Notes newDoInvert bool the new flag for whether to invert","title":"Params"},{"location":"developers/contracts/BondingCurve/#setincentiveamount","text":"function setIncentiveAmount(uint256) nonpayable set the incentiveAmount","title":"setIncentiveAmount"},{"location":"developers/contracts/BondingCurve/#params_32","text":"Param Type Notes newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#setincentivefrequency","text":"function setIncentiveFrequency(uint256) nonpayable sets the allocate incentive frequency","title":"setIncentiveFrequency"},{"location":"developers/contracts/BondingCurve/#params_33","text":"Param Type Notes _frequency uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#setmintcap","text":"function setMintCap(uint256) nonpayable sets the mint cap for the bonding curve","title":"setMintCap"},{"location":"developers/contracts/BondingCurve/#params_34","text":"Param Type Notes _mintCap uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#setoracle","text":"function setOracle(address) nonpayable sets the referenced oracle","title":"setOracle"},{"location":"developers/contracts/BondingCurve/#params_35","text":"Param Type Notes newOracle address the new oracle to reference","title":"Params"},{"location":"developers/contracts/BondingCurve/#setscale","text":"function setScale(uint256) nonpayable sets the bonding curve Scale target","title":"setScale"},{"location":"developers/contracts/BondingCurve/#params_36","text":"Param Type Notes newScale uint256","title":"Params"},{"location":"developers/contracts/BondingCurve/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/BondingCurve/#returns_30","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/BondingCurve/#returns_31","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#token","text":"function token() view returns(address) the ERC20 token for this bonding curve","title":"token"},{"location":"developers/contracts/BondingCurve/#returns_32","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BondingCurve/#totalpurchased","text":"function totalPurchased() view returns(uint256) the total amount of FEI purchased on bonding curve","title":"totalPurchased"},{"location":"developers/contracts/BondingCurve/#returns_33","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/BondingCurve/#returns_34","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/BondingCurve/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/BondingCurve/#returns_35","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/BondingCurve/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/BondingCurve/#updateoracle","text":"function updateOracle() nonpayable updates the referenced oracle \u2b05\ufe0f Contracts","title":"updateOracle"},{"location":"developers/contracts/CErc20/","text":"\u2b05\ufe0f Contracts CErc20 Methods mint function mint(uint256) nonpayable returns(uint256) Params Param Type Notes amount uint256 Returns Param Type Notes uint256 underlying function underlying() nonpayable returns(address) Returns Param Type Notes address \u2b05\ufe0f Contracts","title":"CErc20"},{"location":"developers/contracts/CErc20/#cerc20","text":"","title":"CErc20"},{"location":"developers/contracts/CErc20/#methods","text":"","title":"Methods"},{"location":"developers/contracts/CErc20/#mint","text":"function mint(uint256) nonpayable returns(uint256)","title":"mint"},{"location":"developers/contracts/CErc20/#params","text":"Param Type Notes amount uint256","title":"Params"},{"location":"developers/contracts/CErc20/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CErc20/#underlying","text":"function underlying() nonpayable returns(address)","title":"underlying"},{"location":"developers/contracts/CErc20/#returns_1","text":"Param Type Notes address \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/","text":"\u2b05\ufe0f Contracts CErc20Delegator Events Approval event Approval(address,address,uint256) Params Param Type Notes owner indexed address spender indexed address value uint256 Transfer event Transfer(address,address,uint256) Params Param Type Notes from indexed address to indexed address value uint256 Methods _acceptAdmin function _acceptAdmin() nonpayable returns(uint256) Returns Param Type Notes uint256 _setInterestRateModel function _setInterestRateModel(address) nonpayable returns(uint256) Params Param Type Notes newInterestRateModel address Returns Param Type Notes uint256 _setPendingAdmin function _setPendingAdmin(address) nonpayable returns(uint256) Params Param Type Notes newPendingAdmin address Returns Param Type Notes uint256 admin function admin() view returns(address) Returns Param Type Notes address allowance function allowance(address,address) view returns(uint256) Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called. Params Param Type Notes owner address spender address Returns Param Type Notes uint256 approve function approve(address,uint256) nonpayable returns(bool) Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event. Params Param Type Notes spender address amount uint256 Returns Param Type Notes bool balanceOf function balanceOf(address) view returns(uint256) Returns the amount of tokens owned by account . Params Param Type Notes account address Returns Param Type Notes uint256 balanceOfUnderlying function balanceOfUnderlying(address) view returns(uint256) Params Param Type Notes owner address Returns Param Type Notes uint256 interestRateModel function interestRateModel() view returns(address) Returns Param Type Notes address mint function mint(uint256) nonpayable returns(uint256) Params Param Type Notes mintAmount uint256 Returns Param Type Notes uint256 pendingAdmin function pendingAdmin() view returns(address) Returns Param Type Notes address totalSupply function totalSupply() view returns(uint256) Returns the amount of tokens in existence. Returns Param Type Notes uint256 transfer function transfer(address,uint256) nonpayable returns(bool) Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. Params Param Type Notes recipient address amount uint256 Returns Param Type Notes bool transferFrom function transferFrom(address,address,uint256) nonpayable returns(bool) Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. Params Param Type Notes sender address recipient address amount uint256 Returns Param Type Notes bool \u2b05\ufe0f Contracts","title":"CErc20Delegator"},{"location":"developers/contracts/CErc20Delegator/#cerc20delegator","text":"","title":"CErc20Delegator"},{"location":"developers/contracts/CErc20Delegator/#events","text":"","title":"Events"},{"location":"developers/contracts/CErc20Delegator/#approval","text":"event Approval(address,address,uint256)","title":"Approval"},{"location":"developers/contracts/CErc20Delegator/#params","text":"Param Type Notes owner indexed address spender indexed address value uint256","title":"Params"},{"location":"developers/contracts/CErc20Delegator/#transfer","text":"event Transfer(address,address,uint256)","title":"Transfer"},{"location":"developers/contracts/CErc20Delegator/#params_1","text":"Param Type Notes from indexed address to indexed address value uint256","title":"Params"},{"location":"developers/contracts/CErc20Delegator/#methods","text":"","title":"Methods"},{"location":"developers/contracts/CErc20Delegator/#_acceptadmin","text":"function _acceptAdmin() nonpayable returns(uint256)","title":"_acceptAdmin"},{"location":"developers/contracts/CErc20Delegator/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#_setinterestratemodel","text":"function _setInterestRateModel(address) nonpayable returns(uint256)","title":"_setInterestRateModel"},{"location":"developers/contracts/CErc20Delegator/#params_2","text":"Param Type Notes newInterestRateModel address","title":"Params"},{"location":"developers/contracts/CErc20Delegator/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#_setpendingadmin","text":"function _setPendingAdmin(address) nonpayable returns(uint256)","title":"_setPendingAdmin"},{"location":"developers/contracts/CErc20Delegator/#params_3","text":"Param Type Notes newPendingAdmin address","title":"Params"},{"location":"developers/contracts/CErc20Delegator/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#admin","text":"function admin() view returns(address)","title":"admin"},{"location":"developers/contracts/CErc20Delegator/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#allowance","text":"function allowance(address,address) view returns(uint256) Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.","title":"allowance"},{"location":"developers/contracts/CErc20Delegator/#params_4","text":"Param Type Notes owner address spender address","title":"Params"},{"location":"developers/contracts/CErc20Delegator/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#approve","text":"function approve(address,uint256) nonpayable returns(bool) Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.","title":"approve"},{"location":"developers/contracts/CErc20Delegator/#params_5","text":"Param Type Notes spender address amount uint256","title":"Params"},{"location":"developers/contracts/CErc20Delegator/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#balanceof","text":"function balanceOf(address) view returns(uint256) Returns the amount of tokens owned by account .","title":"balanceOf"},{"location":"developers/contracts/CErc20Delegator/#params_6","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CErc20Delegator/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#balanceofunderlying","text":"function balanceOfUnderlying(address) view returns(uint256)","title":"balanceOfUnderlying"},{"location":"developers/contracts/CErc20Delegator/#params_7","text":"Param Type Notes owner address","title":"Params"},{"location":"developers/contracts/CErc20Delegator/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#interestratemodel","text":"function interestRateModel() view returns(address)","title":"interestRateModel"},{"location":"developers/contracts/CErc20Delegator/#returns_8","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#mint","text":"function mint(uint256) nonpayable returns(uint256)","title":"mint"},{"location":"developers/contracts/CErc20Delegator/#params_8","text":"Param Type Notes mintAmount uint256","title":"Params"},{"location":"developers/contracts/CErc20Delegator/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#pendingadmin","text":"function pendingAdmin() view returns(address)","title":"pendingAdmin"},{"location":"developers/contracts/CErc20Delegator/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#totalsupply","text":"function totalSupply() view returns(uint256) Returns the amount of tokens in existence.","title":"totalSupply"},{"location":"developers/contracts/CErc20Delegator/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#transfer_1","text":"function transfer(address,uint256) nonpayable returns(bool) Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.","title":"transfer"},{"location":"developers/contracts/CErc20Delegator/#params_9","text":"Param Type Notes recipient address amount uint256","title":"Params"},{"location":"developers/contracts/CErc20Delegator/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CErc20Delegator/#transferfrom","text":"function transferFrom(address,address,uint256) nonpayable returns(bool) Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.","title":"transferFrom"},{"location":"developers/contracts/CErc20Delegator/#params_10","text":"Param Type Notes sender address recipient address amount uint256","title":"Params"},{"location":"developers/contracts/CErc20Delegator/#returns_13","text":"Param Type Notes bool \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/CEther/","text":"\u2b05\ufe0f Contracts CEther Methods mint function mint() payable \u2b05\ufe0f Contracts","title":"CEther"},{"location":"developers/contracts/CEther/#cether","text":"","title":"CEther"},{"location":"developers/contracts/CEther/#methods","text":"","title":"Methods"},{"location":"developers/contracts/CEther/#mint","text":"function mint() payable \u2b05\ufe0f Contracts","title":"mint"},{"location":"developers/contracts/ChainlinkOracleWrapper/","text":"\u2b05\ufe0f Contracts ChainlinkOracleWrapper Chainlink oracle wrapper Author: eswak Reads a Chainlink oracle value & wrap it under the standard Fei oracle interface Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address Update event Update(uint256) Params Param Type Notes _peg uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 chainlinkOracle function chainlinkOracle() view returns(address) the referenced chainlink oracle Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isOutdated function isOutdated() view returns(bool) determine if read value is stale Returns Param Type Notes bool oracleDecimalsNormalizer function oracleDecimalsNormalizer() view returns(uint256) Returns Param Type Notes uint256 pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool read function read() view returns(tuple,bool) read the oracle price Returns Param Type Notes tuple bool setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused update function update() view updates the oracle price no-op, Chainlink is updated automatically \u2b05\ufe0f Contracts","title":"ChainlinkOracleWrapper"},{"location":"developers/contracts/ChainlinkOracleWrapper/#chainlinkoraclewrapper","text":"Chainlink oracle wrapper Author: eswak Reads a Chainlink oracle value & wrap it under the standard Fei oracle interface","title":"ChainlinkOracleWrapper"},{"location":"developers/contracts/ChainlinkOracleWrapper/#events","text":"","title":"Events"},{"location":"developers/contracts/ChainlinkOracleWrapper/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/ChainlinkOracleWrapper/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/ChainlinkOracleWrapper/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/ChainlinkOracleWrapper/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/ChainlinkOracleWrapper/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/ChainlinkOracleWrapper/#params_2","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ChainlinkOracleWrapper/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/ChainlinkOracleWrapper/#params_3","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ChainlinkOracleWrapper/#update","text":"event Update(uint256)","title":"Update"},{"location":"developers/contracts/ChainlinkOracleWrapper/#params_4","text":"Param Type Notes _peg uint256","title":"Params"},{"location":"developers/contracts/ChainlinkOracleWrapper/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ChainlinkOracleWrapper/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#chainlinkoracle","text":"function chainlinkOracle() view returns(address) the referenced chainlink oracle","title":"chainlinkOracle"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/ChainlinkOracleWrapper/#params_5","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#isoutdated","text":"function isOutdated() view returns(bool) determine if read value is stale","title":"isOutdated"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#oracledecimalsnormalizer","text":"function oracleDecimalsNormalizer() view returns(uint256)","title":"oracleDecimalsNormalizer"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/ChainlinkOracleWrapper/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#read","text":"function read() view returns(tuple,bool) read the oracle price","title":"read"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns_9","text":"Param Type Notes tuple bool","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/ChainlinkOracleWrapper/#params_6","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/ChainlinkOracleWrapper/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/ChainlinkOracleWrapper/#params_7","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/ChainlinkOracleWrapper/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/ChainlinkOracleWrapper/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ChainlinkOracleWrapper/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/ChainlinkOracleWrapper/#update_1","text":"function update() view updates the oracle price no-op, Chainlink is updated automatically \u2b05\ufe0f Contracts","title":"update"},{"location":"developers/contracts/CollateralizationOracle/","text":"\u2b05\ufe0f Contracts CollateralizationOracle Fei Protocol's Collateralization Oracle Author: eswak Reads a list of PCVDeposit that report their amount of collateral and the amount of protocol-owned FEI they manage, to deduce the protocol-wide collateralization ratio. Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DepositAdd event DepositAdd(address,address,address) Params Param Type Notes from address deposit indexed address token indexed address DepositRemove event DepositRemove(address,address) Params Param Type Notes from address deposit indexed address OracleUpdate event OracleUpdate(address,address,address,address) Params Param Type Notes from address token indexed address oldOracle indexed address newOracle indexed address Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address Update event Update(uint256) Params Param Type Notes _peg uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 addDeposit function addDeposit(address) nonpayable Add a PCVDeposit to the list of deposits inspected by the collateralization ratio oracle. note : this function reverts if the deposit is already in the list. note : this function reverts if the deposit's token has no oracle. Params Param Type Notes _deposit address : the PCVDeposit to add to the list. addDeposits function addDeposits(address[]) nonpayable adds a list of multiple PCV deposits. See addDeposit. Params Param Type Notes _deposits address[] core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address depositToToken function depositToToken(address) view returns(address) Map from deposit address to token address. It is used like an indexed version of the pcvDeposits array, to check existence of a PCVdeposit in the current config. Params Param Type Notes address Returns Param Type Notes address fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getDepositForToken function getDepositForToken(address,uint256) view returns(address) returns the address of deposit at index i of token _token Params Param Type Notes token address i uint256 Returns Param Type Notes address getDepositsForToken function getDepositsForToken(address) view returns(address[]) returns an array of the deposits holding a given token. Params Param Type Notes _token address Returns Param Type Notes address[] getTokenInPcv function getTokenInPcv(uint256) view returns(address) returns token at index i of the array of PCV tokens Params Param Type Notes i uint256 Returns Param Type Notes address getTokensInPcv function getTokensInPcv() view returns(address[]) returns an array of the addresses of tokens held in the pcv. Returns Param Type Notes address[] isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isOutdated function isOutdated() view returns(bool) Returns Param Type Notes bool isOvercollateralized function isOvercollateralized() view returns(bool) returns true if the protocol is overcollateralized. Overcollateralization is defined as the protocol having more assets in its PCV (Protocol Controlled Value) than the circulating (user-owned) FEI, i.e. a positive Protocol Equity. Returns Param Type Notes bool isTokenInPcv function isTokenInPcv(address) view returns(bool) returns true if a token is held in the pcv Params Param Type Notes token address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool pcvStats function pcvStats() view returns(uint256,uint256,int256,bool) returns the Protocol-Controlled Value, User-circulating FEI, and Protocol Equity. Returns Param Type Notes protocolControlledValue uint256 : the total USD value of all assets held by the protocol. userCirculatingFei uint256 : the number of FEI not owned by the protocol. protocolEquity int256 : the signed difference between PCV and user circulating FEI. validityStatus bool : the current oracle validity status (false if any of the oracles for tokens held in the PCV are invalid, or if this contract is paused). read function read() view returns(tuple,bool) Get the current collateralization ratio of the protocol. Returns Param Type Notes collateralRatio tuple the current collateral ratio of the protocol. validityStatus bool the current oracle validity status (false if any of the oracles for tokens held in the PCV are invalid, or if this contract is paused). removeDeposit function removeDeposit(address) nonpayable Remove a PCVDeposit from the list of deposits inspected by the collateralization ratio oracle. note : this function reverts if the input deposit is not found. Params Param Type Notes _deposit address : the PCVDeposit address to remove from the list. removeDeposits function removeDeposits(address[]) nonpayable removes a list of multiple PCV deposits. See removeDeposit. Params Param Type Notes _deposits address[] setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setOracle function setOracle(address,address) nonpayable Set the price feed oracle (in USD) for a given asset. Params Param Type Notes _token address : the asset to add price oracle for _newOracle address : price feed oracle for the given asset setOracles function setOracles(address[],address[]) nonpayable adds a list of token oracles. See setOracle. Params Param Type Notes _tokens address[] _oracles address[] swapDeposit function swapDeposit(address,address) nonpayable Swap a PCVDeposit with a new one, for instance when a new version of a deposit (holding the same token) is deployed. Params Param Type Notes _oldDeposit address : the PCVDeposit to remove from the list. _newDeposit address : the PCVDeposit to add to the list. tokenToOracle function tokenToOracle(address) view returns(address) Map of oracles to use to get USD values of assets held in PCV deposits. This map is used to get the oracle address from and ERC20 address. Params Param Type Notes address Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused update function update() nonpayable update all oracles required for this oracle to work that are not paused themselves. \u2b05\ufe0f Contracts","title":"CollateralizationOracle"},{"location":"developers/contracts/CollateralizationOracle/#collateralizationoracle","text":"Fei Protocol's Collateralization Oracle Author: eswak Reads a list of PCVDeposit that report their amount of collateral and the amount of protocol-owned FEI they manage, to deduce the protocol-wide collateralization ratio.","title":"CollateralizationOracle"},{"location":"developers/contracts/CollateralizationOracle/#events","text":"","title":"Events"},{"location":"developers/contracts/CollateralizationOracle/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/CollateralizationOracle/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/CollateralizationOracle/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#depositadd","text":"event DepositAdd(address,address,address)","title":"DepositAdd"},{"location":"developers/contracts/CollateralizationOracle/#params_2","text":"Param Type Notes from address deposit indexed address token indexed address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#depositremove","text":"event DepositRemove(address,address)","title":"DepositRemove"},{"location":"developers/contracts/CollateralizationOracle/#params_3","text":"Param Type Notes from address deposit indexed address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#oracleupdate","text":"event OracleUpdate(address,address,address,address)","title":"OracleUpdate"},{"location":"developers/contracts/CollateralizationOracle/#params_4","text":"Param Type Notes from address token indexed address oldOracle indexed address newOracle indexed address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/CollateralizationOracle/#params_5","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/CollateralizationOracle/#params_6","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#update","text":"event Update(uint256)","title":"Update"},{"location":"developers/contracts/CollateralizationOracle/#params_7","text":"Param Type Notes _peg uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#methods","text":"","title":"Methods"},{"location":"developers/contracts/CollateralizationOracle/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/CollateralizationOracle/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#adddeposit","text":"function addDeposit(address) nonpayable Add a PCVDeposit to the list of deposits inspected by the collateralization ratio oracle. note : this function reverts if the deposit is already in the list. note : this function reverts if the deposit's token has no oracle.","title":"addDeposit"},{"location":"developers/contracts/CollateralizationOracle/#params_8","text":"Param Type Notes _deposit address : the PCVDeposit to add to the list.","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#adddeposits","text":"function addDeposits(address[]) nonpayable adds a list of multiple PCV deposits. See addDeposit.","title":"addDeposits"},{"location":"developers/contracts/CollateralizationOracle/#params_9","text":"Param Type Notes _deposits address[]","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/CollateralizationOracle/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#deposittotoken","text":"function depositToToken(address) view returns(address) Map from deposit address to token address. It is used like an indexed version of the pcvDeposits array, to check existence of a PCVdeposit in the current config.","title":"depositToToken"},{"location":"developers/contracts/CollateralizationOracle/#params_10","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/CollateralizationOracle/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/CollateralizationOracle/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#getdepositfortoken","text":"function getDepositForToken(address,uint256) view returns(address) returns the address of deposit at index i of token _token","title":"getDepositForToken"},{"location":"developers/contracts/CollateralizationOracle/#params_11","text":"Param Type Notes token address i uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#getdepositsfortoken","text":"function getDepositsForToken(address) view returns(address[]) returns an array of the deposits holding a given token.","title":"getDepositsForToken"},{"location":"developers/contracts/CollateralizationOracle/#params_12","text":"Param Type Notes _token address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#returns_6","text":"Param Type Notes address[]","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#gettokeninpcv","text":"function getTokenInPcv(uint256) view returns(address) returns token at index i of the array of PCV tokens","title":"getTokenInPcv"},{"location":"developers/contracts/CollateralizationOracle/#params_13","text":"Param Type Notes i uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#gettokensinpcv","text":"function getTokensInPcv() view returns(address[]) returns an array of the addresses of tokens held in the pcv.","title":"getTokensInPcv"},{"location":"developers/contracts/CollateralizationOracle/#returns_8","text":"Param Type Notes address[]","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/CollateralizationOracle/#params_14","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#returns_9","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#isoutdated","text":"function isOutdated() view returns(bool)","title":"isOutdated"},{"location":"developers/contracts/CollateralizationOracle/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#isovercollateralized","text":"function isOvercollateralized() view returns(bool) returns true if the protocol is overcollateralized. Overcollateralization is defined as the protocol having more assets in its PCV (Protocol Controlled Value) than the circulating (user-owned) FEI, i.e. a positive Protocol Equity.","title":"isOvercollateralized"},{"location":"developers/contracts/CollateralizationOracle/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#istokeninpcv","text":"function isTokenInPcv(address) view returns(bool) returns true if a token is held in the pcv","title":"isTokenInPcv"},{"location":"developers/contracts/CollateralizationOracle/#params_15","text":"Param Type Notes token address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/CollateralizationOracle/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/CollateralizationOracle/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#pcvstats","text":"function pcvStats() view returns(uint256,uint256,int256,bool) returns the Protocol-Controlled Value, User-circulating FEI, and Protocol Equity.","title":"pcvStats"},{"location":"developers/contracts/CollateralizationOracle/#returns_14","text":"Param Type Notes protocolControlledValue uint256 : the total USD value of all assets held by the protocol. userCirculatingFei uint256 : the number of FEI not owned by the protocol. protocolEquity int256 : the signed difference between PCV and user circulating FEI. validityStatus bool : the current oracle validity status (false if any of the oracles for tokens held in the PCV are invalid, or if this contract is paused).","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#read","text":"function read() view returns(tuple,bool) Get the current collateralization ratio of the protocol.","title":"read"},{"location":"developers/contracts/CollateralizationOracle/#returns_15","text":"Param Type Notes collateralRatio tuple the current collateral ratio of the protocol. validityStatus bool the current oracle validity status (false if any of the oracles for tokens held in the PCV are invalid, or if this contract is paused).","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#removedeposit","text":"function removeDeposit(address) nonpayable Remove a PCVDeposit from the list of deposits inspected by the collateralization ratio oracle. note : this function reverts if the input deposit is not found.","title":"removeDeposit"},{"location":"developers/contracts/CollateralizationOracle/#params_16","text":"Param Type Notes _deposit address : the PCVDeposit address to remove from the list.","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#removedeposits","text":"function removeDeposits(address[]) nonpayable removes a list of multiple PCV deposits. See removeDeposit.","title":"removeDeposits"},{"location":"developers/contracts/CollateralizationOracle/#params_17","text":"Param Type Notes _deposits address[]","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/CollateralizationOracle/#params_18","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/CollateralizationOracle/#params_19","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#setoracle","text":"function setOracle(address,address) nonpayable Set the price feed oracle (in USD) for a given asset.","title":"setOracle"},{"location":"developers/contracts/CollateralizationOracle/#params_20","text":"Param Type Notes _token address : the asset to add price oracle for _newOracle address : price feed oracle for the given asset","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#setoracles","text":"function setOracles(address[],address[]) nonpayable adds a list of token oracles. See setOracle.","title":"setOracles"},{"location":"developers/contracts/CollateralizationOracle/#params_21","text":"Param Type Notes _tokens address[] _oracles address[]","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#swapdeposit","text":"function swapDeposit(address,address) nonpayable Swap a PCVDeposit with a new one, for instance when a new version of a deposit (holding the same token) is deployed.","title":"swapDeposit"},{"location":"developers/contracts/CollateralizationOracle/#params_22","text":"Param Type Notes _oldDeposit address : the PCVDeposit to remove from the list. _newDeposit address : the PCVDeposit to add to the list.","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#tokentooracle","text":"function tokenToOracle(address) view returns(address) Map of oracles to use to get USD values of assets held in PCV deposits. This map is used to get the oracle address from and ERC20 address.","title":"tokenToOracle"},{"location":"developers/contracts/CollateralizationOracle/#params_23","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/CollateralizationOracle/#returns_16","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/CollateralizationOracle/#returns_17","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/CollateralizationOracle/#returns_18","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracle/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/CollateralizationOracle/#update_1","text":"function update() nonpayable update all oracles required for this oracle to work that are not paused themselves. \u2b05\ufe0f Contracts","title":"update"},{"location":"developers/contracts/CollateralizationOracleGuardian/","text":"\u2b05\ufe0f Contracts CollateralizationOracleGuardian Fei Protocol's Collateralization Oracle Guardian Author: Fei Protocol This contract needs to be granted the ORACLE_ADMIN role The guardian can leverage this contract to make small bounded changes to CR This is intended to be used only in emergencies when the base CollateralizationOracle is compromised The guardian should be able to approximate manual changes to CR via this contract without retaining too much power Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DeviationThresholdUpdate event DeviationThresholdUpdate(uint256,uint256) Params Param Type Notes oldDeviationThresholdBasisPoints uint256 newDeviationThresholdBasisPoints uint256 DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 Paused event Paused(address) Params Param Type Notes account address TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 calculateDeviationThresholdBasisPoints function calculateDeviationThresholdBasisPoints(uint256,uint256) pure returns(uint256) return the percent deviation between a and b in basis points terms Params Param Type Notes a uint256 b uint256 Returns Param Type Notes uint256 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address deviationThresholdBasisPoints function deviationThresholdBasisPoints() view returns(uint256) the maximum update size relative to current, measured in basis points (1/10000) Returns Param Type Notes uint256 duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool oracleWrapper function oracleWrapper() view returns(address) the oracle wrapper to update Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setCache function setCache(uint256,uint256) nonpayable guardian set the cache values on collateralization oracle make sure to pause the CR oracle wrapper or else the set value would be overwritten on next update Params Param Type Notes protocolControlledValue uint256 new PCV value userCirculatingFei uint256 new user FEI value setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDeviationThresholdBasisPoints function setDeviationThresholdBasisPoints(uint256) nonpayable governance setter for maximum deviation the guardian can change per update Params Param Type Notes newDeviationThresholdBasisPoints uint256 startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"CollateralizationOracleGuardian"},{"location":"developers/contracts/CollateralizationOracleGuardian/#collateralizationoracleguardian","text":"Fei Protocol's Collateralization Oracle Guardian Author: Fei Protocol This contract needs to be granted the ORACLE_ADMIN role The guardian can leverage this contract to make small bounded changes to CR This is intended to be used only in emergencies when the base CollateralizationOracle is compromised The guardian should be able to approximate manual changes to CR via this contract without retaining too much power","title":"CollateralizationOracleGuardian"},{"location":"developers/contracts/CollateralizationOracleGuardian/#events","text":"","title":"Events"},{"location":"developers/contracts/CollateralizationOracleGuardian/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#deviationthresholdupdate","text":"event DeviationThresholdUpdate(uint256,uint256)","title":"DeviationThresholdUpdate"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_2","text":"Param Type Notes oldDeviationThresholdBasisPoints uint256 newDeviationThresholdBasisPoints uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_3","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_5","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_6","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#methods","text":"","title":"Methods"},{"location":"developers/contracts/CollateralizationOracleGuardian/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#calculatedeviationthresholdbasispoints","text":"function calculateDeviationThresholdBasisPoints(uint256,uint256) pure returns(uint256) return the percent deviation between a and b in basis points terms","title":"calculateDeviationThresholdBasisPoints"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_7","text":"Param Type Notes a uint256 b uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#deviationthresholdbasispoints","text":"function deviationThresholdBasisPoints() view returns(uint256) the maximum update size relative to current, measured in basis points (1/10000)","title":"deviationThresholdBasisPoints"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_8","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_9","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#oraclewrapper","text":"function oracleWrapper() view returns(address) the oracle wrapper to update","title":"oracleWrapper"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/CollateralizationOracleGuardian/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#setcache","text":"function setCache(uint256,uint256) nonpayable guardian set the cache values on collateralization oracle make sure to pause the CR oracle wrapper or else the set value would be overwritten on next update","title":"setCache"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_9","text":"Param Type Notes protocolControlledValue uint256 new PCV value userCirculatingFei uint256 new user FEI value","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_10","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_11","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#setdeviationthresholdbasispoints","text":"function setDeviationThresholdBasisPoints(uint256) nonpayable governance setter for maximum deviation the guardian can change per update","title":"setDeviationThresholdBasisPoints"},{"location":"developers/contracts/CollateralizationOracleGuardian/#params_12","text":"Param Type Notes newDeviationThresholdBasisPoints uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleGuardian/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_15","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/CollateralizationOracleGuardian/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleGuardian/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/CollateralizationOracleKeeper/","text":"\u2b05\ufe0f Contracts CollateralizationOracleKeeper CollateralizationOracleKeeper a FEI timed minter which only rewards when updating the collateralization oracle Events BufferCapUpdate event BufferCapUpdate(uint256,uint256) Params Param Type Notes oldBufferCap uint256 newBufferCap uint256 BufferUsed event BufferUsed(uint256,uint256) Params Param Type Notes amountUsed uint256 bufferRemaining uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 FeiMinting event FeiMinting(address,uint256) Params Param Type Notes caller indexed address feiAmount uint256 IncentiveUpdate event IncentiveUpdate(uint256,uint256) Params Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256 MintAmountUpdate event MintAmountUpdate(uint256,uint256) Params Param Type Notes oldMintAmount uint256 newMintAmount uint256 Paused event Paused(address) Params Param Type Notes account address RateLimitPerSecondUpdate event RateLimitPerSecondUpdate(uint256,uint256) Params Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256 TargetUpdate event TargetUpdate(address,address) Params Param Type Notes oldTarget address newTarget address TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 MAX_MINT_FREQUENCY function MAX_MINT_FREQUENCY() view returns(uint256) least frequent that mints can happen Returns Param Type Notes uint256 MAX_RATE_LIMIT_PER_SECOND function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract Returns Param Type Notes uint256 MIN_MINT_FREQUENCY function MIN_MINT_FREQUENCY() view returns(uint256) most frequent that mints can happen Returns Param Type Notes uint256 buffer function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap Returns Param Type Notes uint256 bufferCap function bufferCap() view returns(uint256) the cap of the buffer that can be used at once Returns Param Type Notes uint256 collateralizationOracleWrapper function collateralizationOracleWrapper() view returns(address) Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address doPartialAction function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount Returns Param Type Notes bool duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 incentiveAmount function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool lastBufferUsedTime function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract Returns Param Type Notes uint256 mint function mint() nonpayable triggers a minting of FEI timed and incentivized mintAmount function mintAmount() view returns(uint256) Returns Param Type Notes uint256 pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool rateLimitPerSecond function rateLimitPerSecond() view returns(uint256) the rate per second for this contract Returns Param Type Notes uint256 remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setBufferCap function setBufferCap(uint256) nonpayable set the buffer cap Params Param Type Notes newBufferCap uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setFrequency function setFrequency(uint256) nonpayable set the mint frequency Params Param Type Notes newFrequency uint256 setIncentiveAmount function setIncentiveAmount(uint256) nonpayable set the incentiveAmount Params Param Type Notes newIncentiveAmount uint256 setMintAmount function setMintAmount(uint256) nonpayable Params Param Type Notes newMintAmount uint256 setRateLimitPerSecond function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second Params Param Type Notes newRateLimitPerSecond uint256 setTarget function setTarget(address) nonpayable set the new FEI target Params Param Type Notes newTarget address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 target function target() view returns(address) the target receiving minted FEI Returns Param Type Notes address timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"CollateralizationOracleKeeper"},{"location":"developers/contracts/CollateralizationOracleKeeper/#collateralizationoraclekeeper","text":"CollateralizationOracleKeeper a FEI timed minter which only rewards when updating the collateralization oracle","title":"CollateralizationOracleKeeper"},{"location":"developers/contracts/CollateralizationOracleKeeper/#events","text":"","title":"Events"},{"location":"developers/contracts/CollateralizationOracleKeeper/#buffercapupdate","text":"event BufferCapUpdate(uint256,uint256)","title":"BufferCapUpdate"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params","text":"Param Type Notes oldBufferCap uint256 newBufferCap uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#bufferused","text":"event BufferUsed(uint256,uint256)","title":"BufferUsed"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_1","text":"Param Type Notes amountUsed uint256 bufferRemaining uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_2","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_3","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_4","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#feiminting","text":"event FeiMinting(address,uint256)","title":"FeiMinting"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_5","text":"Param Type Notes caller indexed address feiAmount uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#incentiveupdate","text":"event IncentiveUpdate(uint256,uint256)","title":"IncentiveUpdate"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_6","text":"Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#mintamountupdate","text":"event MintAmountUpdate(uint256,uint256)","title":"MintAmountUpdate"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_7","text":"Param Type Notes oldMintAmount uint256 newMintAmount uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_8","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#ratelimitpersecondupdate","text":"event RateLimitPerSecondUpdate(uint256,uint256)","title":"RateLimitPerSecondUpdate"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_9","text":"Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#targetupdate","text":"event TargetUpdate(address,address)","title":"TargetUpdate"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_10","text":"Param Type Notes oldTarget address newTarget address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_11","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_12","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#methods","text":"","title":"Methods"},{"location":"developers/contracts/CollateralizationOracleKeeper/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#max_mint_frequency","text":"function MAX_MINT_FREQUENCY() view returns(uint256) least frequent that mints can happen","title":"MAX_MINT_FREQUENCY"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#max_rate_limit_per_second","text":"function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract","title":"MAX_RATE_LIMIT_PER_SECOND"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#min_mint_frequency","text":"function MIN_MINT_FREQUENCY() view returns(uint256) most frequent that mints can happen","title":"MIN_MINT_FREQUENCY"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#buffer","text":"function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap","title":"buffer"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#buffercap","text":"function bufferCap() view returns(uint256) the cap of the buffer that can be used at once","title":"bufferCap"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#collateralizationoraclewrapper","text":"function collateralizationOracleWrapper() view returns(address)","title":"collateralizationOracleWrapper"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#dopartialaction","text":"function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount","title":"doPartialAction"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#incentiveamount","text":"function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions","title":"incentiveAmount"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_13","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_14","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_15","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#lastbufferusedtime","text":"function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract","title":"lastBufferUsedTime"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#mint","text":"function mint() nonpayable triggers a minting of FEI timed and incentivized","title":"mint"},{"location":"developers/contracts/CollateralizationOracleKeeper/#mintamount","text":"function mintAmount() view returns(uint256)","title":"mintAmount"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_17","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/CollateralizationOracleKeeper/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_18","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#ratelimitpersecond","text":"function rateLimitPerSecond() view returns(uint256) the rate per second for this contract","title":"rateLimitPerSecond"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_20","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#setbuffercap","text":"function setBufferCap(uint256) nonpayable set the buffer cap","title":"setBufferCap"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_14","text":"Param Type Notes newBufferCap uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_15","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_16","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#setfrequency","text":"function setFrequency(uint256) nonpayable set the mint frequency","title":"setFrequency"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_17","text":"Param Type Notes newFrequency uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#setincentiveamount","text":"function setIncentiveAmount(uint256) nonpayable set the incentiveAmount","title":"setIncentiveAmount"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_18","text":"Param Type Notes newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#setmintamount","text":"function setMintAmount(uint256) nonpayable","title":"setMintAmount"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_19","text":"Param Type Notes newMintAmount uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#setratelimitpersecond","text":"function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second","title":"setRateLimitPerSecond"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_20","text":"Param Type Notes newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#settarget","text":"function setTarget(address) nonpayable set the new FEI target","title":"setTarget"},{"location":"developers/contracts/CollateralizationOracleKeeper/#params_21","text":"Param Type Notes newTarget address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleKeeper/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_21","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#target","text":"function target() view returns(address) the target receiving minted FEI","title":"target"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_22","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_23","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_24","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/CollateralizationOracleKeeper/#returns_25","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleKeeper/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/CollateralizationOracleWrapper/","text":"\u2b05\ufe0f Contracts CollateralizationOracleWrapper Fei Protocol's Collateralization Oracle Author: eswak Reads a list of PCVDeposit that report their amount of collateral and the amount of protocol-owned FEI they manage, to deduce the protocol-wide collateralization ratio. Events CachedValueUpdate event CachedValueUpdate(address,uint256,uint256,int256) Params Param Type Notes from address protocolControlledValue indexed uint256 userCirculatingFei indexed uint256 protocolEquity indexed int256 CollateralizationOracleUpdate event CollateralizationOracleUpdate(address,address,address) Params Param Type Notes from address oldOracleAddress indexed address newOracleAddress indexed address ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DeviationThresholdUpdate event DeviationThresholdUpdate(address,uint256,uint256) Params Param Type Notes from address oldThreshold indexed uint256 newThreshold indexed uint256 DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 Paused event Paused(address) Params Param Type Notes account address ReadPauseOverrideUpdate event ReadPauseOverrideUpdate(bool) Params Param Type Notes readPauseOverride bool TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Update event Update(uint256) Params Param Type Notes _peg uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 cachedProtocolControlledValue function cachedProtocolControlledValue() view returns(uint256) cached value of the Protocol Controlled Value Returns Param Type Notes uint256 cachedProtocolEquity function cachedProtocolEquity() view returns(int256) cached value of the Protocol Equity Returns Param Type Notes int256 cachedUserCirculatingFei function cachedUserCirculatingFei() view returns(uint256) cached value of the User Circulating FEI Returns Param Type Notes uint256 collateralizationOracle function collateralizationOracle() view returns(address) address of the CollateralizationOracle to memoize Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address deviationThresholdBasisPoints function deviationThresholdBasisPoints() view returns(uint256) deviation threshold to consider cached values outdated, in basis points (base 10_000) Returns Param Type Notes uint256 duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 initialize function initialize(address,address,uint256,uint256) nonpayable CollateralizationOracleWrapper initializer Params Param Type Notes _core address Fei Core for reference. _collateralizationOracle address the CollateralizationOracle to inspect. _validityDuration uint256 the duration after which a reading becomes outdated. _deviationThresholdBasisPoints uint256 threshold for deviation after which keepers should call the update() function. isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isExceededDeviationThreshold function isExceededDeviationThreshold() view returns(bool) Returns Param Type Notes obsolete bool isOutdated function isOutdated() view returns(bool) Returns Param Type Notes outdated bool isOutdatedOrExceededDeviationThreshold function isOutdatedOrExceededDeviationThreshold() view returns(bool) Returns Param Type Notes bool isOvercollateralized function isOvercollateralized() view returns(bool) returns true if the protocol is overcollateralized. Overcollateralization is defined as the protocol having more assets in its PCV (Protocol Controlled Value) than the circulating (user-owned) FEI, i.e. a positive Protocol Equity. Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool pcvStats function pcvStats() view returns(uint256,uint256,int256,bool) returns the Protocol-Controlled Value, User-circulating FEI, and Protocol Equity. If there is a fresh cached value, return it. Otherwise, call the CollateralizationOracle to get fresh data. Returns Param Type Notes protocolControlledValue uint256 : the total USD value of all assets held by the protocol. userCirculatingFei uint256 : the number of FEI not owned by the protocol. protocolEquity int256 : the difference between PCV and user circulating FEI. If there are more circulating FEI than $ in the PCV, equity is 0. validityStatus bool : the current oracle validity status (false if any of the oracles for tokens held in the PCV are invalid, or if this contract is paused). pcvStatsCurrent function pcvStatsCurrent() view returns(uint256,uint256,int256,bool) returns the Protocol-Controlled Value, User-circulating FEI, and Protocol Equity, from an actual fresh call to the CollateralizationOracle. Returns Param Type Notes protocolControlledValue uint256 : the total USD value of all assets held by the protocol. userCirculatingFei uint256 : the number of FEI not owned by the protocol. protocolEquity int256 : the difference between PCV and user circulating FEI. If there are more circulating FEI than $ in the PCV, equity is 0. validityStatus bool : the current oracle validity status (false if any of the oracles for tokens held in the PCV are invalid, or if this contract is paused). read function read() view returns(tuple,bool) Get the current collateralization ratio of the protocol, from cache. Returns Param Type Notes collateralRatio tuple the current collateral ratio of the protocol. validityStatus bool the current oracle validity status (false if any of the oracles for tokens held in the PCV are invalid, or if this contract is paused). readPauseOverride function readPauseOverride() view returns(bool) a flag to override pause behavior for reads Returns Param Type Notes bool remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setCache function setCache(uint256,uint256,int256) nonpayable governor or admin override to directly write to the cache used in emergencies where the underlying oracle is compromised or failing Params Param Type Notes _cachedProtocolControlledValue uint256 _cachedUserCirculatingFei uint256 _cachedProtocolEquity int256 setCollateralizationOracle function setCollateralizationOracle(address) nonpayable set the address of the CollateralizationOracle to inspect, and to cache values from. Params Param Type Notes _newCollateralizationOracle address the address of the new oracle. setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDeviationThresholdBasisPoints function setDeviationThresholdBasisPoints(uint256) nonpayable set the deviation threshold in basis points, used to detect if the cached value deviated significantly from the actual fresh readings. Params Param Type Notes _newDeviationThresholdBasisPoints uint256 the new value to set. setReadPauseOverride function setReadPauseOverride(bool) nonpayable set the readPauseOverride flag Params Param Type Notes _readPauseOverride bool the new flag for readPauseOverride setValidityDuration function setValidityDuration(uint256) nonpayable set the validity duration of the cached collateralization values. Params Param Type Notes _validityDuration uint256 the new validity duration This function will emit a DurationUpdate event from Timed.sol startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused update function update() nonpayable update reading of the CollateralizationOracle updateIfOutdated function updateIfOutdated() nonpayable this method reverts if the oracle is not outdated It is useful if the caller is incentivized for calling only when the deviation threshold or frequency has passed \u2b05\ufe0f Contracts","title":"CollateralizationOracleWrapper"},{"location":"developers/contracts/CollateralizationOracleWrapper/#collateralizationoraclewrapper","text":"Fei Protocol's Collateralization Oracle Author: eswak Reads a list of PCVDeposit that report their amount of collateral and the amount of protocol-owned FEI they manage, to deduce the protocol-wide collateralization ratio.","title":"CollateralizationOracleWrapper"},{"location":"developers/contracts/CollateralizationOracleWrapper/#events","text":"","title":"Events"},{"location":"developers/contracts/CollateralizationOracleWrapper/#cachedvalueupdate","text":"event CachedValueUpdate(address,uint256,uint256,int256)","title":"CachedValueUpdate"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params","text":"Param Type Notes from address protocolControlledValue indexed uint256 userCirculatingFei indexed uint256 protocolEquity indexed int256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#collateralizationoracleupdate","text":"event CollateralizationOracleUpdate(address,address,address)","title":"CollateralizationOracleUpdate"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_1","text":"Param Type Notes from address oldOracleAddress indexed address newOracleAddress indexed address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_2","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_3","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#deviationthresholdupdate","text":"event DeviationThresholdUpdate(address,uint256,uint256)","title":"DeviationThresholdUpdate"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_4","text":"Param Type Notes from address oldThreshold indexed uint256 newThreshold indexed uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_5","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_6","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#readpauseoverrideupdate","text":"event ReadPauseOverrideUpdate(bool)","title":"ReadPauseOverrideUpdate"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_7","text":"Param Type Notes readPauseOverride bool","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_8","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_9","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#update","text":"event Update(uint256)","title":"Update"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_10","text":"Param Type Notes _peg uint256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#methods","text":"","title":"Methods"},{"location":"developers/contracts/CollateralizationOracleWrapper/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#cachedprotocolcontrolledvalue","text":"function cachedProtocolControlledValue() view returns(uint256) cached value of the Protocol Controlled Value","title":"cachedProtocolControlledValue"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#cachedprotocolequity","text":"function cachedProtocolEquity() view returns(int256) cached value of the Protocol Equity","title":"cachedProtocolEquity"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_2","text":"Param Type Notes int256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#cachedusercirculatingfei","text":"function cachedUserCirculatingFei() view returns(uint256) cached value of the User Circulating FEI","title":"cachedUserCirculatingFei"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#collateralizationoracle","text":"function collateralizationOracle() view returns(address) address of the CollateralizationOracle to memoize","title":"collateralizationOracle"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#deviationthresholdbasispoints","text":"function deviationThresholdBasisPoints() view returns(uint256) deviation threshold to consider cached values outdated, in basis points (base 10_000)","title":"deviationThresholdBasisPoints"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_8","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#initialize","text":"function initialize(address,address,uint256,uint256) nonpayable CollateralizationOracleWrapper initializer","title":"initialize"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_11","text":"Param Type Notes _core address Fei Core for reference. _collateralizationOracle address the CollateralizationOracle to inspect. _validityDuration uint256 the duration after which a reading becomes outdated. _deviationThresholdBasisPoints uint256 threshold for deviation after which keepers should call the update() function.","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_12","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#isexceededdeviationthreshold","text":"function isExceededDeviationThreshold() view returns(bool)","title":"isExceededDeviationThreshold"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_11","text":"Param Type Notes obsolete bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#isoutdated","text":"function isOutdated() view returns(bool)","title":"isOutdated"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_12","text":"Param Type Notes outdated bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#isoutdatedorexceededdeviationthreshold","text":"function isOutdatedOrExceededDeviationThreshold() view returns(bool)","title":"isOutdatedOrExceededDeviationThreshold"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#isovercollateralized","text":"function isOvercollateralized() view returns(bool) returns true if the protocol is overcollateralized. Overcollateralization is defined as the protocol having more assets in its PCV (Protocol Controlled Value) than the circulating (user-owned) FEI, i.e. a positive Protocol Equity.","title":"isOvercollateralized"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_14","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_15","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_16","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/CollateralizationOracleWrapper/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_17","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#pcvstats","text":"function pcvStats() view returns(uint256,uint256,int256,bool) returns the Protocol-Controlled Value, User-circulating FEI, and Protocol Equity. If there is a fresh cached value, return it. Otherwise, call the CollateralizationOracle to get fresh data.","title":"pcvStats"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_18","text":"Param Type Notes protocolControlledValue uint256 : the total USD value of all assets held by the protocol. userCirculatingFei uint256 : the number of FEI not owned by the protocol. protocolEquity int256 : the difference between PCV and user circulating FEI. If there are more circulating FEI than $ in the PCV, equity is 0. validityStatus bool : the current oracle validity status (false if any of the oracles for tokens held in the PCV are invalid, or if this contract is paused).","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#pcvstatscurrent","text":"function pcvStatsCurrent() view returns(uint256,uint256,int256,bool) returns the Protocol-Controlled Value, User-circulating FEI, and Protocol Equity, from an actual fresh call to the CollateralizationOracle.","title":"pcvStatsCurrent"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_19","text":"Param Type Notes protocolControlledValue uint256 : the total USD value of all assets held by the protocol. userCirculatingFei uint256 : the number of FEI not owned by the protocol. protocolEquity int256 : the difference between PCV and user circulating FEI. If there are more circulating FEI than $ in the PCV, equity is 0. validityStatus bool : the current oracle validity status (false if any of the oracles for tokens held in the PCV are invalid, or if this contract is paused).","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#read","text":"function read() view returns(tuple,bool) Get the current collateralization ratio of the protocol, from cache.","title":"read"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_20","text":"Param Type Notes collateralRatio tuple the current collateral ratio of the protocol. validityStatus bool the current oracle validity status (false if any of the oracles for tokens held in the PCV are invalid, or if this contract is paused).","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#readpauseoverride","text":"function readPauseOverride() view returns(bool) a flag to override pause behavior for reads","title":"readPauseOverride"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_21","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#setcache","text":"function setCache(uint256,uint256,int256) nonpayable governor or admin override to directly write to the cache used in emergencies where the underlying oracle is compromised or failing","title":"setCache"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_13","text":"Param Type Notes _cachedProtocolControlledValue uint256 _cachedUserCirculatingFei uint256 _cachedProtocolEquity int256","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#setcollateralizationoracle","text":"function setCollateralizationOracle(address) nonpayable set the address of the CollateralizationOracle to inspect, and to cache values from.","title":"setCollateralizationOracle"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_14","text":"Param Type Notes _newCollateralizationOracle address the address of the new oracle.","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_15","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_16","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#setdeviationthresholdbasispoints","text":"function setDeviationThresholdBasisPoints(uint256) nonpayable set the deviation threshold in basis points, used to detect if the cached value deviated significantly from the actual fresh readings.","title":"setDeviationThresholdBasisPoints"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_17","text":"Param Type Notes _newDeviationThresholdBasisPoints uint256 the new value to set.","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#setreadpauseoverride","text":"function setReadPauseOverride(bool) nonpayable set the readPauseOverride flag","title":"setReadPauseOverride"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_18","text":"Param Type Notes _readPauseOverride bool the new flag for readPauseOverride","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#setvalidityduration","text":"function setValidityDuration(uint256) nonpayable set the validity duration of the cached collateralization values.","title":"setValidityDuration"},{"location":"developers/contracts/CollateralizationOracleWrapper/#params_19","text":"Param Type Notes _validityDuration uint256 the new validity duration This function will emit a DurationUpdate event from Timed.sol","title":"Params"},{"location":"developers/contracts/CollateralizationOracleWrapper/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_23","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_24","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_25","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/CollateralizationOracleWrapper/#returns_26","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CollateralizationOracleWrapper/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/CollateralizationOracleWrapper/#update_1","text":"function update() nonpayable update reading of the CollateralizationOracle","title":"update"},{"location":"developers/contracts/CollateralizationOracleWrapper/#updateifoutdated","text":"function updateIfOutdated() nonpayable this method reverts if the oracle is not outdated It is useful if the caller is incentivized for calling only when the deviation threshold or frequency has passed \u2b05\ufe0f Contracts","title":"updateIfOutdated"},{"location":"developers/contracts/CompositeOracle/","text":"\u2b05\ufe0f Contracts CompositeOracle A composite oracle Author: Fei Protocol Reads two oracles and returns their product Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address Update event Update(uint256) Params Param Type Notes _peg uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isOutdated function isOutdated() view returns(bool) determine if read value is stale Returns Param Type Notes bool oracleA function oracleA() view returns(address) the first referenced oracle Returns Param Type Notes address oracleB function oracleB() view returns(address) the second referenced oracle Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool read function read() view returns(tuple,bool) read the oracle price Returns Param Type Notes tuple bool setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused update function update() nonpayable updates the oracle price \u2b05\ufe0f Contracts","title":"CompositeOracle"},{"location":"developers/contracts/CompositeOracle/#compositeoracle","text":"A composite oracle Author: Fei Protocol Reads two oracles and returns their product","title":"CompositeOracle"},{"location":"developers/contracts/CompositeOracle/#events","text":"","title":"Events"},{"location":"developers/contracts/CompositeOracle/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/CompositeOracle/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/CompositeOracle/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/CompositeOracle/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/CompositeOracle/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/CompositeOracle/#params_2","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CompositeOracle/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/CompositeOracle/#params_3","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CompositeOracle/#update","text":"event Update(uint256)","title":"Update"},{"location":"developers/contracts/CompositeOracle/#params_4","text":"Param Type Notes _peg uint256","title":"Params"},{"location":"developers/contracts/CompositeOracle/#methods","text":"","title":"Methods"},{"location":"developers/contracts/CompositeOracle/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/CompositeOracle/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/CompositeOracle/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/CompositeOracle/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/CompositeOracle/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/CompositeOracle/#params_5","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/CompositeOracle/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#isoutdated","text":"function isOutdated() view returns(bool) determine if read value is stale","title":"isOutdated"},{"location":"developers/contracts/CompositeOracle/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#oraclea","text":"function oracleA() view returns(address) the first referenced oracle","title":"oracleA"},{"location":"developers/contracts/CompositeOracle/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#oracleb","text":"function oracleB() view returns(address) the second referenced oracle","title":"oracleB"},{"location":"developers/contracts/CompositeOracle/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/CompositeOracle/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/CompositeOracle/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#read","text":"function read() view returns(tuple,bool) read the oracle price","title":"read"},{"location":"developers/contracts/CompositeOracle/#returns_9","text":"Param Type Notes tuple bool","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/CompositeOracle/#params_6","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/CompositeOracle/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/CompositeOracle/#params_7","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/CompositeOracle/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/CompositeOracle/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/CompositeOracle/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CompositeOracle/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/CompositeOracle/#update_1","text":"function update() nonpayable updates the oracle price \u2b05\ufe0f Contracts","title":"update"},{"location":"developers/contracts/ConstantOracle/","text":"\u2b05\ufe0f Contracts ConstantOracle Constant oracle Author: Fei Protocol Return a constant oracle price Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address Update event Update(uint256) Params Param Type Notes _peg uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isOutdated function isOutdated() pure returns(bool) determine if read value is stale always false, oracle is fixed Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool read function read() view returns(tuple,bool) read the oracle price Returns Param Type Notes tuple bool setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused update function update() pure updates the oracle price no-op, oracle is fixed \u2b05\ufe0f Contracts","title":"ConstantOracle"},{"location":"developers/contracts/ConstantOracle/#constantoracle","text":"Constant oracle Author: Fei Protocol Return a constant oracle price","title":"ConstantOracle"},{"location":"developers/contracts/ConstantOracle/#events","text":"","title":"Events"},{"location":"developers/contracts/ConstantOracle/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/ConstantOracle/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/ConstantOracle/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/ConstantOracle/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/ConstantOracle/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/ConstantOracle/#params_2","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ConstantOracle/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/ConstantOracle/#params_3","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ConstantOracle/#update","text":"event Update(uint256)","title":"Update"},{"location":"developers/contracts/ConstantOracle/#params_4","text":"Param Type Notes _peg uint256","title":"Params"},{"location":"developers/contracts/ConstantOracle/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ConstantOracle/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/ConstantOracle/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ConstantOracle/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/ConstantOracle/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ConstantOracle/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/ConstantOracle/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ConstantOracle/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/ConstantOracle/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ConstantOracle/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/ConstantOracle/#params_5","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/ConstantOracle/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ConstantOracle/#isoutdated","text":"function isOutdated() pure returns(bool) determine if read value is stale always false, oracle is fixed","title":"isOutdated"},{"location":"developers/contracts/ConstantOracle/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ConstantOracle/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/ConstantOracle/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/ConstantOracle/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ConstantOracle/#read","text":"function read() view returns(tuple,bool) read the oracle price","title":"read"},{"location":"developers/contracts/ConstantOracle/#returns_7","text":"Param Type Notes tuple bool","title":"Returns"},{"location":"developers/contracts/ConstantOracle/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/ConstantOracle/#params_6","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/ConstantOracle/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/ConstantOracle/#params_7","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/ConstantOracle/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/ConstantOracle/#returns_8","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ConstantOracle/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/ConstantOracle/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ConstantOracle/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/ConstantOracle/#update_1","text":"function update() pure updates the oracle price no-op, oracle is fixed \u2b05\ufe0f Contracts","title":"update"},{"location":"developers/contracts/ConvexPCVDeposit/","text":"\u2b05\ufe0f Contracts ConvexPCVDeposit ConvexPCVDeposit: implementation for a PCVDeposit that stake/unstake the Curve LP tokens on Convex, and can claim rewards. Author: Fei Protocol Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 balance function balance() view returns(uint256) returns the balance in USD Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() pure returns(address) Curve/Convex deposits report their balance in USD Returns Param Type Notes address claimRewards function claimRewards() nonpayable claim CRV & CVX rewards earned by the LP tokens staked on this contract. convexBooster function convexBooster() view returns(address) The Convex Booster contract (for deposit/withdraw) Returns Param Type Notes address convexRewards function convexRewards() view returns(address) The Convex Rewards contract (for claiming rewards) Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address curvePool function curvePool() view returns(address) The Curve pool to deposit in Returns Param Type Notes address deposit function deposit() nonpayable deposit Curve LP tokens on Convex and stake deposit tokens in the Convex rewards contract. Note : this call is permissionless, and can be used if LP tokens are transferred to this contract directly. fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) returns the resistant balance in USD and FEI held by the contract Returns Param Type Notes resistantBalance uint256 resistantFei uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused withdraw function withdraw(address,uint256) nonpayable unstake LP tokens from Convex Rewards, and withdraw Curve LP tokens from Convex Params Param Type Notes to address amountLpTokens uint256 withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"ConvexPCVDeposit"},{"location":"developers/contracts/ConvexPCVDeposit/#convexpcvdeposit","text":"ConvexPCVDeposit: implementation for a PCVDeposit that stake/unstake the Curve LP tokens on Convex, and can claim rewards. Author: Fei Protocol","title":"ConvexPCVDeposit"},{"location":"developers/contracts/ConvexPCVDeposit/#events","text":"","title":"Events"},{"location":"developers/contracts/ConvexPCVDeposit/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/ConvexPCVDeposit/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/ConvexPCVDeposit/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/ConvexPCVDeposit/#params_2","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/ConvexPCVDeposit/#params_3","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/ConvexPCVDeposit/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/ConvexPCVDeposit/#params_5","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/ConvexPCVDeposit/#params_6","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/ConvexPCVDeposit/#params_7","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ConvexPCVDeposit/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/ConvexPCVDeposit/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#balance","text":"function balance() view returns(uint256) returns the balance in USD","title":"balance"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#balancereportedin","text":"function balanceReportedIn() pure returns(address) Curve/Convex deposits report their balance in USD","title":"balanceReportedIn"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#claimrewards","text":"function claimRewards() nonpayable claim CRV & CVX rewards earned by the LP tokens staked on this contract.","title":"claimRewards"},{"location":"developers/contracts/ConvexPCVDeposit/#convexbooster","text":"function convexBooster() view returns(address) The Convex Booster contract (for deposit/withdraw)","title":"convexBooster"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#convexrewards","text":"function convexRewards() view returns(address) The Convex Rewards contract (for claiming rewards)","title":"convexRewards"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#curvepool","text":"function curvePool() view returns(address) The Curve pool to deposit in","title":"curvePool"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#deposit_1","text":"function deposit() nonpayable deposit Curve LP tokens on Convex and stake deposit tokens in the Convex rewards contract. Note : this call is permissionless, and can be used if LP tokens are transferred to this contract directly.","title":"deposit"},{"location":"developers/contracts/ConvexPCVDeposit/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/ConvexPCVDeposit/#params_8","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_9","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/ConvexPCVDeposit/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) returns the resistant balance in USD and FEI held by the contract","title":"resistantBalanceAndFei"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_11","text":"Param Type Notes resistantBalance uint256 resistantFei uint256","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/ConvexPCVDeposit/#params_9","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/ConvexPCVDeposit/#params_10","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_12","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/ConvexPCVDeposit/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ConvexPCVDeposit/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/ConvexPCVDeposit/#withdraw","text":"function withdraw(address,uint256) nonpayable unstake LP tokens from Convex Rewards, and withdraw Curve LP tokens from Convex","title":"withdraw"},{"location":"developers/contracts/ConvexPCVDeposit/#params_11","text":"Param Type Notes to address amountLpTokens uint256","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/ConvexPCVDeposit/#params_12","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/ConvexPCVDeposit/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/ConvexPCVDeposit/#params_13","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/Core/","text":"\u2b05\ufe0f Contracts Core Source of truth for Fei Protocol Author: Fei Protocol maintains roles, access control, fei, tribe, genesisGroup, and the TRIBE treasury Events FeiUpdate event FeiUpdate(address) Params Param Type Notes _fei indexed address GenesisGroupUpdate event GenesisGroupUpdate(address) Params Param Type Notes _genesisGroup indexed address GenesisPeriodComplete event GenesisPeriodComplete(uint256) Params Param Type Notes _timestamp uint256 RoleAdminChanged event RoleAdminChanged(bytes32,bytes32,bytes32) Params Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32 RoleGranted event RoleGranted(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address RoleRevoked event RoleRevoked(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address TribeAllocation event TribeAllocation(address,uint256) Params Param Type Notes _to indexed address _amount uint256 TribeUpdate event TribeUpdate(address) Params Param Type Notes _tribe indexed address Methods BURNER_ROLE function BURNER_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 DEFAULT_ADMIN_ROLE function DEFAULT_ADMIN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 GOVERN_ROLE function GOVERN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 GUARDIAN_ROLE function GUARDIAN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 MINTER_ROLE function MINTER_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 PCV_CONTROLLER_ROLE function PCV_CONTROLLER_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 allocateTribe function allocateTribe(address,uint256) nonpayable sends TRIBE tokens from treasury to an address Params Param Type Notes to address the address to send TRIBE to amount uint256 the amount of TRIBE to send createRole function createRole(bytes32,bytes32) nonpayable creates a new role to be maintained can also be used to update admin of existing role Params Param Type Notes role bytes32 the new role id adminRole bytes32 the admin role id for role fei function fei() view returns(address) the address of the FEI contract Returns Param Type Notes address getRoleAdmin function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}. Params Param Type Notes role bytes32 Returns Param Type Notes bytes32 getRoleMember function getRoleMember(bytes32,uint256) view returns(address) Returns one of the accounts that have role . index must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information. Params Param Type Notes role bytes32 index uint256 Returns Param Type Notes address getRoleMemberCount function getRoleMemberCount(bytes32) view returns(uint256) Returns the number of accounts that have role . Can be used together with {getRoleMember} to enumerate all bearers of a role. Params Param Type Notes role bytes32 Returns Param Type Notes uint256 grantBurner function grantBurner(address) nonpayable grants burner role to address Params Param Type Notes burner address new burner grantGovernor function grantGovernor(address) nonpayable grants governor role to address Params Param Type Notes governor address new governor grantGuardian function grantGuardian(address) nonpayable grants guardian role to address Params Param Type Notes guardian address new guardian grantMinter function grantMinter(address) nonpayable grants minter role to address Params Param Type Notes minter address new minter grantPCVController function grantPCVController(address) nonpayable grants controller role to address Params Param Type Notes pcvController address new controller grantRole function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address hasRole function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role . Params Param Type Notes role bytes32 account address Returns Param Type Notes bool init function init() nonpayable isBurner function isBurner(address) view returns(bool) checks if address is a burner Params Param Type Notes _address address address to check Returns Param Type Notes bool isGovernor function isGovernor(address) view returns(bool) checks if address is a governor Params Param Type Notes _address address address to check Returns Param Type Notes bool isGuardian function isGuardian(address) view returns(bool) checks if address is a guardian Params Param Type Notes _address address address to check Returns Param Type Notes bool isMinter function isMinter(address) view returns(bool) checks if address is a minter Params Param Type Notes _address address address to check Returns Param Type Notes bool isPCVController function isPCVController(address) view returns(bool) checks if address is a controller Params Param Type Notes _address address address to check Returns Param Type Notes bool renounceRole function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked role , emits a {RoleRevoked} event. Requirements: - the caller must be account . Params Param Type Notes role bytes32 account address revokeBurner function revokeBurner(address) nonpayable revokes burner role from address Params Param Type Notes burner address ex burner revokeGovernor function revokeGovernor(address) nonpayable revokes governor role from address Params Param Type Notes governor address ex governor revokeGuardian function revokeGuardian(address) nonpayable revokes guardian role from address Params Param Type Notes guardian address ex guardian revokeMinter function revokeMinter(address) nonpayable revokes minter role from address Params Param Type Notes minter address ex minter revokeOverride function revokeOverride(bytes32,address) nonpayable revokes a role from address Params Param Type Notes role bytes32 the role to revoke account address the address to revoke the role from revokePCVController function revokePCVController(address) nonpayable revokes pcvController role from address Params Param Type Notes pcvController address ex pcvController revokeRole function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address setFei function setFei(address) nonpayable sets Fei address to a new address Params Param Type Notes token address new fei address setTribe function setTribe(address) nonpayable sets Tribe address to a new address Params Param Type Notes token address new tribe address supportsInterface function supportsInterface(bytes4) view returns(bool) See {IERC165-supportsInterface}. Params Param Type Notes interfaceId bytes4 Returns Param Type Notes bool tribe function tribe() view returns(address) the address of the TRIBE contract Returns Param Type Notes address \u2b05\ufe0f Contracts","title":"Core"},{"location":"developers/contracts/Core/#core","text":"Source of truth for Fei Protocol Author: Fei Protocol maintains roles, access control, fei, tribe, genesisGroup, and the TRIBE treasury","title":"Core"},{"location":"developers/contracts/Core/#events","text":"","title":"Events"},{"location":"developers/contracts/Core/#feiupdate","text":"event FeiUpdate(address)","title":"FeiUpdate"},{"location":"developers/contracts/Core/#params","text":"Param Type Notes _fei indexed address","title":"Params"},{"location":"developers/contracts/Core/#genesisgroupupdate","text":"event GenesisGroupUpdate(address)","title":"GenesisGroupUpdate"},{"location":"developers/contracts/Core/#params_1","text":"Param Type Notes _genesisGroup indexed address","title":"Params"},{"location":"developers/contracts/Core/#genesisperiodcomplete","text":"event GenesisPeriodComplete(uint256)","title":"GenesisPeriodComplete"},{"location":"developers/contracts/Core/#params_2","text":"Param Type Notes _timestamp uint256","title":"Params"},{"location":"developers/contracts/Core/#roleadminchanged","text":"event RoleAdminChanged(bytes32,bytes32,bytes32)","title":"RoleAdminChanged"},{"location":"developers/contracts/Core/#params_3","text":"Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/Core/#rolegranted","text":"event RoleGranted(bytes32,address,address)","title":"RoleGranted"},{"location":"developers/contracts/Core/#params_4","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/Core/#rolerevoked","text":"event RoleRevoked(bytes32,address,address)","title":"RoleRevoked"},{"location":"developers/contracts/Core/#params_5","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/Core/#tribeallocation","text":"event TribeAllocation(address,uint256)","title":"TribeAllocation"},{"location":"developers/contracts/Core/#params_6","text":"Param Type Notes _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/Core/#tribeupdate","text":"event TribeUpdate(address)","title":"TribeUpdate"},{"location":"developers/contracts/Core/#params_7","text":"Param Type Notes _tribe indexed address","title":"Params"},{"location":"developers/contracts/Core/#methods","text":"","title":"Methods"},{"location":"developers/contracts/Core/#burner_role","text":"function BURNER_ROLE() view returns(bytes32)","title":"BURNER_ROLE"},{"location":"developers/contracts/Core/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Core/#default_admin_role","text":"function DEFAULT_ADMIN_ROLE() view returns(bytes32)","title":"DEFAULT_ADMIN_ROLE"},{"location":"developers/contracts/Core/#returns_1","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Core/#govern_role","text":"function GOVERN_ROLE() view returns(bytes32)","title":"GOVERN_ROLE"},{"location":"developers/contracts/Core/#returns_2","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Core/#guardian_role","text":"function GUARDIAN_ROLE() view returns(bytes32)","title":"GUARDIAN_ROLE"},{"location":"developers/contracts/Core/#returns_3","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Core/#minter_role","text":"function MINTER_ROLE() view returns(bytes32)","title":"MINTER_ROLE"},{"location":"developers/contracts/Core/#returns_4","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Core/#pcv_controller_role","text":"function PCV_CONTROLLER_ROLE() view returns(bytes32)","title":"PCV_CONTROLLER_ROLE"},{"location":"developers/contracts/Core/#returns_5","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Core/#allocatetribe","text":"function allocateTribe(address,uint256) nonpayable sends TRIBE tokens from treasury to an address","title":"allocateTribe"},{"location":"developers/contracts/Core/#params_8","text":"Param Type Notes to address the address to send TRIBE to amount uint256 the amount of TRIBE to send","title":"Params"},{"location":"developers/contracts/Core/#createrole","text":"function createRole(bytes32,bytes32) nonpayable creates a new role to be maintained can also be used to update admin of existing role","title":"createRole"},{"location":"developers/contracts/Core/#params_9","text":"Param Type Notes role bytes32 the new role id adminRole bytes32 the admin role id for role","title":"Params"},{"location":"developers/contracts/Core/#fei","text":"function fei() view returns(address) the address of the FEI contract","title":"fei"},{"location":"developers/contracts/Core/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Core/#getroleadmin","text":"function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","title":"getRoleAdmin"},{"location":"developers/contracts/Core/#params_10","text":"Param Type Notes role bytes32","title":"Params"},{"location":"developers/contracts/Core/#returns_7","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Core/#getrolemember","text":"function getRoleMember(bytes32,uint256) view returns(address) Returns one of the accounts that have role . index must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","title":"getRoleMember"},{"location":"developers/contracts/Core/#params_11","text":"Param Type Notes role bytes32 index uint256","title":"Params"},{"location":"developers/contracts/Core/#returns_8","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Core/#getrolemembercount","text":"function getRoleMemberCount(bytes32) view returns(uint256) Returns the number of accounts that have role . Can be used together with {getRoleMember} to enumerate all bearers of a role.","title":"getRoleMemberCount"},{"location":"developers/contracts/Core/#params_12","text":"Param Type Notes role bytes32","title":"Params"},{"location":"developers/contracts/Core/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Core/#grantburner","text":"function grantBurner(address) nonpayable grants burner role to address","title":"grantBurner"},{"location":"developers/contracts/Core/#params_13","text":"Param Type Notes burner address new burner","title":"Params"},{"location":"developers/contracts/Core/#grantgovernor","text":"function grantGovernor(address) nonpayable grants governor role to address","title":"grantGovernor"},{"location":"developers/contracts/Core/#params_14","text":"Param Type Notes governor address new governor","title":"Params"},{"location":"developers/contracts/Core/#grantguardian","text":"function grantGuardian(address) nonpayable grants guardian role to address","title":"grantGuardian"},{"location":"developers/contracts/Core/#params_15","text":"Param Type Notes guardian address new guardian","title":"Params"},{"location":"developers/contracts/Core/#grantminter","text":"function grantMinter(address) nonpayable grants minter role to address","title":"grantMinter"},{"location":"developers/contracts/Core/#params_16","text":"Param Type Notes minter address new minter","title":"Params"},{"location":"developers/contracts/Core/#grantpcvcontroller","text":"function grantPCVController(address) nonpayable grants controller role to address","title":"grantPCVController"},{"location":"developers/contracts/Core/#params_17","text":"Param Type Notes pcvController address new controller","title":"Params"},{"location":"developers/contracts/Core/#grantrole","text":"function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role.","title":"grantRole"},{"location":"developers/contracts/Core/#params_18","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/Core/#hasrole","text":"function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role .","title":"hasRole"},{"location":"developers/contracts/Core/#params_19","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/Core/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Core/#init","text":"function init() nonpayable","title":"init"},{"location":"developers/contracts/Core/#isburner","text":"function isBurner(address) view returns(bool) checks if address is a burner","title":"isBurner"},{"location":"developers/contracts/Core/#params_20","text":"Param Type Notes _address address address to check","title":"Params"},{"location":"developers/contracts/Core/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Core/#isgovernor","text":"function isGovernor(address) view returns(bool) checks if address is a governor","title":"isGovernor"},{"location":"developers/contracts/Core/#params_21","text":"Param Type Notes _address address address to check","title":"Params"},{"location":"developers/contracts/Core/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Core/#isguardian","text":"function isGuardian(address) view returns(bool) checks if address is a guardian","title":"isGuardian"},{"location":"developers/contracts/Core/#params_22","text":"Param Type Notes _address address address to check","title":"Params"},{"location":"developers/contracts/Core/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Core/#isminter","text":"function isMinter(address) view returns(bool) checks if address is a minter","title":"isMinter"},{"location":"developers/contracts/Core/#params_23","text":"Param Type Notes _address address address to check","title":"Params"},{"location":"developers/contracts/Core/#returns_14","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Core/#ispcvcontroller","text":"function isPCVController(address) view returns(bool) checks if address is a controller","title":"isPCVController"},{"location":"developers/contracts/Core/#params_24","text":"Param Type Notes _address address address to check","title":"Params"},{"location":"developers/contracts/Core/#returns_15","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Core/#renouncerole","text":"function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked role , emits a {RoleRevoked} event. Requirements: - the caller must be account .","title":"renounceRole"},{"location":"developers/contracts/Core/#params_25","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/Core/#revokeburner","text":"function revokeBurner(address) nonpayable revokes burner role from address","title":"revokeBurner"},{"location":"developers/contracts/Core/#params_26","text":"Param Type Notes burner address ex burner","title":"Params"},{"location":"developers/contracts/Core/#revokegovernor","text":"function revokeGovernor(address) nonpayable revokes governor role from address","title":"revokeGovernor"},{"location":"developers/contracts/Core/#params_27","text":"Param Type Notes governor address ex governor","title":"Params"},{"location":"developers/contracts/Core/#revokeguardian","text":"function revokeGuardian(address) nonpayable revokes guardian role from address","title":"revokeGuardian"},{"location":"developers/contracts/Core/#params_28","text":"Param Type Notes guardian address ex guardian","title":"Params"},{"location":"developers/contracts/Core/#revokeminter","text":"function revokeMinter(address) nonpayable revokes minter role from address","title":"revokeMinter"},{"location":"developers/contracts/Core/#params_29","text":"Param Type Notes minter address ex minter","title":"Params"},{"location":"developers/contracts/Core/#revokeoverride","text":"function revokeOverride(bytes32,address) nonpayable revokes a role from address","title":"revokeOverride"},{"location":"developers/contracts/Core/#params_30","text":"Param Type Notes role bytes32 the role to revoke account address the address to revoke the role from","title":"Params"},{"location":"developers/contracts/Core/#revokepcvcontroller","text":"function revokePCVController(address) nonpayable revokes pcvController role from address","title":"revokePCVController"},{"location":"developers/contracts/Core/#params_31","text":"Param Type Notes pcvController address ex pcvController","title":"Params"},{"location":"developers/contracts/Core/#revokerole","text":"function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role.","title":"revokeRole"},{"location":"developers/contracts/Core/#params_32","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/Core/#setfei","text":"function setFei(address) nonpayable sets Fei address to a new address","title":"setFei"},{"location":"developers/contracts/Core/#params_33","text":"Param Type Notes token address new fei address","title":"Params"},{"location":"developers/contracts/Core/#settribe","text":"function setTribe(address) nonpayable sets Tribe address to a new address","title":"setTribe"},{"location":"developers/contracts/Core/#params_34","text":"Param Type Notes token address new tribe address","title":"Params"},{"location":"developers/contracts/Core/#supportsinterface","text":"function supportsInterface(bytes4) view returns(bool) See {IERC165-supportsInterface}.","title":"supportsInterface"},{"location":"developers/contracts/Core/#params_35","text":"Param Type Notes interfaceId bytes4","title":"Params"},{"location":"developers/contracts/Core/#returns_16","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Core/#tribe","text":"function tribe() view returns(address) the address of the TRIBE contract","title":"tribe"},{"location":"developers/contracts/Core/#returns_17","text":"Param Type Notes address \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/CoreRef/","text":"\u2b05\ufe0f Contracts CoreRef A Reference to Core Author: Fei Protocol defines some modifiers and utilities around interacting with Core Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"CoreRef"},{"location":"developers/contracts/CoreRef/#coreref","text":"A Reference to Core Author: Fei Protocol defines some modifiers and utilities around interacting with Core","title":"CoreRef"},{"location":"developers/contracts/CoreRef/#events","text":"","title":"Events"},{"location":"developers/contracts/CoreRef/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/CoreRef/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/CoreRef/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/CoreRef/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/CoreRef/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/CoreRef/#params_2","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CoreRef/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/CoreRef/#params_3","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CoreRef/#methods","text":"","title":"Methods"},{"location":"developers/contracts/CoreRef/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/CoreRef/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/CoreRef/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/CoreRef/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CoreRef/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/CoreRef/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CoreRef/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/CoreRef/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CoreRef/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/CoreRef/#params_4","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/CoreRef/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CoreRef/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/CoreRef/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/CoreRef/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CoreRef/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/CoreRef/#params_5","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/CoreRef/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/CoreRef/#params_6","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/CoreRef/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/CoreRef/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CoreRef/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/CoreRef/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CoreRef/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/CoreRefPauseableLib/","text":"\u2b05\ufe0f Contracts CoreRefPauseableLib PauseableLib PauseableLib is a library that can be used to pause and unpause contracts, amont other utilities. DEV NOTE: This library should only be used on contracts that implement CoreRef. \u2b05\ufe0f Contracts","title":"CoreRefPauseableLib"},{"location":"developers/contracts/CoreRefPauseableLib/#corerefpauseablelib","text":"PauseableLib PauseableLib is a library that can be used to pause and unpause contracts, amont other utilities. DEV NOTE: This library should only be used on contracts that implement CoreRef. \u2b05\ufe0f Contracts","title":"CoreRefPauseableLib"},{"location":"developers/contracts/CurvePCVDepositPlainPool/","text":"\u2b05\ufe0f Contracts CurvePCVDepositPlainPool CurvePCVDepositPlainPool: implementation for a PCVDeposit that deploys liquidity on Curve, in a plain pool (3 stable assets). Author: Fei Protocol Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 balance function balance() view returns(uint256) returns the balance in USD Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() pure returns(address) Curve/Convex deposits report their balance in USD Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address curvePool function curvePool() view returns(address) The Curve pool to deposit in Returns Param Type Notes address deposit function deposit() nonpayable deposit tokens into the Curve pool, then stake the LP tokens on Convex to earn rewards. exitPool function exitPool() nonpayable Exit the Curve pool by removing liquidity. The contract will hold tokens in proportion to what was in the Curve pool at the time of exit, i.e. if the pool is 20% FRAX 60% FEI 20% alUSD, and the contract has 10M$ of liquidity, it will exit the pool with 2M FRAX, 6M FEI, 2M alUSD. fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool maxSlippageBasisPoints function maxSlippageBasisPoints() view returns(uint256) maximum slippage accepted during deposit / withdraw, expressed in basis points (100% = 10_000). Returns Param Type Notes uint256 pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) returns the resistant balance in USD and FEI held by the contract Returns Param Type Notes resistantBalance uint256 resistantFei uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused withdraw function withdraw(address,uint256) nonpayable Exit the Curve pool by removing liquidity in one token. If FEI is in the pool, pull FEI out of the pool. If FEI is not in the pool, exit in the first token of the pool. To exit without chosing a specific token, and minimize slippage, use exitPool(). Params Param Type Notes to address amountUnderlying uint256 withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send withdrawOneCoin function withdrawOneCoin(uint256,address,uint256) nonpayable Exit the Curve pool by removing liquidity in one token. Note that this method can cause slippage. To exit without slippage, use the exitPool() method. Params Param Type Notes coinIndexInPool uint256 to address amountUnderlying uint256 \u2b05\ufe0f Contracts","title":"CurvePCVDepositPlainPool"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#curvepcvdepositplainpool","text":"CurvePCVDepositPlainPool: implementation for a PCVDeposit that deploys liquidity on Curve, in a plain pool (3 stable assets). Author: Fei Protocol","title":"CurvePCVDepositPlainPool"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#events","text":"","title":"Events"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_2","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_3","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_5","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_6","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_7","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#methods","text":"","title":"Methods"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#balance","text":"function balance() view returns(uint256) returns the balance in USD","title":"balance"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#balancereportedin","text":"function balanceReportedIn() pure returns(address) Curve/Convex deposits report their balance in USD","title":"balanceReportedIn"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#curvepool","text":"function curvePool() view returns(address) The Curve pool to deposit in","title":"curvePool"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#deposit_1","text":"function deposit() nonpayable deposit tokens into the Curve pool, then stake the LP tokens on Convex to earn rewards.","title":"deposit"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#exitpool","text":"function exitPool() nonpayable Exit the Curve pool by removing liquidity. The contract will hold tokens in proportion to what was in the Curve pool at the time of exit, i.e. if the pool is 20% FRAX 60% FEI 20% alUSD, and the contract has 10M$ of liquidity, it will exit the pool with 2M FRAX, 6M FEI, 2M alUSD.","title":"exitPool"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_8","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#maxslippagebasispoints","text":"function maxSlippageBasisPoints() view returns(uint256) maximum slippage accepted during deposit / withdraw, expressed in basis points (100% = 10_000).","title":"maxSlippageBasisPoints"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_9","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) returns the resistant balance in USD and FEI held by the contract","title":"resistantBalanceAndFei"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_10","text":"Param Type Notes resistantBalance uint256 resistantFei uint256","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_9","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_10","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#withdraw","text":"function withdraw(address,uint256) nonpayable Exit the Curve pool by removing liquidity in one token. If FEI is in the pool, pull FEI out of the pool. If FEI is not in the pool, exit in the first token of the pool. To exit without chosing a specific token, and minimize slippage, use exitPool().","title":"withdraw"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_11","text":"Param Type Notes to address amountUnderlying uint256","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_12","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_13","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send","title":"Params"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#withdrawonecoin","text":"function withdrawOneCoin(uint256,address,uint256) nonpayable Exit the Curve pool by removing liquidity in one token. Note that this method can cause slippage. To exit without slippage, use the exitPool() method.","title":"withdrawOneCoin"},{"location":"developers/contracts/CurvePCVDepositPlainPool/#params_14","text":"Param Type Notes coinIndexInPool uint256 to address amountUnderlying uint256 \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/DelegateRegistry/","text":"\u2b05\ufe0f Contracts DelegateRegistry Methods clearDelegate function clearDelegate(bytes32) nonpayable Params Param Type Notes id bytes32 delegation function delegation(address,bytes32) view returns(address) Params Param Type Notes delegator address id bytes32 Returns Param Type Notes delegatee address setDelegate function setDelegate(bytes32,address) nonpayable Params Param Type Notes id bytes32 delegate address \u2b05\ufe0f Contracts","title":"DelegateRegistry"},{"location":"developers/contracts/DelegateRegistry/#delegateregistry","text":"","title":"DelegateRegistry"},{"location":"developers/contracts/DelegateRegistry/#methods","text":"","title":"Methods"},{"location":"developers/contracts/DelegateRegistry/#cleardelegate","text":"function clearDelegate(bytes32) nonpayable","title":"clearDelegate"},{"location":"developers/contracts/DelegateRegistry/#params","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/DelegateRegistry/#delegation","text":"function delegation(address,bytes32) view returns(address)","title":"delegation"},{"location":"developers/contracts/DelegateRegistry/#params_1","text":"Param Type Notes delegator address id bytes32","title":"Params"},{"location":"developers/contracts/DelegateRegistry/#returns","text":"Param Type Notes delegatee address","title":"Returns"},{"location":"developers/contracts/DelegateRegistry/#setdelegate","text":"function setDelegate(bytes32,address) nonpayable","title":"setDelegate"},{"location":"developers/contracts/DelegateRegistry/#params_2","text":"Param Type Notes id bytes32 delegate address \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/Delegatee/","text":"\u2b05\ufe0f Contracts Delegatee a proxy delegate contract for TRIBE Author: Fei Protocol Events OwnershipTransferred event OwnershipTransferred(address,address) Params Param Type Notes previousOwner indexed address newOwner indexed address Methods owner function owner() view returns(address) Returns the address of the current owner. Returns Param Type Notes address renounceOwnership function renounceOwnership() nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner. transferOwnership function transferOwnership(address) nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner. Params Param Type Notes newOwner address tribe function tribe() view returns(address) Returns Param Type Notes address withdraw function withdraw() nonpayable send TRIBE back to timelock and selfdestruct \u2b05\ufe0f Contracts","title":"Delegatee"},{"location":"developers/contracts/Delegatee/#delegatee","text":"a proxy delegate contract for TRIBE Author: Fei Protocol","title":"Delegatee"},{"location":"developers/contracts/Delegatee/#events","text":"","title":"Events"},{"location":"developers/contracts/Delegatee/#ownershiptransferred","text":"event OwnershipTransferred(address,address)","title":"OwnershipTransferred"},{"location":"developers/contracts/Delegatee/#params","text":"Param Type Notes previousOwner indexed address newOwner indexed address","title":"Params"},{"location":"developers/contracts/Delegatee/#methods","text":"","title":"Methods"},{"location":"developers/contracts/Delegatee/#owner","text":"function owner() view returns(address) Returns the address of the current owner.","title":"owner"},{"location":"developers/contracts/Delegatee/#returns","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Delegatee/#renounceownership","text":"function renounceOwnership() nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","title":"renounceOwnership"},{"location":"developers/contracts/Delegatee/#transferownership","text":"function transferOwnership(address) nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner.","title":"transferOwnership"},{"location":"developers/contracts/Delegatee/#params_1","text":"Param Type Notes newOwner address","title":"Params"},{"location":"developers/contracts/Delegatee/#tribe","text":"function tribe() view returns(address)","title":"tribe"},{"location":"developers/contracts/Delegatee/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Delegatee/#withdraw","text":"function withdraw() nonpayable send TRIBE back to timelock and selfdestruct \u2b05\ufe0f Contracts","title":"withdraw"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/","text":"\u2b05\ufe0f Contracts ERC20CompoundPCVDeposit ERC-20 implementation for a Compound PCV Deposit Author: Fei Protocol Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 balance function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI returns stale values from Compound if the market hasn't been updated Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address cToken function cToken() view returns(address) Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address deposit function deposit() nonpayable deposit ERC-20 tokens to Compound fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit Returns Param Type Notes uint256 uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address token function token() view returns(address) the token underlying the cToken Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused withdraw function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation Params Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"ERC20CompoundPCVDeposit"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#erc20compoundpcvdeposit","text":"ERC-20 implementation for a Compound PCV Deposit Author: Fei Protocol","title":"ERC20CompoundPCVDeposit"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#events","text":"","title":"Events"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_2","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_3","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_5","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_6","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_7","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#balance","text":"function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI returns stale values from Compound if the market hasn't been updated","title":"balance"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#ctoken","text":"function cToken() view returns(address)","title":"cToken"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#deposit_1","text":"function deposit() nonpayable deposit ERC-20 tokens to Compound","title":"deposit"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_8","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_9","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_9","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_10","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#token","text":"function token() view returns(address) the token underlying the cToken","title":"token"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation","title":"withdraw"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_11","text":"Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_12","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/ERC20CompoundPCVDeposit/#params_13","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/ERC20Dripper/","text":"\u2b05\ufe0f Contracts ERC20Dripper Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 Dripped event Dripped(uint256) Params Param Type Notes amount uint256 DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 Paused event Paused(address) Params Param Type Notes account address TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 amountToDrip function amountToDrip() view returns(uint256) amount to drip after each window Returns Param Type Notes uint256 balance function balance() view returns(uint256) returns total balance of PCV in the Deposit Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address deposit function deposit() nonpayable no-op drip function drip() nonpayable drip ERC20 tokens to target duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit Returns Param Type Notes uint256 uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 target function target() view returns(address) target address to drip tokens to Returns Param Type Notes address timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 token function token() view returns(address) target token address to send Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused withdraw function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation Params Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"ERC20Dripper"},{"location":"developers/contracts/ERC20Dripper/#erc20dripper","text":"","title":"ERC20Dripper"},{"location":"developers/contracts/ERC20Dripper/#events","text":"","title":"Events"},{"location":"developers/contracts/ERC20Dripper/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/ERC20Dripper/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/ERC20Dripper/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/ERC20Dripper/#params_2","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#dripped","text":"event Dripped(uint256)","title":"Dripped"},{"location":"developers/contracts/ERC20Dripper/#params_3","text":"Param Type Notes amount uint256","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/ERC20Dripper/#params_4","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/ERC20Dripper/#params_5","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/ERC20Dripper/#params_6","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/ERC20Dripper/#params_7","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/ERC20Dripper/#params_8","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/ERC20Dripper/#params_9","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/ERC20Dripper/#params_10","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ERC20Dripper/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/ERC20Dripper/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#amounttodrip","text":"function amountToDrip() view returns(uint256) amount to drip after each window","title":"amountToDrip"},{"location":"developers/contracts/ERC20Dripper/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#balance","text":"function balance() view returns(uint256) returns total balance of PCV in the Deposit","title":"balance"},{"location":"developers/contracts/ERC20Dripper/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/ERC20Dripper/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/ERC20Dripper/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#deposit_1","text":"function deposit() nonpayable no-op","title":"deposit"},{"location":"developers/contracts/ERC20Dripper/#drip","text":"function drip() nonpayable drip ERC20 tokens to target","title":"drip"},{"location":"developers/contracts/ERC20Dripper/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/ERC20Dripper/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/ERC20Dripper/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/ERC20Dripper/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/ERC20Dripper/#params_11","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/ERC20Dripper/#returns_9","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/ERC20Dripper/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/ERC20Dripper/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/ERC20Dripper/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/ERC20Dripper/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/ERC20Dripper/#returns_13","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/ERC20Dripper/#params_12","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/ERC20Dripper/#params_13","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/ERC20Dripper/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#target","text":"function target() view returns(address) target address to drip tokens to","title":"target"},{"location":"developers/contracts/ERC20Dripper/#returns_15","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/ERC20Dripper/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#token","text":"function token() view returns(address) target token address to send","title":"token"},{"location":"developers/contracts/ERC20Dripper/#returns_17","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/ERC20Dripper/#returns_18","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/ERC20Dripper/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20Dripper/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/ERC20Dripper/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation","title":"withdraw"},{"location":"developers/contracts/ERC20Dripper/#params_14","text":"Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/ERC20Dripper/#params_15","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/ERC20Dripper/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/ERC20Dripper/#params_16","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/ERC20PCVDepositWrapper/","text":"\u2b05\ufe0f Contracts ERC20PCVDepositWrapper a lightweight contract to wrap ERC20 holding PCV contracts Methods balance function balance() view returns(uint256) returns total balance of PCV in the Deposit Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address isProtocolFeiDeposit function isProtocolFeiDeposit() view returns(bool) a flag for whether to report the balance as protocol owned FEI Returns Param Type Notes bool resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) returns the resistant balance and FEI in the deposit Returns Param Type Notes uint256 uint256 token function token() view returns(address) the balance reported in token Returns Param Type Notes address tokenDeposit function tokenDeposit() view returns(address) the referenced token deposit Returns Param Type Notes address \u2b05\ufe0f Contracts","title":"ERC20PCVDepositWrapper"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#erc20pcvdepositwrapper","text":"a lightweight contract to wrap ERC20 holding PCV contracts","title":"ERC20PCVDepositWrapper"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#balance","text":"function balance() view returns(uint256) returns total balance of PCV in the Deposit","title":"balance"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#isprotocolfeideposit","text":"function isProtocolFeiDeposit() view returns(bool) a flag for whether to report the balance as protocol owned FEI","title":"isProtocolFeiDeposit"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#returns_2","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) returns the resistant balance and FEI in the deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#returns_3","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#token","text":"function token() view returns(address) the balance reported in token","title":"token"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#tokendeposit","text":"function tokenDeposit() view returns(address) the referenced token deposit","title":"tokenDeposit"},{"location":"developers/contracts/ERC20PCVDepositWrapper/#returns_5","text":"Param Type Notes address \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/","text":"\u2b05\ufe0f Contracts ERC20TokemakPCVDeposit ERC-20 implementation for a Tokemak PCV Deposit Author: Fei Protocol Events ClaimRewards event ClaimRewards(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 Paused event Paused(address) Params Param Type Notes account address RequestWithdrawal event RequestWithdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 balance function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address claimRewards function claimRewards(uint256,uint256,uint8,bytes32,bytes32) nonpayable For an example of IPFS json file, see : Params Param Type Notes cycle uint256 amount uint256 v uint8 r bytes32 s bytes32 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address deposit function deposit() nonpayable deposit ERC-20 tokens to Tokemak fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool pool function pool() view returns(address) the tokemak pool to deposit in Returns Param Type Notes address requestWithdrawal function requestWithdrawal(uint256) nonpayable request to withdraw a given amount of tokens to Tokemak. These tokens will be available for withdraw in the next cycles. This function can be called by the contract admin, e.g. the OA multisig, in anticipation of the execution of a DAO proposal that will call withdraw(). note that withdraw() calls will revert if this function has not been called before. Params Param Type Notes amountUnderlying uint256 of tokens to withdraw in a subsequent withdraw() call. resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit Returns Param Type Notes uint256 uint256 rewards function rewards() view returns(address) the tokemak rewards contract to claim TOKE incentives Returns Param Type Notes address setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address token function token() view returns(address) the token stored in the Tokemak pool Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused withdraw function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation Params Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"ERC20TokemakPCVDeposit"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#erc20tokemakpcvdeposit","text":"ERC-20 implementation for a Tokemak PCV Deposit Author: Fei Protocol","title":"ERC20TokemakPCVDeposit"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#events","text":"","title":"Events"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#claimrewards","text":"event ClaimRewards(address,address,address,uint256)","title":"ClaimRewards"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_1","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_2","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_3","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#requestwithdrawal","text":"event RequestWithdrawal(address,address,uint256)","title":"RequestWithdrawal"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_5","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_6","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_7","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_8","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_9","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#balance","text":"function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI","title":"balance"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#claimrewards_1","text":"function claimRewards(uint256,uint256,uint8,bytes32,bytes32) nonpayable For an example of IPFS json file, see :","title":"claimRewards"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_10","text":"Param Type Notes cycle uint256 amount uint256 v uint8 r bytes32 s bytes32","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#deposit_1","text":"function deposit() nonpayable deposit ERC-20 tokens to Tokemak","title":"deposit"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_11","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#pool","text":"function pool() view returns(address) the tokemak pool to deposit in","title":"pool"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_8","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#requestwithdrawal_1","text":"function requestWithdrawal(uint256) nonpayable request to withdraw a given amount of tokens to Tokemak. These tokens will be available for withdraw in the next cycles. This function can be called by the contract admin, e.g. the OA multisig, in anticipation of the execution of a DAO proposal that will call withdraw(). note that withdraw() calls will revert if this function has not been called before.","title":"requestWithdrawal"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_12","text":"Param Type Notes amountUnderlying uint256 of tokens to withdraw in a subsequent withdraw() call.","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_9","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#rewards","text":"function rewards() view returns(address) the tokemak rewards contract to claim TOKE incentives","title":"rewards"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_13","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_14","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#token","text":"function token() view returns(address) the token stored in the Tokemak pool","title":"token"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_12","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation","title":"withdraw"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_15","text":"Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_16","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/ERC20TokemakPCVDeposit/#params_17","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/EthBondingCurve/","text":"\u2b05\ufe0f Contracts EthBondingCurve a bonding curve for purchasing FEI with ETH Author: Fei Protocol Events Allocate event Allocate(address,uint256) Params Param Type Notes caller indexed address amount uint256 AllocationUpdate event AllocationUpdate(address[],uint256[],address[],uint256[]) Params Param Type Notes oldPCVDeposits address[] oldRatios uint256[] newPCVDeposits address[] newRatios uint256[] BackupOracleUpdate event BackupOracleUpdate(address,address) Params Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address BufferUpdate event BufferUpdate(uint256,uint256) Params Param Type Notes oldBuffer uint256 newBuffer uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DecimalsNormalizerUpdate event DecimalsNormalizerUpdate(int256,int256) Params Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256 DiscountUpdate event DiscountUpdate(uint256,uint256) Params Param Type Notes oldDiscount uint256 newDiscount uint256 DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 IncentiveUpdate event IncentiveUpdate(uint256,uint256) Params Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256 InvertUpdate event InvertUpdate(bool,bool) Params Param Type Notes oldDoInvert bool newDoInvert bool MintCapUpdate event MintCapUpdate(uint256,uint256) Params Param Type Notes oldMint uint256 newMint uint256 OracleUpdate event OracleUpdate(address,address) Params Param Type Notes oldOracle indexed address newOracle indexed address Paused event Paused(address) Params Param Type Notes account address Purchase event Purchase(address,uint256,uint256) Params Param Type Notes to indexed address amountIn uint256 amountOut uint256 Reset event Reset(uint256) Params Param Type Notes oldTotalPurchased uint256 ScaleUpdate event ScaleUpdate(uint256,uint256) Params Param Type Notes oldScale uint256 newScale uint256 TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 allocate function allocate() nonpayable batch allocate held PCV atScale function atScale() view returns(bool) a boolean signalling whether Scale has been reached Returns Param Type Notes bool availableToMint function availableToMint() view returns(uint256) returns how close to the minting cap we are Returns Param Type Notes uint256 backupOracle function backupOracle() view returns(address) the backup oracle reference by the contract Returns Param Type Notes address balance function balance() view returns(uint256) get the balance of ETH held by the contract and ready to be allocated Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address buffer function buffer() view returns(uint256) the buffer applied on top of the peg purchase price once at Scale Returns Param Type Notes uint256 checkAllocation function checkAllocation(address[],uint256[]) pure make sure an allocation has matching lengths and totals the ALLOCATION_GRANULARITY Params Param Type Notes _pcvDeposits address[] new list of pcv deposits to send to _ratios uint256[] new ratios corresponding to the PCV deposits core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address decimalsNormalizer function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer) Returns Param Type Notes int256 discount function discount() view returns(uint256) the discount applied on top of peg before at Scale Returns Param Type Notes uint256 doInvert function doInvert() view returns(bool) Returns Param Type Notes bool duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getAllocation function getAllocation() view returns(address[],uint256[]) gets the pcvDeposits and ratios of the splitter Returns Param Type Notes address[] uint256[] getAmountOut function getAmountOut(uint256) view returns(uint256) return amount of FEI received after a bonding curve purchase Can be innacurate if outdated, need to call oracle().isOutdated() to check Params Param Type Notes amountIn uint256 the amount of underlying used to purchase Returns Param Type Notes amountOut uint256 the amount of FEI received getCurrentPrice function getCurrentPrice() view returns(tuple) return current instantaneous bonding curve price Can be inaccurate if outdated, need to call oracle().isOutdated() to check Returns Param Type Notes tuple incentiveAmount function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions Returns Param Type Notes uint256 invert function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI Params Param Type Notes price tuple the peg price to invert Returns Param Type Notes tuple isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool mintCap function mintCap() view returns(uint256) the cap on how much FEI can be minted by the bonding curve Returns Param Type Notes uint256 oracle function oracle() view returns(address) the oracle reference by the contract Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool purchase function purchase(address,uint256) payable returns(uint256) purchase FEI for underlying tokens Params Param Type Notes to address address to receive FEI amountIn uint256 amount of underlying tokens input Returns Param Type Notes amountOut uint256 amount of FEI received readOracle function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc Returns Param Type Notes tuple remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 reset function reset() nonpayable resets the totalPurchased resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) returns a manipulation resistant account of both the balance of underlying and protocol owned FEI Returns Param Type Notes uint256 uint256 scale function scale() view returns(uint256) the Scale target at which bonding curve price fixes Returns Param Type Notes uint256 setAllocation function setAllocation(address[],uint256[]) nonpayable sets the allocation of held PCV Params Param Type Notes _allocations address[] _ratios uint256[] setBackupOracle function setBackupOracle(address) nonpayable sets the referenced backup oracle Params Param Type Notes newBackupOracle address the new backup oracle to reference setBuffer function setBuffer(uint256) nonpayable sets the bonding curve price buffer Params Param Type Notes newBuffer uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDecimalsNormalizer function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer Params Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer setDiscount function setDiscount(uint256) nonpayable sets the bonding curve price discount Params Param Type Notes newDiscount uint256 setDoInvert function setDoInvert(bool) nonpayable sets the flag for whether to invert or not Params Param Type Notes newDoInvert bool the new flag for whether to invert setIncentiveAmount function setIncentiveAmount(uint256) nonpayable set the incentiveAmount Params Param Type Notes newIncentiveAmount uint256 setIncentiveFrequency function setIncentiveFrequency(uint256) nonpayable sets the allocate incentive frequency Params Param Type Notes _frequency uint256 setMintCap function setMintCap(uint256) nonpayable sets the mint cap for the bonding curve Params Param Type Notes _mintCap uint256 setOracle function setOracle(address) nonpayable sets the referenced oracle Params Param Type Notes newOracle address the new oracle to reference setScale function setScale(uint256) nonpayable sets the bonding curve Scale target Params Param Type Notes newScale uint256 startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 token function token() view returns(address) the ERC20 token for this bonding curve Returns Param Type Notes address totalPurchased function totalPurchased() view returns(uint256) the total amount of FEI purchased on bonding curve Returns Param Type Notes uint256 tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused updateOracle function updateOracle() nonpayable updates the referenced oracle \u2b05\ufe0f Contracts","title":"EthBondingCurve"},{"location":"developers/contracts/EthBondingCurve/#ethbondingcurve","text":"a bonding curve for purchasing FEI with ETH Author: Fei Protocol","title":"EthBondingCurve"},{"location":"developers/contracts/EthBondingCurve/#events","text":"","title":"Events"},{"location":"developers/contracts/EthBondingCurve/#allocate","text":"event Allocate(address,uint256)","title":"Allocate"},{"location":"developers/contracts/EthBondingCurve/#params","text":"Param Type Notes caller indexed address amount uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#allocationupdate","text":"event AllocationUpdate(address[],uint256[],address[],uint256[])","title":"AllocationUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_1","text":"Param Type Notes oldPCVDeposits address[] oldRatios uint256[] newPCVDeposits address[] newRatios uint256[]","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#backuporacleupdate","text":"event BackupOracleUpdate(address,address)","title":"BackupOracleUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_2","text":"Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#bufferupdate","text":"event BufferUpdate(uint256,uint256)","title":"BufferUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_3","text":"Param Type Notes oldBuffer uint256 newBuffer uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_4","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_5","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#decimalsnormalizerupdate","text":"event DecimalsNormalizerUpdate(int256,int256)","title":"DecimalsNormalizerUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_6","text":"Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#discountupdate","text":"event DiscountUpdate(uint256,uint256)","title":"DiscountUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_7","text":"Param Type Notes oldDiscount uint256 newDiscount uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_8","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#incentiveupdate","text":"event IncentiveUpdate(uint256,uint256)","title":"IncentiveUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_9","text":"Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#invertupdate","text":"event InvertUpdate(bool,bool)","title":"InvertUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_10","text":"Param Type Notes oldDoInvert bool newDoInvert bool","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#mintcapupdate","text":"event MintCapUpdate(uint256,uint256)","title":"MintCapUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_11","text":"Param Type Notes oldMint uint256 newMint uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#oracleupdate","text":"event OracleUpdate(address,address)","title":"OracleUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_12","text":"Param Type Notes oldOracle indexed address newOracle indexed address","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/EthBondingCurve/#params_13","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#purchase","text":"event Purchase(address,uint256,uint256)","title":"Purchase"},{"location":"developers/contracts/EthBondingCurve/#params_14","text":"Param Type Notes to indexed address amountIn uint256 amountOut uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#reset","text":"event Reset(uint256)","title":"Reset"},{"location":"developers/contracts/EthBondingCurve/#params_15","text":"Param Type Notes oldTotalPurchased uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#scaleupdate","text":"event ScaleUpdate(uint256,uint256)","title":"ScaleUpdate"},{"location":"developers/contracts/EthBondingCurve/#params_16","text":"Param Type Notes oldScale uint256 newScale uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/EthBondingCurve/#params_17","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/EthBondingCurve/#params_18","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#methods","text":"","title":"Methods"},{"location":"developers/contracts/EthBondingCurve/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/EthBondingCurve/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#allocate_1","text":"function allocate() nonpayable batch allocate held PCV","title":"allocate"},{"location":"developers/contracts/EthBondingCurve/#atscale","text":"function atScale() view returns(bool) a boolean signalling whether Scale has been reached","title":"atScale"},{"location":"developers/contracts/EthBondingCurve/#returns_1","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#availabletomint","text":"function availableToMint() view returns(uint256) returns how close to the minting cap we are","title":"availableToMint"},{"location":"developers/contracts/EthBondingCurve/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#backuporacle","text":"function backupOracle() view returns(address) the backup oracle reference by the contract","title":"backupOracle"},{"location":"developers/contracts/EthBondingCurve/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#balance","text":"function balance() view returns(uint256) get the balance of ETH held by the contract and ready to be allocated","title":"balance"},{"location":"developers/contracts/EthBondingCurve/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/EthBondingCurve/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#buffer","text":"function buffer() view returns(uint256) the buffer applied on top of the peg purchase price once at Scale","title":"buffer"},{"location":"developers/contracts/EthBondingCurve/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#checkallocation","text":"function checkAllocation(address[],uint256[]) pure make sure an allocation has matching lengths and totals the ALLOCATION_GRANULARITY","title":"checkAllocation"},{"location":"developers/contracts/EthBondingCurve/#params_19","text":"Param Type Notes _pcvDeposits address[] new list of pcv deposits to send to _ratios uint256[] new ratios corresponding to the PCV deposits","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/EthBondingCurve/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#decimalsnormalizer","text":"function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer)","title":"decimalsNormalizer"},{"location":"developers/contracts/EthBondingCurve/#returns_8","text":"Param Type Notes int256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#discount","text":"function discount() view returns(uint256) the discount applied on top of peg before at Scale","title":"discount"},{"location":"developers/contracts/EthBondingCurve/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#doinvert","text":"function doInvert() view returns(bool)","title":"doInvert"},{"location":"developers/contracts/EthBondingCurve/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/EthBondingCurve/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/EthBondingCurve/#returns_12","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/EthBondingCurve/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#getallocation","text":"function getAllocation() view returns(address[],uint256[]) gets the pcvDeposits and ratios of the splitter","title":"getAllocation"},{"location":"developers/contracts/EthBondingCurve/#returns_14","text":"Param Type Notes address[] uint256[]","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#getamountout","text":"function getAmountOut(uint256) view returns(uint256) return amount of FEI received after a bonding curve purchase Can be innacurate if outdated, need to call oracle().isOutdated() to check","title":"getAmountOut"},{"location":"developers/contracts/EthBondingCurve/#params_20","text":"Param Type Notes amountIn uint256 the amount of underlying used to purchase","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#returns_15","text":"Param Type Notes amountOut uint256 the amount of FEI received","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#getcurrentprice","text":"function getCurrentPrice() view returns(tuple) return current instantaneous bonding curve price Can be inaccurate if outdated, need to call oracle().isOutdated() to check","title":"getCurrentPrice"},{"location":"developers/contracts/EthBondingCurve/#returns_16","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#incentiveamount","text":"function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions","title":"incentiveAmount"},{"location":"developers/contracts/EthBondingCurve/#returns_17","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#invert","text":"function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI","title":"invert"},{"location":"developers/contracts/EthBondingCurve/#params_21","text":"Param Type Notes price tuple the peg price to invert","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#returns_18","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/EthBondingCurve/#params_22","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#returns_19","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/EthBondingCurve/#returns_20","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/EthBondingCurve/#returns_21","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#mintcap","text":"function mintCap() view returns(uint256) the cap on how much FEI can be minted by the bonding curve","title":"mintCap"},{"location":"developers/contracts/EthBondingCurve/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#oracle","text":"function oracle() view returns(address) the oracle reference by the contract","title":"oracle"},{"location":"developers/contracts/EthBondingCurve/#returns_23","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/EthBondingCurve/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/EthBondingCurve/#returns_24","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#purchase_1","text":"function purchase(address,uint256) payable returns(uint256) purchase FEI for underlying tokens","title":"purchase"},{"location":"developers/contracts/EthBondingCurve/#params_23","text":"Param Type Notes to address address to receive FEI amountIn uint256 amount of underlying tokens input","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#returns_25","text":"Param Type Notes amountOut uint256 amount of FEI received","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#readoracle","text":"function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc","title":"readOracle"},{"location":"developers/contracts/EthBondingCurve/#returns_26","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/EthBondingCurve/#returns_27","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#reset_1","text":"function reset() nonpayable resets the totalPurchased","title":"reset"},{"location":"developers/contracts/EthBondingCurve/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) returns a manipulation resistant account of both the balance of underlying and protocol owned FEI","title":"resistantBalanceAndFei"},{"location":"developers/contracts/EthBondingCurve/#returns_28","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#scale","text":"function scale() view returns(uint256) the Scale target at which bonding curve price fixes","title":"scale"},{"location":"developers/contracts/EthBondingCurve/#returns_29","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#setallocation","text":"function setAllocation(address[],uint256[]) nonpayable sets the allocation of held PCV","title":"setAllocation"},{"location":"developers/contracts/EthBondingCurve/#params_24","text":"Param Type Notes _allocations address[] _ratios uint256[]","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setbackuporacle","text":"function setBackupOracle(address) nonpayable sets the referenced backup oracle","title":"setBackupOracle"},{"location":"developers/contracts/EthBondingCurve/#params_25","text":"Param Type Notes newBackupOracle address the new backup oracle to reference","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setbuffer","text":"function setBuffer(uint256) nonpayable sets the bonding curve price buffer","title":"setBuffer"},{"location":"developers/contracts/EthBondingCurve/#params_26","text":"Param Type Notes newBuffer uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/EthBondingCurve/#params_27","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/EthBondingCurve/#params_28","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setdecimalsnormalizer","text":"function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer","title":"setDecimalsNormalizer"},{"location":"developers/contracts/EthBondingCurve/#params_29","text":"Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setdiscount","text":"function setDiscount(uint256) nonpayable sets the bonding curve price discount","title":"setDiscount"},{"location":"developers/contracts/EthBondingCurve/#params_30","text":"Param Type Notes newDiscount uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setdoinvert","text":"function setDoInvert(bool) nonpayable sets the flag for whether to invert or not","title":"setDoInvert"},{"location":"developers/contracts/EthBondingCurve/#params_31","text":"Param Type Notes newDoInvert bool the new flag for whether to invert","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setincentiveamount","text":"function setIncentiveAmount(uint256) nonpayable set the incentiveAmount","title":"setIncentiveAmount"},{"location":"developers/contracts/EthBondingCurve/#params_32","text":"Param Type Notes newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setincentivefrequency","text":"function setIncentiveFrequency(uint256) nonpayable sets the allocate incentive frequency","title":"setIncentiveFrequency"},{"location":"developers/contracts/EthBondingCurve/#params_33","text":"Param Type Notes _frequency uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setmintcap","text":"function setMintCap(uint256) nonpayable sets the mint cap for the bonding curve","title":"setMintCap"},{"location":"developers/contracts/EthBondingCurve/#params_34","text":"Param Type Notes _mintCap uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setoracle","text":"function setOracle(address) nonpayable sets the referenced oracle","title":"setOracle"},{"location":"developers/contracts/EthBondingCurve/#params_35","text":"Param Type Notes newOracle address the new oracle to reference","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#setscale","text":"function setScale(uint256) nonpayable sets the bonding curve Scale target","title":"setScale"},{"location":"developers/contracts/EthBondingCurve/#params_36","text":"Param Type Notes newScale uint256","title":"Params"},{"location":"developers/contracts/EthBondingCurve/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/EthBondingCurve/#returns_30","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/EthBondingCurve/#returns_31","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#token","text":"function token() view returns(address) the ERC20 token for this bonding curve","title":"token"},{"location":"developers/contracts/EthBondingCurve/#returns_32","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#totalpurchased","text":"function totalPurchased() view returns(uint256) the total amount of FEI purchased on bonding curve","title":"totalPurchased"},{"location":"developers/contracts/EthBondingCurve/#returns_33","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/EthBondingCurve/#returns_34","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/EthBondingCurve/#returns_35","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthBondingCurve/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/EthBondingCurve/#updateoracle","text":"function updateOracle() nonpayable updates the referenced oracle \u2b05\ufe0f Contracts","title":"updateOracle"},{"location":"developers/contracts/EthCompoundPCVDeposit/","text":"\u2b05\ufe0f Contracts EthCompoundPCVDeposit ETH implementation for a Compound PCV Deposit Author: Fei Protocol Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 balance function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI returns stale values from Compound if the market hasn't been updated Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() pure returns(address) display the related token of the balance reported Returns Param Type Notes address cToken function cToken() view returns(address) Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address deposit function deposit() nonpayable deposit ETH to Compound fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit Returns Param Type Notes uint256 uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused withdraw function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation Params Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"EthCompoundPCVDeposit"},{"location":"developers/contracts/EthCompoundPCVDeposit/#ethcompoundpcvdeposit","text":"ETH implementation for a Compound PCV Deposit Author: Fei Protocol","title":"EthCompoundPCVDeposit"},{"location":"developers/contracts/EthCompoundPCVDeposit/#events","text":"","title":"Events"},{"location":"developers/contracts/EthCompoundPCVDeposit/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_2","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_3","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_5","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_6","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_7","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/EthCompoundPCVDeposit/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#balance","text":"function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI returns stale values from Compound if the market hasn't been updated","title":"balance"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#balancereportedin","text":"function balanceReportedIn() pure returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#ctoken","text":"function cToken() view returns(address)","title":"cToken"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#deposit_1","text":"function deposit() nonpayable deposit ETH to Compound","title":"deposit"},{"location":"developers/contracts/EthCompoundPCVDeposit/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_8","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/EthCompoundPCVDeposit/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns_9","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_9","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_10","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/EthCompoundPCVDeposit/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthCompoundPCVDeposit/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/EthCompoundPCVDeposit/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation","title":"withdraw"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_11","text":"Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_12","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/EthCompoundPCVDeposit/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/EthCompoundPCVDeposit/#params_13","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/","text":"\u2b05\ufe0f Contracts EthLidoPCVDeposit implementation for PCV Deposit that can take ETH and get stETH either by staking on Lido or swapping on Curve, and sell back stETH for ETH on Curve. Author: eswak, realisation Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address UpdateMaximumSlippage event UpdateMaximumSlippage(uint256) Params Param Type Notes maximumSlippageBasisPoints uint256 WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 balance function balance() view returns(uint256) Returns the current balance of stETH held by the contract Returns Param Type Notes amount uint256 balanceReportedIn function balanceReportedIn() pure returns(address) display the related token of the balance reported Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address deposit function deposit() nonpayable deposit ETH held by the contract to get stETH. everyone can call deposit(), it is not protected by PCVController rights, because all ETH held by the contract is destined to be changed to stETH anyway. fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool maximumSlippageBasisPoints function maximumSlippageBasisPoints() view returns(uint256) Returns Param Type Notes uint256 pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit Returns Param Type Notes uint256 uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setMaximumSlippage function setMaximumSlippage(uint256) nonpayable Sets the maximum slippage vs 1:1 price accepted during withdraw. Params Param Type Notes _maximumSlippageBasisPoints uint256 the maximum slippage expressed in basis points (1/10_000) stableswap function stableswap() view returns(address) Returns Param Type Notes address steth function steth() view returns(address) Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused withdraw function withdraw(address,uint256) nonpayable withdraw stETH held by the contract to get ETH. This function with swap stETH held by the contract to ETH, and transfer it to the target address. Note: the withdraw could revert if the Curve pool is imbalanced with too many stETH and the amount of ETH out of the trade is less than the tolerated slippage. Params Param Type Notes to address the destination of the withdrawn ETH amountIn uint256 the number of stETH to withdraw. withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"EthLidoPCVDeposit"},{"location":"developers/contracts/EthLidoPCVDeposit/#ethlidopcvdeposit","text":"implementation for PCV Deposit that can take ETH and get stETH either by staking on Lido or swapping on Curve, and sell back stETH for ETH on Curve. Author: eswak, realisation","title":"EthLidoPCVDeposit"},{"location":"developers/contracts/EthLidoPCVDeposit/#events","text":"","title":"Events"},{"location":"developers/contracts/EthLidoPCVDeposit/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/EthLidoPCVDeposit/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_2","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_3","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#updatemaximumslippage","text":"event UpdateMaximumSlippage(uint256)","title":"UpdateMaximumSlippage"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_5","text":"Param Type Notes maximumSlippageBasisPoints uint256","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_6","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_7","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_8","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/EthLidoPCVDeposit/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#balance","text":"function balance() view returns(uint256) Returns the current balance of stETH held by the contract","title":"balance"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_1","text":"Param Type Notes amount uint256","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#balancereportedin","text":"function balanceReportedIn() pure returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#deposit_1","text":"function deposit() nonpayable deposit ETH held by the contract to get stETH. everyone can call deposit(), it is not protected by PCVController rights, because all ETH held by the contract is destined to be changed to stETH anyway.","title":"deposit"},{"location":"developers/contracts/EthLidoPCVDeposit/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_9","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#maximumslippagebasispoints","text":"function maximumSlippageBasisPoints() view returns(uint256)","title":"maximumSlippageBasisPoints"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/EthLidoPCVDeposit/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_9","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_10","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_11","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#setmaximumslippage","text":"function setMaximumSlippage(uint256) nonpayable Sets the maximum slippage vs 1:1 price accepted during withdraw.","title":"setMaximumSlippage"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_12","text":"Param Type Notes _maximumSlippageBasisPoints uint256 the maximum slippage expressed in basis points (1/10_000)","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#stableswap","text":"function stableswap() view returns(address)","title":"stableswap"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#steth","text":"function steth() view returns(address)","title":"steth"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_12","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/EthLidoPCVDeposit/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthLidoPCVDeposit/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/EthLidoPCVDeposit/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw stETH held by the contract to get ETH. This function with swap stETH held by the contract to ETH, and transfer it to the target address. Note: the withdraw could revert if the Curve pool is imbalanced with too many stETH and the amount of ETH out of the trade is less than the tolerated slippage.","title":"withdraw"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_13","text":"Param Type Notes to address the destination of the withdrawn ETH amountIn uint256 the number of stETH to withdraw.","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_14","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/EthLidoPCVDeposit/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/EthLidoPCVDeposit/#params_15","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/","text":"\u2b05\ufe0f Contracts EthReserveStabilizer implementation for an ETH Reserve Stabilizer Author: Fei Protocol Events BackupOracleUpdate event BackupOracleUpdate(address,address) Params Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DecimalsNormalizerUpdate event DecimalsNormalizerUpdate(int256,int256) Params Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256 Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 FeiExchange event FeiExchange(address,uint256,uint256) Params Param Type Notes to indexed address feiAmountIn uint256 amountOut uint256 InvertUpdate event InvertUpdate(bool,bool) Params Param Type Notes oldDoInvert bool newDoInvert bool OracleUpdate event OracleUpdate(address,address) Params Param Type Notes oldOracle indexed address newOracle indexed address Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address UsdPerFeiRateUpdate event UsdPerFeiRateUpdate(uint256,uint256) Params Param Type Notes oldUsdPerFeiBasisPoints uint256 newUsdPerFeiBasisPoints uint256 WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 backupOracle function backupOracle() view returns(address) the backup oracle reference by the contract Returns Param Type Notes address balance function balance() view returns(uint256) returns the amount of the held ETH Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address decimalsNormalizer function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer) Returns Param Type Notes int256 deposit function deposit() nonpayable unwraps any held WETH doInvert function doInvert() view returns(bool) Returns Param Type Notes bool exchangeFei function exchangeFei(uint256) nonpayable returns(uint256) exchange FEI for tokens from the reserves Params Param Type Notes feiAmount uint256 of FEI to sell Returns Param Type Notes amountOut uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getAmountOut function getAmountOut(uint256) view returns(uint256) returns the amount out of tokens from the reserves for a given amount of FEI Params Param Type Notes amountFeiIn uint256 the amount of FEI in Returns Param Type Notes uint256 invert function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI Params Param Type Notes price tuple the peg price to invert Returns Param Type Notes tuple isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool oracle function oracle() view returns(address) the oracle reference by the contract Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool readOracle function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc Returns Param Type Notes tuple resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit Returns Param Type Notes uint256 uint256 setBackupOracle function setBackupOracle(address) nonpayable sets the referenced backup oracle Params Param Type Notes newBackupOracle address the new backup oracle to reference setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDecimalsNormalizer function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer Params Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer setDoInvert function setDoInvert(bool) nonpayable sets the flag for whether to invert or not Params Param Type Notes newDoInvert bool the new flag for whether to invert setOracle function setOracle(address) nonpayable sets the referenced oracle Params Param Type Notes newOracle address the new oracle to reference setUsdPerFeiRate function setUsdPerFeiRate(uint256) nonpayable sets the USD per FEI exchange rate rate Params Param Type Notes newUsdPerFeiBasisPoints uint256 the USD per FEI exchange rate denominated in basis points (1/10000) token function token() view returns(address) the ERC20 token exchanged on this stablizer Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused updateOracle function updateOracle() nonpayable updates the referenced oracle usdPerFeiBasisPoints function usdPerFeiBasisPoints() view returns(uint256) the USD per FEI exchange rate denominated in basis points (1/10000) Returns Param Type Notes uint256 withdraw function withdraw(address,uint256) nonpayable withdraw tokens from the reserves Params Param Type Notes to address address to send tokens amountOut uint256 amount of tokens to send withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"EthReserveStabilizer"},{"location":"developers/contracts/EthReserveStabilizer/#ethreservestabilizer","text":"implementation for an ETH Reserve Stabilizer Author: Fei Protocol","title":"EthReserveStabilizer"},{"location":"developers/contracts/EthReserveStabilizer/#events","text":"","title":"Events"},{"location":"developers/contracts/EthReserveStabilizer/#backuporacleupdate","text":"event BackupOracleUpdate(address,address)","title":"BackupOracleUpdate"},{"location":"developers/contracts/EthReserveStabilizer/#params","text":"Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/EthReserveStabilizer/#params_1","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/EthReserveStabilizer/#params_2","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#decimalsnormalizerupdate","text":"event DecimalsNormalizerUpdate(int256,int256)","title":"DecimalsNormalizerUpdate"},{"location":"developers/contracts/EthReserveStabilizer/#params_3","text":"Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/EthReserveStabilizer/#params_4","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#feiexchange","text":"event FeiExchange(address,uint256,uint256)","title":"FeiExchange"},{"location":"developers/contracts/EthReserveStabilizer/#params_5","text":"Param Type Notes to indexed address feiAmountIn uint256 amountOut uint256","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#invertupdate","text":"event InvertUpdate(bool,bool)","title":"InvertUpdate"},{"location":"developers/contracts/EthReserveStabilizer/#params_6","text":"Param Type Notes oldDoInvert bool newDoInvert bool","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#oracleupdate","text":"event OracleUpdate(address,address)","title":"OracleUpdate"},{"location":"developers/contracts/EthReserveStabilizer/#params_7","text":"Param Type Notes oldOracle indexed address newOracle indexed address","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/EthReserveStabilizer/#params_8","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/EthReserveStabilizer/#params_9","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#usdperfeirateupdate","text":"event UsdPerFeiRateUpdate(uint256,uint256)","title":"UsdPerFeiRateUpdate"},{"location":"developers/contracts/EthReserveStabilizer/#params_10","text":"Param Type Notes oldUsdPerFeiBasisPoints uint256 newUsdPerFeiBasisPoints uint256","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/EthReserveStabilizer/#params_11","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/EthReserveStabilizer/#params_12","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/EthReserveStabilizer/#params_13","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#methods","text":"","title":"Methods"},{"location":"developers/contracts/EthReserveStabilizer/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/EthReserveStabilizer/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#backuporacle","text":"function backupOracle() view returns(address) the backup oracle reference by the contract","title":"backupOracle"},{"location":"developers/contracts/EthReserveStabilizer/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#balance","text":"function balance() view returns(uint256) returns the amount of the held ETH","title":"balance"},{"location":"developers/contracts/EthReserveStabilizer/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/EthReserveStabilizer/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/EthReserveStabilizer/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#decimalsnormalizer","text":"function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer)","title":"decimalsNormalizer"},{"location":"developers/contracts/EthReserveStabilizer/#returns_5","text":"Param Type Notes int256","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#deposit_1","text":"function deposit() nonpayable unwraps any held WETH","title":"deposit"},{"location":"developers/contracts/EthReserveStabilizer/#doinvert","text":"function doInvert() view returns(bool)","title":"doInvert"},{"location":"developers/contracts/EthReserveStabilizer/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#exchangefei","text":"function exchangeFei(uint256) nonpayable returns(uint256) exchange FEI for tokens from the reserves","title":"exchangeFei"},{"location":"developers/contracts/EthReserveStabilizer/#params_14","text":"Param Type Notes feiAmount uint256 of FEI to sell","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#returns_7","text":"Param Type Notes amountOut uint256","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/EthReserveStabilizer/#returns_8","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/EthReserveStabilizer/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#getamountout","text":"function getAmountOut(uint256) view returns(uint256) returns the amount out of tokens from the reserves for a given amount of FEI","title":"getAmountOut"},{"location":"developers/contracts/EthReserveStabilizer/#params_15","text":"Param Type Notes amountFeiIn uint256 the amount of FEI in","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#invert","text":"function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI","title":"invert"},{"location":"developers/contracts/EthReserveStabilizer/#params_16","text":"Param Type Notes price tuple the peg price to invert","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#returns_11","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/EthReserveStabilizer/#params_17","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#oracle","text":"function oracle() view returns(address) the oracle reference by the contract","title":"oracle"},{"location":"developers/contracts/EthReserveStabilizer/#returns_13","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/EthReserveStabilizer/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/EthReserveStabilizer/#returns_14","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#readoracle","text":"function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc","title":"readOracle"},{"location":"developers/contracts/EthReserveStabilizer/#returns_15","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/EthReserveStabilizer/#returns_16","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#setbackuporacle","text":"function setBackupOracle(address) nonpayable sets the referenced backup oracle","title":"setBackupOracle"},{"location":"developers/contracts/EthReserveStabilizer/#params_18","text":"Param Type Notes newBackupOracle address the new backup oracle to reference","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/EthReserveStabilizer/#params_19","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/EthReserveStabilizer/#params_20","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#setdecimalsnormalizer","text":"function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer","title":"setDecimalsNormalizer"},{"location":"developers/contracts/EthReserveStabilizer/#params_21","text":"Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#setdoinvert","text":"function setDoInvert(bool) nonpayable sets the flag for whether to invert or not","title":"setDoInvert"},{"location":"developers/contracts/EthReserveStabilizer/#params_22","text":"Param Type Notes newDoInvert bool the new flag for whether to invert","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#setoracle","text":"function setOracle(address) nonpayable sets the referenced oracle","title":"setOracle"},{"location":"developers/contracts/EthReserveStabilizer/#params_23","text":"Param Type Notes newOracle address the new oracle to reference","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#setusdperfeirate","text":"function setUsdPerFeiRate(uint256) nonpayable sets the USD per FEI exchange rate rate","title":"setUsdPerFeiRate"},{"location":"developers/contracts/EthReserveStabilizer/#params_24","text":"Param Type Notes newUsdPerFeiBasisPoints uint256 the USD per FEI exchange rate denominated in basis points (1/10000)","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#token","text":"function token() view returns(address) the ERC20 token exchanged on this stablizer","title":"token"},{"location":"developers/contracts/EthReserveStabilizer/#returns_17","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/EthReserveStabilizer/#returns_18","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/EthReserveStabilizer/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/EthReserveStabilizer/#updateoracle","text":"function updateOracle() nonpayable updates the referenced oracle","title":"updateOracle"},{"location":"developers/contracts/EthReserveStabilizer/#usdperfeibasispoints","text":"function usdPerFeiBasisPoints() view returns(uint256) the USD per FEI exchange rate denominated in basis points (1/10000)","title":"usdPerFeiBasisPoints"},{"location":"developers/contracts/EthReserveStabilizer/#returns_20","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthReserveStabilizer/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw tokens from the reserves","title":"withdraw"},{"location":"developers/contracts/EthReserveStabilizer/#params_25","text":"Param Type Notes to address address to send tokens amountOut uint256 amount of tokens to send","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/EthReserveStabilizer/#params_26","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/EthReserveStabilizer/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/EthReserveStabilizer/#params_27","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/","text":"\u2b05\ufe0f Contracts EthTokemakPCVDeposit ETH implementation for a Tokemak PCV Deposit Author: Fei Protocol Events ClaimRewards event ClaimRewards(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 Paused event Paused(address) Params Param Type Notes account address RequestWithdrawal event RequestWithdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 balance function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address claimRewards function claimRewards(uint256,uint256,uint8,bytes32,bytes32) nonpayable For an example of IPFS json file, see : Params Param Type Notes cycle uint256 amount uint256 v uint8 r bytes32 s bytes32 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address deposit function deposit() nonpayable deposit ETH to Tokemak fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool pool function pool() view returns(address) the tokemak pool to deposit in Returns Param Type Notes address requestWithdrawal function requestWithdrawal(uint256) nonpayable request to withdraw a given amount of tokens to Tokemak. These tokens will be available for withdraw in the next cycles. This function can be called by the contract admin, e.g. the OA multisig, in anticipation of the execution of a DAO proposal that will call withdraw(). note that withdraw() calls will revert if this function has not been called before. Params Param Type Notes amountUnderlying uint256 of tokens to withdraw in a subsequent withdraw() call. resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit Returns Param Type Notes uint256 uint256 rewards function rewards() view returns(address) the tokemak rewards contract to claim TOKE incentives Returns Param Type Notes address setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address token function token() view returns(address) the token stored in the Tokemak pool Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused withdraw function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation Params Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"EthTokemakPCVDeposit"},{"location":"developers/contracts/EthTokemakPCVDeposit/#ethtokemakpcvdeposit","text":"ETH implementation for a Tokemak PCV Deposit Author: Fei Protocol","title":"EthTokemakPCVDeposit"},{"location":"developers/contracts/EthTokemakPCVDeposit/#events","text":"","title":"Events"},{"location":"developers/contracts/EthTokemakPCVDeposit/#claimrewards","text":"event ClaimRewards(address,address,address,uint256)","title":"ClaimRewards"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_1","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_2","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_3","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#requestwithdrawal","text":"event RequestWithdrawal(address,address,uint256)","title":"RequestWithdrawal"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_5","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_6","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_7","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_8","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_9","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/EthTokemakPCVDeposit/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#balance","text":"function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI","title":"balance"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#claimrewards_1","text":"function claimRewards(uint256,uint256,uint8,bytes32,bytes32) nonpayable For an example of IPFS json file, see :","title":"claimRewards"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_10","text":"Param Type Notes cycle uint256 amount uint256 v uint8 r bytes32 s bytes32","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#deposit_1","text":"function deposit() nonpayable deposit ETH to Tokemak","title":"deposit"},{"location":"developers/contracts/EthTokemakPCVDeposit/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_11","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/EthTokemakPCVDeposit/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#pool","text":"function pool() view returns(address) the tokemak pool to deposit in","title":"pool"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_8","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#requestwithdrawal_1","text":"function requestWithdrawal(uint256) nonpayable request to withdraw a given amount of tokens to Tokemak. These tokens will be available for withdraw in the next cycles. This function can be called by the contract admin, e.g. the OA multisig, in anticipation of the execution of a DAO proposal that will call withdraw(). note that withdraw() calls will revert if this function has not been called before.","title":"requestWithdrawal"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_12","text":"Param Type Notes amountUnderlying uint256 of tokens to withdraw in a subsequent withdraw() call.","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_9","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#rewards","text":"function rewards() view returns(address) the tokemak rewards contract to claim TOKE incentives","title":"rewards"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_13","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_14","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#token","text":"function token() view returns(address) the token stored in the Tokemak pool","title":"token"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_12","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/EthTokemakPCVDeposit/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/EthTokemakPCVDeposit/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/EthTokemakPCVDeposit/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation","title":"withdraw"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_15","text":"Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_16","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/EthTokemakPCVDeposit/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/EthTokemakPCVDeposit/#params_17","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/ExchangerTimelock/","text":"ExchangerTimelock Send RGT straight to TRIBE timelock Author: Joey Santoro For Rari core contributors to trustlessly maintain incentive alignment Events OwnershipTransferred event OwnershipTransferred(address,address) Params Param Type Notes previousOwner indexed address newOwner indexed address Methods exchangeToTimelock function exchangeToTimelock() nonpayable exchange RGT to TRIBE and send to timelock exchanger function exchanger() view returns(address) Returns Param Type Notes address guardian function guardian() view returns(address) rari DAO timelock can clawback in event of no-deal Returns Param Type Notes address owner function owner() view returns(address) Returns the address of the current owner. Returns Param Type Notes address recoverRGT function recoverRGT() nonpayable guardian sends back RGT renounceOwnership function renounceOwnership() nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner. rgt function rgt() view returns(address) Returns Param Type Notes address timelock function timelock() view returns(address) Returns Param Type Notes address transferOwnership function transferOwnership(address) nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner. Params Param Type Notes newOwner address tribe function tribe() view returns(address) Returns Param Type Notes address","title":"ExchangerTimelock"},{"location":"developers/contracts/ExchangerTimelock/#exchangertimelock","text":"Send RGT straight to TRIBE timelock Author: Joey Santoro For Rari core contributors to trustlessly maintain incentive alignment","title":"ExchangerTimelock"},{"location":"developers/contracts/ExchangerTimelock/#events","text":"","title":"Events"},{"location":"developers/contracts/ExchangerTimelock/#ownershiptransferred","text":"event OwnershipTransferred(address,address)","title":"OwnershipTransferred"},{"location":"developers/contracts/ExchangerTimelock/#params","text":"Param Type Notes previousOwner indexed address newOwner indexed address","title":"Params"},{"location":"developers/contracts/ExchangerTimelock/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ExchangerTimelock/#exchangetotimelock","text":"function exchangeToTimelock() nonpayable exchange RGT to TRIBE and send to timelock","title":"exchangeToTimelock"},{"location":"developers/contracts/ExchangerTimelock/#exchanger","text":"function exchanger() view returns(address)","title":"exchanger"},{"location":"developers/contracts/ExchangerTimelock/#returns","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ExchangerTimelock/#guardian","text":"function guardian() view returns(address) rari DAO timelock can clawback in event of no-deal","title":"guardian"},{"location":"developers/contracts/ExchangerTimelock/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ExchangerTimelock/#owner","text":"function owner() view returns(address) Returns the address of the current owner.","title":"owner"},{"location":"developers/contracts/ExchangerTimelock/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ExchangerTimelock/#recoverrgt","text":"function recoverRGT() nonpayable guardian sends back RGT","title":"recoverRGT"},{"location":"developers/contracts/ExchangerTimelock/#renounceownership","text":"function renounceOwnership() nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","title":"renounceOwnership"},{"location":"developers/contracts/ExchangerTimelock/#rgt","text":"function rgt() view returns(address)","title":"rgt"},{"location":"developers/contracts/ExchangerTimelock/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ExchangerTimelock/#timelock","text":"function timelock() view returns(address)","title":"timelock"},{"location":"developers/contracts/ExchangerTimelock/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ExchangerTimelock/#transferownership","text":"function transferOwnership(address) nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner.","title":"transferOwnership"},{"location":"developers/contracts/ExchangerTimelock/#params_1","text":"Param Type Notes newOwner address","title":"Params"},{"location":"developers/contracts/ExchangerTimelock/#tribe","text":"function tribe() view returns(address)","title":"tribe"},{"location":"developers/contracts/ExchangerTimelock/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Fei/","text":"\u2b05\ufe0f Contracts Fei FEI stablecoin Author: Fei Protocol Events Approval event Approval(address,address,uint256) Params Param Type Notes owner indexed address spender indexed address value uint256 Burning event Burning(address,address,uint256) Params Param Type Notes _to indexed address _burner indexed address _amount uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address IncentiveContractUpdate event IncentiveContractUpdate(address,address) Params Param Type Notes _incentivized indexed address _incentiveContract indexed address Minting event Minting(address,address,uint256) Params Param Type Notes _to indexed address _minter indexed address _amount uint256 Paused event Paused(address) Params Param Type Notes account address Transfer event Transfer(address,address,uint256) Params Param Type Notes from indexed address to indexed address value uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 DOMAIN_SEPARATOR function DOMAIN_SEPARATOR() view returns(bytes32) Returns Param Type Notes bytes32 PERMIT_TYPEHASH function PERMIT_TYPEHASH() view returns(bytes32) Returns Param Type Notes bytes32 allowance function allowance(address,address) view returns(uint256) See {IERC20-allowance}. Params Param Type Notes owner address spender address Returns Param Type Notes uint256 approve function approve(address,uint256) nonpayable returns(bool) See {IERC20-approve}. Requirements: - spender cannot be the zero address. Params Param Type Notes spender address amount uint256 Returns Param Type Notes bool balanceOf function balanceOf(address) view returns(uint256) See {IERC20-balanceOf}. Params Param Type Notes account address Returns Param Type Notes uint256 burn function burn(uint256) nonpayable burn FEI tokens from caller Params Param Type Notes amount uint256 the amount to burn burnFrom function burnFrom(address,uint256) nonpayable burn FEI tokens from specified account Params Param Type Notes account address the account to burn from amount uint256 the amount to burn core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address decimals function decimals() view returns(uint8) Returns the number of decimals used to get its user representation. For example, if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5.05 ( 505 / 10 ** 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}. Returns Param Type Notes uint8 decreaseAllowance function decreaseAllowance(address,uint256) nonpayable returns(bool) Atomically decreases the allowance granted to spender by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - spender cannot be the zero address. - spender must have allowance for the caller of at least subtractedValue . Params Param Type Notes spender address subtractedValue uint256 Returns Param Type Notes bool fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 incentiveContract function incentiveContract(address) view returns(address) get associated incentive contract, 0 address if N/A Params Param Type Notes address Returns Param Type Notes address increaseAllowance function increaseAllowance(address,uint256) nonpayable returns(bool) Atomically increases the allowance granted to spender by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - spender cannot be the zero address. Params Param Type Notes spender address addedValue uint256 Returns Param Type Notes bool isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool mint function mint(address,uint256) nonpayable mint FEI tokens Params Param Type Notes account address the account to mint to amount uint256 the amount to mint name function name() view returns(string) Returns the name of the token. Returns Param Type Notes string nonces function nonces(address) view returns(uint256) Params Param Type Notes address Returns Param Type Notes uint256 pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool permit function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) nonpayable permit spending of FEI Params Param Type Notes owner address the FEI holder spender address the approved operator value uint256 the amount approved deadline uint256 the deadline after which the approval is no longer valid v uint8 r bytes32 s bytes32 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setIncentiveContract function setIncentiveContract(address,address) nonpayable Params Param Type Notes account address the account to incentivize incentive address the associated incentive contract symbol function symbol() view returns(string) Returns the symbol of the token, usually a shorter version of the name. Returns Param Type Notes string totalSupply function totalSupply() view returns(uint256) See {IERC20-totalSupply}. Returns Param Type Notes uint256 transfer function transfer(address,uint256) nonpayable returns(bool) See {IERC20-transfer}. Requirements: - recipient cannot be the zero address. - the caller must have a balance of at least amount . Params Param Type Notes recipient address amount uint256 Returns Param Type Notes bool transferFrom function transferFrom(address,address,uint256) nonpayable returns(bool) See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - sender and recipient cannot be the zero address. - sender must have a balance of at least amount . - the caller must have allowance for sender 's tokens of at least amount . Params Param Type Notes sender address recipient address amount uint256 Returns Param Type Notes bool tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"Fei"},{"location":"developers/contracts/Fei/#fei","text":"FEI stablecoin Author: Fei Protocol","title":"Fei"},{"location":"developers/contracts/Fei/#events","text":"","title":"Events"},{"location":"developers/contracts/Fei/#approval","text":"event Approval(address,address,uint256)","title":"Approval"},{"location":"developers/contracts/Fei/#params","text":"Param Type Notes owner indexed address spender indexed address value uint256","title":"Params"},{"location":"developers/contracts/Fei/#burning","text":"event Burning(address,address,uint256)","title":"Burning"},{"location":"developers/contracts/Fei/#params_1","text":"Param Type Notes _to indexed address _burner indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/Fei/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/Fei/#params_2","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/Fei/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/Fei/#params_3","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/Fei/#incentivecontractupdate","text":"event IncentiveContractUpdate(address,address)","title":"IncentiveContractUpdate"},{"location":"developers/contracts/Fei/#params_4","text":"Param Type Notes _incentivized indexed address _incentiveContract indexed address","title":"Params"},{"location":"developers/contracts/Fei/#minting","text":"event Minting(address,address,uint256)","title":"Minting"},{"location":"developers/contracts/Fei/#params_5","text":"Param Type Notes _to indexed address _minter indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/Fei/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/Fei/#params_6","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/Fei/#transfer","text":"event Transfer(address,address,uint256)","title":"Transfer"},{"location":"developers/contracts/Fei/#params_7","text":"Param Type Notes from indexed address to indexed address value uint256","title":"Params"},{"location":"developers/contracts/Fei/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/Fei/#params_8","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/Fei/#methods","text":"","title":"Methods"},{"location":"developers/contracts/Fei/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/Fei/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Fei/#domain_separator","text":"function DOMAIN_SEPARATOR() view returns(bytes32)","title":"DOMAIN_SEPARATOR"},{"location":"developers/contracts/Fei/#returns_1","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Fei/#permit_typehash","text":"function PERMIT_TYPEHASH() view returns(bytes32)","title":"PERMIT_TYPEHASH"},{"location":"developers/contracts/Fei/#returns_2","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Fei/#allowance","text":"function allowance(address,address) view returns(uint256) See {IERC20-allowance}.","title":"allowance"},{"location":"developers/contracts/Fei/#params_9","text":"Param Type Notes owner address spender address","title":"Params"},{"location":"developers/contracts/Fei/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Fei/#approve","text":"function approve(address,uint256) nonpayable returns(bool) See {IERC20-approve}. Requirements: - spender cannot be the zero address.","title":"approve"},{"location":"developers/contracts/Fei/#params_10","text":"Param Type Notes spender address amount uint256","title":"Params"},{"location":"developers/contracts/Fei/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Fei/#balanceof","text":"function balanceOf(address) view returns(uint256) See {IERC20-balanceOf}.","title":"balanceOf"},{"location":"developers/contracts/Fei/#params_11","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/Fei/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Fei/#burn","text":"function burn(uint256) nonpayable burn FEI tokens from caller","title":"burn"},{"location":"developers/contracts/Fei/#params_12","text":"Param Type Notes amount uint256 the amount to burn","title":"Params"},{"location":"developers/contracts/Fei/#burnfrom","text":"function burnFrom(address,uint256) nonpayable burn FEI tokens from specified account","title":"burnFrom"},{"location":"developers/contracts/Fei/#params_13","text":"Param Type Notes account address the account to burn from amount uint256 the amount to burn","title":"Params"},{"location":"developers/contracts/Fei/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/Fei/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Fei/#decimals","text":"function decimals() view returns(uint8) Returns the number of decimals used to get its user representation. For example, if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5.05 ( 505 / 10 ** 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.","title":"decimals"},{"location":"developers/contracts/Fei/#returns_7","text":"Param Type Notes uint8","title":"Returns"},{"location":"developers/contracts/Fei/#decreaseallowance","text":"function decreaseAllowance(address,uint256) nonpayable returns(bool) Atomically decreases the allowance granted to spender by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - spender cannot be the zero address. - spender must have allowance for the caller of at least subtractedValue .","title":"decreaseAllowance"},{"location":"developers/contracts/Fei/#params_14","text":"Param Type Notes spender address subtractedValue uint256","title":"Params"},{"location":"developers/contracts/Fei/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Fei/#fei_1","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/Fei/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Fei/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/Fei/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Fei/#incentivecontract","text":"function incentiveContract(address) view returns(address) get associated incentive contract, 0 address if N/A","title":"incentiveContract"},{"location":"developers/contracts/Fei/#params_15","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/Fei/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Fei/#increaseallowance","text":"function increaseAllowance(address,uint256) nonpayable returns(bool) Atomically increases the allowance granted to spender by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - spender cannot be the zero address.","title":"increaseAllowance"},{"location":"developers/contracts/Fei/#params_16","text":"Param Type Notes spender address addedValue uint256","title":"Params"},{"location":"developers/contracts/Fei/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Fei/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/Fei/#params_17","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/Fei/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Fei/#mint","text":"function mint(address,uint256) nonpayable mint FEI tokens","title":"mint"},{"location":"developers/contracts/Fei/#params_18","text":"Param Type Notes account address the account to mint to amount uint256 the amount to mint","title":"Params"},{"location":"developers/contracts/Fei/#name","text":"function name() view returns(string) Returns the name of the token.","title":"name"},{"location":"developers/contracts/Fei/#returns_14","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/Fei/#nonces","text":"function nonces(address) view returns(uint256)","title":"nonces"},{"location":"developers/contracts/Fei/#params_19","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/Fei/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Fei/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/Fei/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/Fei/#returns_16","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Fei/#permit","text":"function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) nonpayable permit spending of FEI","title":"permit"},{"location":"developers/contracts/Fei/#params_20","text":"Param Type Notes owner address the FEI holder spender address the approved operator value uint256 the amount approved deadline uint256 the deadline after which the approval is no longer valid v uint8 r bytes32 s bytes32","title":"Params"},{"location":"developers/contracts/Fei/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/Fei/#params_21","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/Fei/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/Fei/#params_22","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/Fei/#setincentivecontract","text":"function setIncentiveContract(address,address) nonpayable","title":"setIncentiveContract"},{"location":"developers/contracts/Fei/#params_23","text":"Param Type Notes account address the account to incentivize incentive address the associated incentive contract","title":"Params"},{"location":"developers/contracts/Fei/#symbol","text":"function symbol() view returns(string) Returns the symbol of the token, usually a shorter version of the name.","title":"symbol"},{"location":"developers/contracts/Fei/#returns_17","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/Fei/#totalsupply","text":"function totalSupply() view returns(uint256) See {IERC20-totalSupply}.","title":"totalSupply"},{"location":"developers/contracts/Fei/#returns_18","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Fei/#transfer_1","text":"function transfer(address,uint256) nonpayable returns(bool) See {IERC20-transfer}. Requirements: - recipient cannot be the zero address. - the caller must have a balance of at least amount .","title":"transfer"},{"location":"developers/contracts/Fei/#params_24","text":"Param Type Notes recipient address amount uint256","title":"Params"},{"location":"developers/contracts/Fei/#returns_19","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Fei/#transferfrom","text":"function transferFrom(address,address,uint256) nonpayable returns(bool) See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - sender and recipient cannot be the zero address. - sender must have a balance of at least amount . - the caller must have allowance for sender 's tokens of at least amount .","title":"transferFrom"},{"location":"developers/contracts/Fei/#params_25","text":"Param Type Notes sender address recipient address amount uint256","title":"Params"},{"location":"developers/contracts/Fei/#returns_20","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Fei/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/Fei/#returns_21","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Fei/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/Fei/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Fei/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/FeiDAO/","text":"\u2b05\ufe0f Contracts FeiDAO Events ProposalCanceled event ProposalCanceled(uint256) Params Param Type Notes proposalId uint256 ProposalCreated event ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string) Params Param Type Notes proposalId uint256 proposer address targets address[] values uint256[] signatures string[] calldatas bytes[] startBlock uint256 endBlock uint256 description string ProposalExecuted event ProposalExecuted(uint256) Params Param Type Notes proposalId uint256 ProposalQueued event ProposalQueued(uint256,uint256) Params Param Type Notes proposalId uint256 eta uint256 ProposalThresholdUpdated event ProposalThresholdUpdated(uint256,uint256) Params Param Type Notes oldProposalThreshold uint256 newProposalThreshold uint256 QuorumUpdated event QuorumUpdated(uint256,uint256) Params Param Type Notes oldQuorum uint256 newQuorum uint256 Rollback event Rollback() RollbackQueued event RollbackQueued(uint256) Params Param Type Notes eta uint256 TimelockChange event TimelockChange(address,address) Params Param Type Notes oldTimelock address newTimelock address VoteCast event VoteCast(address,uint256,uint8,uint256,string) Params Param Type Notes voter indexed address proposalId uint256 support uint8 weight uint256 reason string VotingDelayUpdated event VotingDelayUpdated(uint256,uint256) Params Param Type Notes oldVotingDelay uint256 newVotingDelay uint256 VotingPeriodUpdated event VotingPeriodUpdated(uint256,uint256) Params Param Type Notes oldVotingPeriod uint256 newVotingPeriod uint256 Methods BACKUP_GOVERNOR function BACKUP_GOVERNOR() view returns(address) Returns Param Type Notes address BALLOT_TYPEHASH function BALLOT_TYPEHASH() view returns(bytes32) Returns Param Type Notes bytes32 COUNTING_MODE function COUNTING_MODE() pure returns(string) module:voting A description of the possible support values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example support=bravo&quorum=for,abstain . There are 2 standard keys: support and quorum . - support=bravo refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in GovernorBravo . - quorum=bravo means that only For votes are counted towards quorum. - quorum=for,abstain means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[ URLSearchParams ] JavaScript class. Returns Param Type Notes string ROLLBACK_DEADLINE function ROLLBACK_DEADLINE() view returns(uint256) Returns Param Type Notes uint256 __acceptAdmin function __acceptAdmin() nonpayable Accept admin right over the timelock. __executeRollback function __executeRollback() nonpayable complete the rollback __rollback function __rollback(uint256) nonpayable one-time option to roll back the DAO to old GovernorAlpha guardian-only, and expires after the deadline. This function is here as a fallback in case something goes wrong. Params Param Type Notes eta uint256 cancel function cancel(uint256) nonpayable Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold. Params Param Type Notes proposalId uint256 castVote function castVote(uint256,uint8) nonpayable returns(uint256) See {IGovernor-castVote}. Params Param Type Notes proposalId uint256 support uint8 Returns Param Type Notes uint256 castVoteBySig function castVoteBySig(uint256,uint8,uint8,bytes32,bytes32) nonpayable returns(uint256) See {IGovernor-castVoteBySig}. Params Param Type Notes proposalId uint256 support uint8 v uint8 r bytes32 s bytes32 Returns Param Type Notes uint256 castVoteWithReason function castVoteWithReason(uint256,uint8,string) nonpayable returns(uint256) See {IGovernor-castVoteWithReason}. Params Param Type Notes proposalId uint256 support uint8 reason string Returns Param Type Notes uint256 execute function execute(address[],uint256[],bytes[],bytes32) payable returns(uint256) See {IGovernor-execute}. Params Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32 Returns Param Type Notes uint256 execute function execute(uint256) payable See {IGovernorCompatibilityBravo-execute}. Params Param Type Notes proposalId uint256 getActions function getActions(uint256) view returns(address[],uint256[],string[],bytes[]) See {IGovernorCompatibilityBravo-getActions}. Params Param Type Notes proposalId uint256 Returns Param Type Notes targets address[] values uint256[] signatures string[] calldatas bytes[] getReceipt function getReceipt(uint256,address) view returns(tuple) See {IGovernorCompatibilityBravo-getReceipt}. Params Param Type Notes proposalId uint256 voter address Returns Param Type Notes tuple getVotes function getVotes(address,uint256) view returns(uint256) Params Param Type Notes account address blockNumber uint256 Returns Param Type Notes uint256 hasVoted function hasVoted(uint256,address) view returns(bool) See {IGovernor-hasVoted}. Params Param Type Notes proposalId uint256 account address Returns Param Type Notes bool hashProposal function hashProposal(address[],uint256[],bytes[],bytes32) pure returns(uint256) See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded targets array, the values array, the calldatas array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts. Params Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32 Returns Param Type Notes uint256 name function name() view returns(string) See {IGovernor-name}. Returns Param Type Notes string proposalDeadline function proposalDeadline(uint256) view returns(uint256) See {IGovernor-proposalDeadline}. Params Param Type Notes proposalId uint256 Returns Param Type Notes uint256 proposalEta function proposalEta(uint256) view returns(uint256) Public accessor to check the eta of a queued proposal Params Param Type Notes proposalId uint256 Returns Param Type Notes uint256 proposalSnapshot function proposalSnapshot(uint256) view returns(uint256) See {IGovernor-proposalSnapshot}. Params Param Type Notes proposalId uint256 Returns Param Type Notes uint256 proposalThreshold function proposalThreshold() view returns(uint256) Part of the Governor Bravo's interface: \"The number of votes required in order for a voter to become a proposer\" . Returns Param Type Notes uint256 proposals function proposals(uint256) view returns(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool) See {IGovernorCompatibilityBravo-proposals}. Params Param Type Notes proposalId uint256 Returns Param Type Notes id uint256 proposer address eta uint256 startBlock uint256 endBlock uint256 forVotes uint256 againstVotes uint256 abstainVotes uint256 canceled bool executed bool propose function propose(address[],uint256[],bytes[],string) nonpayable returns(uint256) Params Param Type Notes targets address[] values uint256[] calldatas bytes[] description string Returns Param Type Notes uint256 propose function propose(address[],uint256[],string[],bytes[],string) nonpayable returns(uint256) See {IGovernorCompatibilityBravo-propose}. Params Param Type Notes targets address[] values uint256[] signatures string[] calldatas bytes[] description string Returns Param Type Notes uint256 queue function queue(address[],uint256[],bytes[],bytes32) nonpayable returns(uint256) Function to queue a proposal to the timelock. Params Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32 Returns Param Type Notes uint256 queue function queue(uint256) nonpayable See {IGovernorCompatibilityBravo-queue}. Params Param Type Notes proposalId uint256 quorum function quorum(uint256) view returns(uint256) Params Param Type Notes uint256 Returns Param Type Notes uint256 quorumVotes function quorumVotes() view returns(uint256) See {IGovernorCompatibilityBravo-quorumVotes}. Returns Param Type Notes uint256 setProposalThreshold function setProposalThreshold(uint256) nonpayable Params Param Type Notes newProposalThreshold uint256 setQuorum function setQuorum(uint256) nonpayable Params Param Type Notes newQuorum uint256 setVotingDelay function setVotingDelay(uint256) nonpayable Params Param Type Notes newVotingDelay uint256 setVotingPeriod function setVotingPeriod(uint256) nonpayable Params Param Type Notes newVotingPeriod uint256 state function state(uint256) view returns(uint8) Params Param Type Notes proposalId uint256 Returns Param Type Notes uint8 supportsInterface function supportsInterface(bytes4) view returns(bool) Params Param Type Notes interfaceId bytes4 Returns Param Type Notes bool timelock function timelock() view returns(address) Public accessor to check the address of the timelock Returns Param Type Notes address token function token() view returns(address) Returns Param Type Notes address updateTimelock function updateTimelock(address) nonpayable Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow. For security reason, the timelock must be handed over to another admin before setting up a new one. The two operations (hand over the timelock) and do the update can be batched in a single proposal. Note that if the timelock admin has been handed over in a previous operation, we refuse updates made through the timelock if admin of the timelock has already been accepted and the operation is executed outside the scope of governance. Params Param Type Notes newTimelock address version function version() view returns(string) See {IGovernor-version}. Returns Param Type Notes string votingDelay function votingDelay() view returns(uint256) module:user-config Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts. Returns Param Type Notes uint256 votingPeriod function votingPeriod() view returns(uint256) module:user-config Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay. Returns Param Type Notes uint256 \u2b05\ufe0f Contracts","title":"FeiDAO"},{"location":"developers/contracts/FeiDAO/#feidao","text":"","title":"FeiDAO"},{"location":"developers/contracts/FeiDAO/#events","text":"","title":"Events"},{"location":"developers/contracts/FeiDAO/#proposalcanceled","text":"event ProposalCanceled(uint256)","title":"ProposalCanceled"},{"location":"developers/contracts/FeiDAO/#params","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#proposalcreated","text":"event ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)","title":"ProposalCreated"},{"location":"developers/contracts/FeiDAO/#params_1","text":"Param Type Notes proposalId uint256 proposer address targets address[] values uint256[] signatures string[] calldatas bytes[] startBlock uint256 endBlock uint256 description string","title":"Params"},{"location":"developers/contracts/FeiDAO/#proposalexecuted","text":"event ProposalExecuted(uint256)","title":"ProposalExecuted"},{"location":"developers/contracts/FeiDAO/#params_2","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#proposalqueued","text":"event ProposalQueued(uint256,uint256)","title":"ProposalQueued"},{"location":"developers/contracts/FeiDAO/#params_3","text":"Param Type Notes proposalId uint256 eta uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#proposalthresholdupdated","text":"event ProposalThresholdUpdated(uint256,uint256)","title":"ProposalThresholdUpdated"},{"location":"developers/contracts/FeiDAO/#params_4","text":"Param Type Notes oldProposalThreshold uint256 newProposalThreshold uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#quorumupdated","text":"event QuorumUpdated(uint256,uint256)","title":"QuorumUpdated"},{"location":"developers/contracts/FeiDAO/#params_5","text":"Param Type Notes oldQuorum uint256 newQuorum uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#rollback","text":"event Rollback()","title":"Rollback"},{"location":"developers/contracts/FeiDAO/#rollbackqueued","text":"event RollbackQueued(uint256)","title":"RollbackQueued"},{"location":"developers/contracts/FeiDAO/#params_6","text":"Param Type Notes eta uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#timelockchange","text":"event TimelockChange(address,address)","title":"TimelockChange"},{"location":"developers/contracts/FeiDAO/#params_7","text":"Param Type Notes oldTimelock address newTimelock address","title":"Params"},{"location":"developers/contracts/FeiDAO/#votecast","text":"event VoteCast(address,uint256,uint8,uint256,string)","title":"VoteCast"},{"location":"developers/contracts/FeiDAO/#params_8","text":"Param Type Notes voter indexed address proposalId uint256 support uint8 weight uint256 reason string","title":"Params"},{"location":"developers/contracts/FeiDAO/#votingdelayupdated","text":"event VotingDelayUpdated(uint256,uint256)","title":"VotingDelayUpdated"},{"location":"developers/contracts/FeiDAO/#params_9","text":"Param Type Notes oldVotingDelay uint256 newVotingDelay uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#votingperiodupdated","text":"event VotingPeriodUpdated(uint256,uint256)","title":"VotingPeriodUpdated"},{"location":"developers/contracts/FeiDAO/#params_10","text":"Param Type Notes oldVotingPeriod uint256 newVotingPeriod uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#methods","text":"","title":"Methods"},{"location":"developers/contracts/FeiDAO/#backup_governor","text":"function BACKUP_GOVERNOR() view returns(address)","title":"BACKUP_GOVERNOR"},{"location":"developers/contracts/FeiDAO/#returns","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiDAO/#ballot_typehash","text":"function BALLOT_TYPEHASH() view returns(bytes32)","title":"BALLOT_TYPEHASH"},{"location":"developers/contracts/FeiDAO/#returns_1","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/FeiDAO/#counting_mode","text":"function COUNTING_MODE() pure returns(string) module:voting A description of the possible support values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example support=bravo&quorum=for,abstain . There are 2 standard keys: support and quorum . - support=bravo refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in GovernorBravo . - quorum=bravo means that only For votes are counted towards quorum. - quorum=for,abstain means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[ URLSearchParams ] JavaScript class.","title":"COUNTING_MODE"},{"location":"developers/contracts/FeiDAO/#returns_2","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/FeiDAO/#rollback_deadline","text":"function ROLLBACK_DEADLINE() view returns(uint256)","title":"ROLLBACK_DEADLINE"},{"location":"developers/contracts/FeiDAO/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#__acceptadmin","text":"function __acceptAdmin() nonpayable Accept admin right over the timelock.","title":"__acceptAdmin"},{"location":"developers/contracts/FeiDAO/#__executerollback","text":"function __executeRollback() nonpayable complete the rollback","title":"__executeRollback"},{"location":"developers/contracts/FeiDAO/#__rollback","text":"function __rollback(uint256) nonpayable one-time option to roll back the DAO to old GovernorAlpha guardian-only, and expires after the deadline. This function is here as a fallback in case something goes wrong.","title":"__rollback"},{"location":"developers/contracts/FeiDAO/#params_11","text":"Param Type Notes eta uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#cancel","text":"function cancel(uint256) nonpayable Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold.","title":"cancel"},{"location":"developers/contracts/FeiDAO/#params_12","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#castvote","text":"function castVote(uint256,uint8) nonpayable returns(uint256) See {IGovernor-castVote}.","title":"castVote"},{"location":"developers/contracts/FeiDAO/#params_13","text":"Param Type Notes proposalId uint256 support uint8","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#castvotebysig","text":"function castVoteBySig(uint256,uint8,uint8,bytes32,bytes32) nonpayable returns(uint256) See {IGovernor-castVoteBySig}.","title":"castVoteBySig"},{"location":"developers/contracts/FeiDAO/#params_14","text":"Param Type Notes proposalId uint256 support uint8 v uint8 r bytes32 s bytes32","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#castvotewithreason","text":"function castVoteWithReason(uint256,uint8,string) nonpayable returns(uint256) See {IGovernor-castVoteWithReason}.","title":"castVoteWithReason"},{"location":"developers/contracts/FeiDAO/#params_15","text":"Param Type Notes proposalId uint256 support uint8 reason string","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#execute","text":"function execute(address[],uint256[],bytes[],bytes32) payable returns(uint256) See {IGovernor-execute}.","title":"execute"},{"location":"developers/contracts/FeiDAO/#params_16","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#execute_1","text":"function execute(uint256) payable See {IGovernorCompatibilityBravo-execute}.","title":"execute"},{"location":"developers/contracts/FeiDAO/#params_17","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#getactions","text":"function getActions(uint256) view returns(address[],uint256[],string[],bytes[]) See {IGovernorCompatibilityBravo-getActions}.","title":"getActions"},{"location":"developers/contracts/FeiDAO/#params_18","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_8","text":"Param Type Notes targets address[] values uint256[] signatures string[] calldatas bytes[]","title":"Returns"},{"location":"developers/contracts/FeiDAO/#getreceipt","text":"function getReceipt(uint256,address) view returns(tuple) See {IGovernorCompatibilityBravo-getReceipt}.","title":"getReceipt"},{"location":"developers/contracts/FeiDAO/#params_19","text":"Param Type Notes proposalId uint256 voter address","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_9","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/FeiDAO/#getvotes","text":"function getVotes(address,uint256) view returns(uint256)","title":"getVotes"},{"location":"developers/contracts/FeiDAO/#params_20","text":"Param Type Notes account address blockNumber uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#hasvoted","text":"function hasVoted(uint256,address) view returns(bool) See {IGovernor-hasVoted}.","title":"hasVoted"},{"location":"developers/contracts/FeiDAO/#params_21","text":"Param Type Notes proposalId uint256 account address","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/FeiDAO/#hashproposal","text":"function hashProposal(address[],uint256[],bytes[],bytes32) pure returns(uint256) See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded targets array, the values array, the calldatas array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts.","title":"hashProposal"},{"location":"developers/contracts/FeiDAO/#params_22","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#name","text":"function name() view returns(string) See {IGovernor-name}.","title":"name"},{"location":"developers/contracts/FeiDAO/#returns_13","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/FeiDAO/#proposaldeadline","text":"function proposalDeadline(uint256) view returns(uint256) See {IGovernor-proposalDeadline}.","title":"proposalDeadline"},{"location":"developers/contracts/FeiDAO/#params_23","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#proposaleta","text":"function proposalEta(uint256) view returns(uint256) Public accessor to check the eta of a queued proposal","title":"proposalEta"},{"location":"developers/contracts/FeiDAO/#params_24","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#proposalsnapshot","text":"function proposalSnapshot(uint256) view returns(uint256) See {IGovernor-proposalSnapshot}.","title":"proposalSnapshot"},{"location":"developers/contracts/FeiDAO/#params_25","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#proposalthreshold","text":"function proposalThreshold() view returns(uint256) Part of the Governor Bravo's interface: \"The number of votes required in order for a voter to become a proposer\" .","title":"proposalThreshold"},{"location":"developers/contracts/FeiDAO/#returns_17","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#proposals","text":"function proposals(uint256) view returns(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool) See {IGovernorCompatibilityBravo-proposals}.","title":"proposals"},{"location":"developers/contracts/FeiDAO/#params_26","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_18","text":"Param Type Notes id uint256 proposer address eta uint256 startBlock uint256 endBlock uint256 forVotes uint256 againstVotes uint256 abstainVotes uint256 canceled bool executed bool","title":"Returns"},{"location":"developers/contracts/FeiDAO/#propose","text":"function propose(address[],uint256[],bytes[],string) nonpayable returns(uint256)","title":"propose"},{"location":"developers/contracts/FeiDAO/#params_27","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] description string","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#propose_1","text":"function propose(address[],uint256[],string[],bytes[],string) nonpayable returns(uint256) See {IGovernorCompatibilityBravo-propose}.","title":"propose"},{"location":"developers/contracts/FeiDAO/#params_28","text":"Param Type Notes targets address[] values uint256[] signatures string[] calldatas bytes[] description string","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_20","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#queue","text":"function queue(address[],uint256[],bytes[],bytes32) nonpayable returns(uint256) Function to queue a proposal to the timelock.","title":"queue"},{"location":"developers/contracts/FeiDAO/#params_29","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_21","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#queue_1","text":"function queue(uint256) nonpayable See {IGovernorCompatibilityBravo-queue}.","title":"queue"},{"location":"developers/contracts/FeiDAO/#params_30","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#quorum","text":"function quorum(uint256) view returns(uint256)","title":"quorum"},{"location":"developers/contracts/FeiDAO/#params_31","text":"Param Type Notes uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#quorumvotes","text":"function quorumVotes() view returns(uint256) See {IGovernorCompatibilityBravo-quorumVotes}.","title":"quorumVotes"},{"location":"developers/contracts/FeiDAO/#returns_23","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#setproposalthreshold","text":"function setProposalThreshold(uint256) nonpayable","title":"setProposalThreshold"},{"location":"developers/contracts/FeiDAO/#params_32","text":"Param Type Notes newProposalThreshold uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#setquorum","text":"function setQuorum(uint256) nonpayable","title":"setQuorum"},{"location":"developers/contracts/FeiDAO/#params_33","text":"Param Type Notes newQuorum uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#setvotingdelay","text":"function setVotingDelay(uint256) nonpayable","title":"setVotingDelay"},{"location":"developers/contracts/FeiDAO/#params_34","text":"Param Type Notes newVotingDelay uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#setvotingperiod","text":"function setVotingPeriod(uint256) nonpayable","title":"setVotingPeriod"},{"location":"developers/contracts/FeiDAO/#params_35","text":"Param Type Notes newVotingPeriod uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#state","text":"function state(uint256) view returns(uint8)","title":"state"},{"location":"developers/contracts/FeiDAO/#params_36","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_24","text":"Param Type Notes uint8","title":"Returns"},{"location":"developers/contracts/FeiDAO/#supportsinterface","text":"function supportsInterface(bytes4) view returns(bool)","title":"supportsInterface"},{"location":"developers/contracts/FeiDAO/#params_37","text":"Param Type Notes interfaceId bytes4","title":"Params"},{"location":"developers/contracts/FeiDAO/#returns_25","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/FeiDAO/#timelock","text":"function timelock() view returns(address) Public accessor to check the address of the timelock","title":"timelock"},{"location":"developers/contracts/FeiDAO/#returns_26","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiDAO/#token","text":"function token() view returns(address)","title":"token"},{"location":"developers/contracts/FeiDAO/#returns_27","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiDAO/#updatetimelock","text":"function updateTimelock(address) nonpayable Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow. For security reason, the timelock must be handed over to another admin before setting up a new one. The two operations (hand over the timelock) and do the update can be batched in a single proposal. Note that if the timelock admin has been handed over in a previous operation, we refuse updates made through the timelock if admin of the timelock has already been accepted and the operation is executed outside the scope of governance.","title":"updateTimelock"},{"location":"developers/contracts/FeiDAO/#params_38","text":"Param Type Notes newTimelock address","title":"Params"},{"location":"developers/contracts/FeiDAO/#version","text":"function version() view returns(string) See {IGovernor-version}.","title":"version"},{"location":"developers/contracts/FeiDAO/#returns_28","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/FeiDAO/#votingdelay","text":"function votingDelay() view returns(uint256) module:user-config Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.","title":"votingDelay"},{"location":"developers/contracts/FeiDAO/#returns_29","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAO/#votingperiod","text":"function votingPeriod() view returns(uint256) module:user-config Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay.","title":"votingPeriod"},{"location":"developers/contracts/FeiDAO/#returns_30","text":"Param Type Notes uint256 \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/","text":"\u2b05\ufe0f Contracts FeiDAOTimelock Fei DAO Timelock Timelock with veto admin roles DEV NOTE: this timelock has the ability for the Guardian to pause queing or executing proposals, as well as being able to veto specific transactions. The timelock itself could not unpause the timelock while in paused state. Events CancelTransaction event CancelTransaction(bytes32,address,uint256,string,bytes,uint256) Params Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address ExecuteTransaction event ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256) Params Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256 NewAdmin event NewAdmin(address) Params Param Type Notes newAdmin indexed address NewDelay event NewDelay(uint256) Params Param Type Notes newDelay indexed uint256 NewPendingAdmin event NewPendingAdmin(address) Params Param Type Notes newPendingAdmin indexed address Paused event Paused(address) Params Param Type Notes account address QueueTransaction event QueueTransaction(bytes32,address,uint256,string,bytes,uint256) Params Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 GRACE_PERIOD function GRACE_PERIOD() view returns(uint256) Returns Param Type Notes uint256 MAXIMUM_DELAY function MAXIMUM_DELAY() view returns(uint256) Returns Param Type Notes uint256 MINIMUM_DELAY function MINIMUM_DELAY() view returns(uint256) Returns Param Type Notes uint256 OLD_TIMELOCK function OLD_TIMELOCK() view returns(address) Returns Param Type Notes address ROLLBACK_DEADLINE function ROLLBACK_DEADLINE() view returns(uint256) Returns Param Type Notes uint256 acceptAdmin function acceptAdmin() nonpayable admin function admin() view returns(address) Returns Param Type Notes address cancelTransaction function cancelTransaction(address,uint256,string,bytes,uint256) nonpayable Params Param Type Notes target address value uint256 signature string data bytes eta uint256 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address delay function delay() view returns(uint256) Returns Param Type Notes uint256 executeTransaction function executeTransaction(address,uint256,string,bytes,uint256) payable returns(bytes) execute a transaction, with pausability Params Param Type Notes target address value uint256 signature string data bytes eta uint256 Returns Param Type Notes bytes fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getTxHash function getTxHash(address,uint256,string,bytes,uint256) pure returns(bytes32) Params Param Type Notes target address value uint256 signature string data bytes eta uint256 Returns Param Type Notes bytes32 governorSetPendingAdmin function governorSetPendingAdmin(address) nonpayable allow a governor to set a new pending timelock admin Params Param Type Notes newAdmin address isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool pendingAdmin function pendingAdmin() view returns(address) Returns Param Type Notes address queueTransaction function queueTransaction(address,uint256,string,bytes,uint256) nonpayable returns(bytes32) queue a transaction, with pausability Params Param Type Notes target address value uint256 signature string data bytes eta uint256 Returns Param Type Notes bytes32 queuedTransactions function queuedTransactions(bytes32) view returns(bool) Params Param Type Notes bytes32 Returns Param Type Notes bool rollback function rollback() nonpayable one-time option to roll back the Timelock to old timelock guardian-only, and expires after the deadline. This function is here as a fallback in case something goes wrong. setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDelay function setDelay(uint256) nonpayable Params Param Type Notes delay_ uint256 setPendingAdmin function setPendingAdmin(address) nonpayable Params Param Type Notes pendingAdmin_ address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused vetoTransactions function vetoTransactions(address[],uint256[],string[],bytes[],uint256[]) nonpayable veto a group of transactions Params Param Type Notes targets address[] values uint256[] signatures string[] datas bytes[] etas uint256[] \u2b05\ufe0f Contracts","title":"FeiDAOTimelock"},{"location":"developers/contracts/FeiDAOTimelock/#feidaotimelock","text":"Fei DAO Timelock Timelock with veto admin roles DEV NOTE: this timelock has the ability for the Guardian to pause queing or executing proposals, as well as being able to veto specific transactions. The timelock itself could not unpause the timelock while in paused state.","title":"FeiDAOTimelock"},{"location":"developers/contracts/FeiDAOTimelock/#events","text":"","title":"Events"},{"location":"developers/contracts/FeiDAOTimelock/#canceltransaction","text":"event CancelTransaction(bytes32,address,uint256,string,bytes,uint256)","title":"CancelTransaction"},{"location":"developers/contracts/FeiDAOTimelock/#params","text":"Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/FeiDAOTimelock/#params_1","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/FeiDAOTimelock/#params_2","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#executetransaction","text":"event ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256)","title":"ExecuteTransaction"},{"location":"developers/contracts/FeiDAOTimelock/#params_3","text":"Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#newadmin","text":"event NewAdmin(address)","title":"NewAdmin"},{"location":"developers/contracts/FeiDAOTimelock/#params_4","text":"Param Type Notes newAdmin indexed address","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#newdelay","text":"event NewDelay(uint256)","title":"NewDelay"},{"location":"developers/contracts/FeiDAOTimelock/#params_5","text":"Param Type Notes newDelay indexed uint256","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#newpendingadmin","text":"event NewPendingAdmin(address)","title":"NewPendingAdmin"},{"location":"developers/contracts/FeiDAOTimelock/#params_6","text":"Param Type Notes newPendingAdmin indexed address","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/FeiDAOTimelock/#params_7","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#queuetransaction","text":"event QueueTransaction(bytes32,address,uint256,string,bytes,uint256)","title":"QueueTransaction"},{"location":"developers/contracts/FeiDAOTimelock/#params_8","text":"Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/FeiDAOTimelock/#params_9","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#methods","text":"","title":"Methods"},{"location":"developers/contracts/FeiDAOTimelock/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/FeiDAOTimelock/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#grace_period","text":"function GRACE_PERIOD() view returns(uint256)","title":"GRACE_PERIOD"},{"location":"developers/contracts/FeiDAOTimelock/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#maximum_delay","text":"function MAXIMUM_DELAY() view returns(uint256)","title":"MAXIMUM_DELAY"},{"location":"developers/contracts/FeiDAOTimelock/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#minimum_delay","text":"function MINIMUM_DELAY() view returns(uint256)","title":"MINIMUM_DELAY"},{"location":"developers/contracts/FeiDAOTimelock/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#old_timelock","text":"function OLD_TIMELOCK() view returns(address)","title":"OLD_TIMELOCK"},{"location":"developers/contracts/FeiDAOTimelock/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#rollback_deadline","text":"function ROLLBACK_DEADLINE() view returns(uint256)","title":"ROLLBACK_DEADLINE"},{"location":"developers/contracts/FeiDAOTimelock/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#acceptadmin","text":"function acceptAdmin() nonpayable","title":"acceptAdmin"},{"location":"developers/contracts/FeiDAOTimelock/#admin","text":"function admin() view returns(address)","title":"admin"},{"location":"developers/contracts/FeiDAOTimelock/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#canceltransaction_1","text":"function cancelTransaction(address,uint256,string,bytes,uint256) nonpayable","title":"cancelTransaction"},{"location":"developers/contracts/FeiDAOTimelock/#params_10","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/FeiDAOTimelock/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#delay","text":"function delay() view returns(uint256)","title":"delay"},{"location":"developers/contracts/FeiDAOTimelock/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#executetransaction_1","text":"function executeTransaction(address,uint256,string,bytes,uint256) payable returns(bytes) execute a transaction, with pausability","title":"executeTransaction"},{"location":"developers/contracts/FeiDAOTimelock/#params_11","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#returns_9","text":"Param Type Notes bytes","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/FeiDAOTimelock/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/FeiDAOTimelock/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#gettxhash","text":"function getTxHash(address,uint256,string,bytes,uint256) pure returns(bytes32)","title":"getTxHash"},{"location":"developers/contracts/FeiDAOTimelock/#params_12","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#returns_12","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#governorsetpendingadmin","text":"function governorSetPendingAdmin(address) nonpayable allow a governor to set a new pending timelock admin","title":"governorSetPendingAdmin"},{"location":"developers/contracts/FeiDAOTimelock/#params_13","text":"Param Type Notes newAdmin address","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/FeiDAOTimelock/#params_14","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/FeiDAOTimelock/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/FeiDAOTimelock/#returns_14","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#pendingadmin","text":"function pendingAdmin() view returns(address)","title":"pendingAdmin"},{"location":"developers/contracts/FeiDAOTimelock/#returns_15","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#queuetransaction_1","text":"function queueTransaction(address,uint256,string,bytes,uint256) nonpayable returns(bytes32) queue a transaction, with pausability","title":"queueTransaction"},{"location":"developers/contracts/FeiDAOTimelock/#params_15","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#returns_16","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#queuedtransactions","text":"function queuedTransactions(bytes32) view returns(bool)","title":"queuedTransactions"},{"location":"developers/contracts/FeiDAOTimelock/#params_16","text":"Param Type Notes bytes32","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#returns_17","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#rollback","text":"function rollback() nonpayable one-time option to roll back the Timelock to old timelock guardian-only, and expires after the deadline. This function is here as a fallback in case something goes wrong.","title":"rollback"},{"location":"developers/contracts/FeiDAOTimelock/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/FeiDAOTimelock/#params_17","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/FeiDAOTimelock/#params_18","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#setdelay","text":"function setDelay(uint256) nonpayable","title":"setDelay"},{"location":"developers/contracts/FeiDAOTimelock/#params_19","text":"Param Type Notes delay_ uint256","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#setpendingadmin","text":"function setPendingAdmin(address) nonpayable","title":"setPendingAdmin"},{"location":"developers/contracts/FeiDAOTimelock/#params_20","text":"Param Type Notes pendingAdmin_ address","title":"Params"},{"location":"developers/contracts/FeiDAOTimelock/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/FeiDAOTimelock/#returns_18","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/FeiDAOTimelock/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiDAOTimelock/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/FeiDAOTimelock/#vetotransactions","text":"function vetoTransactions(address[],uint256[],string[],bytes[],uint256[]) nonpayable veto a group of transactions","title":"vetoTransactions"},{"location":"developers/contracts/FeiDAOTimelock/#params_21","text":"Param Type Notes targets address[] values uint256[] signatures string[] datas bytes[] etas uint256[] \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/","text":"\u2b05\ufe0f Contracts FeiTimedMinter FeiTimedMinter a contract which mints FEI to a target address on a timed cadence Events BufferCapUpdate event BufferCapUpdate(uint256,uint256) Params Param Type Notes oldBufferCap uint256 newBufferCap uint256 BufferUsed event BufferUsed(uint256,uint256) Params Param Type Notes amountUsed uint256 bufferRemaining uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 FeiMinting event FeiMinting(address,uint256) Params Param Type Notes caller indexed address feiAmount uint256 IncentiveUpdate event IncentiveUpdate(uint256,uint256) Params Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256 MintAmountUpdate event MintAmountUpdate(uint256,uint256) Params Param Type Notes oldMintAmount uint256 newMintAmount uint256 Paused event Paused(address) Params Param Type Notes account address RateLimitPerSecondUpdate event RateLimitPerSecondUpdate(uint256,uint256) Params Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256 TargetUpdate event TargetUpdate(address,address) Params Param Type Notes oldTarget address newTarget address TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 MAX_MINT_FREQUENCY function MAX_MINT_FREQUENCY() view returns(uint256) least frequent that mints can happen Returns Param Type Notes uint256 MAX_RATE_LIMIT_PER_SECOND function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract Returns Param Type Notes uint256 MIN_MINT_FREQUENCY function MIN_MINT_FREQUENCY() view returns(uint256) most frequent that mints can happen Returns Param Type Notes uint256 buffer function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap Returns Param Type Notes uint256 bufferCap function bufferCap() view returns(uint256) the cap of the buffer that can be used at once Returns Param Type Notes uint256 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address doPartialAction function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount Returns Param Type Notes bool duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 incentiveAmount function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool lastBufferUsedTime function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract Returns Param Type Notes uint256 mint function mint() nonpayable triggers a minting of FEI timed and incentivized mintAmount function mintAmount() view returns(uint256) Returns Param Type Notes uint256 pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool rateLimitPerSecond function rateLimitPerSecond() view returns(uint256) the rate per second for this contract Returns Param Type Notes uint256 remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setBufferCap function setBufferCap(uint256) nonpayable set the buffer cap Params Param Type Notes newBufferCap uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setFrequency function setFrequency(uint256) nonpayable set the mint frequency Params Param Type Notes newFrequency uint256 setIncentiveAmount function setIncentiveAmount(uint256) nonpayable set the incentiveAmount Params Param Type Notes newIncentiveAmount uint256 setMintAmount function setMintAmount(uint256) nonpayable Params Param Type Notes newMintAmount uint256 setRateLimitPerSecond function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second Params Param Type Notes newRateLimitPerSecond uint256 setTarget function setTarget(address) nonpayable set the new FEI target Params Param Type Notes newTarget address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 target function target() view returns(address) the target receiving minted FEI Returns Param Type Notes address timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"FeiTimedMinter"},{"location":"developers/contracts/FeiTimedMinter/#feitimedminter","text":"FeiTimedMinter a contract which mints FEI to a target address on a timed cadence","title":"FeiTimedMinter"},{"location":"developers/contracts/FeiTimedMinter/#events","text":"","title":"Events"},{"location":"developers/contracts/FeiTimedMinter/#buffercapupdate","text":"event BufferCapUpdate(uint256,uint256)","title":"BufferCapUpdate"},{"location":"developers/contracts/FeiTimedMinter/#params","text":"Param Type Notes oldBufferCap uint256 newBufferCap uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#bufferused","text":"event BufferUsed(uint256,uint256)","title":"BufferUsed"},{"location":"developers/contracts/FeiTimedMinter/#params_1","text":"Param Type Notes amountUsed uint256 bufferRemaining uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/FeiTimedMinter/#params_2","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/FeiTimedMinter/#params_3","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/FeiTimedMinter/#params_4","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#feiminting","text":"event FeiMinting(address,uint256)","title":"FeiMinting"},{"location":"developers/contracts/FeiTimedMinter/#params_5","text":"Param Type Notes caller indexed address feiAmount uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#incentiveupdate","text":"event IncentiveUpdate(uint256,uint256)","title":"IncentiveUpdate"},{"location":"developers/contracts/FeiTimedMinter/#params_6","text":"Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#mintamountupdate","text":"event MintAmountUpdate(uint256,uint256)","title":"MintAmountUpdate"},{"location":"developers/contracts/FeiTimedMinter/#params_7","text":"Param Type Notes oldMintAmount uint256 newMintAmount uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/FeiTimedMinter/#params_8","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#ratelimitpersecondupdate","text":"event RateLimitPerSecondUpdate(uint256,uint256)","title":"RateLimitPerSecondUpdate"},{"location":"developers/contracts/FeiTimedMinter/#params_9","text":"Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#targetupdate","text":"event TargetUpdate(address,address)","title":"TargetUpdate"},{"location":"developers/contracts/FeiTimedMinter/#params_10","text":"Param Type Notes oldTarget address newTarget address","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/FeiTimedMinter/#params_11","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/FeiTimedMinter/#params_12","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#methods","text":"","title":"Methods"},{"location":"developers/contracts/FeiTimedMinter/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/FeiTimedMinter/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#max_mint_frequency","text":"function MAX_MINT_FREQUENCY() view returns(uint256) least frequent that mints can happen","title":"MAX_MINT_FREQUENCY"},{"location":"developers/contracts/FeiTimedMinter/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#max_rate_limit_per_second","text":"function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract","title":"MAX_RATE_LIMIT_PER_SECOND"},{"location":"developers/contracts/FeiTimedMinter/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#min_mint_frequency","text":"function MIN_MINT_FREQUENCY() view returns(uint256) most frequent that mints can happen","title":"MIN_MINT_FREQUENCY"},{"location":"developers/contracts/FeiTimedMinter/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#buffer","text":"function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap","title":"buffer"},{"location":"developers/contracts/FeiTimedMinter/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#buffercap","text":"function bufferCap() view returns(uint256) the cap of the buffer that can be used at once","title":"bufferCap"},{"location":"developers/contracts/FeiTimedMinter/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/FeiTimedMinter/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#dopartialaction","text":"function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount","title":"doPartialAction"},{"location":"developers/contracts/FeiTimedMinter/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/FeiTimedMinter/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/FeiTimedMinter/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/FeiTimedMinter/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#incentiveamount","text":"function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions","title":"incentiveAmount"},{"location":"developers/contracts/FeiTimedMinter/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/FeiTimedMinter/#params_13","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/FeiTimedMinter/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/FeiTimedMinter/#returns_14","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#lastbufferusedtime","text":"function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract","title":"lastBufferUsedTime"},{"location":"developers/contracts/FeiTimedMinter/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#mint","text":"function mint() nonpayable triggers a minting of FEI timed and incentivized","title":"mint"},{"location":"developers/contracts/FeiTimedMinter/#mintamount","text":"function mintAmount() view returns(uint256)","title":"mintAmount"},{"location":"developers/contracts/FeiTimedMinter/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/FeiTimedMinter/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/FeiTimedMinter/#returns_17","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#ratelimitpersecond","text":"function rateLimitPerSecond() view returns(uint256) the rate per second for this contract","title":"rateLimitPerSecond"},{"location":"developers/contracts/FeiTimedMinter/#returns_18","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/FeiTimedMinter/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#setbuffercap","text":"function setBufferCap(uint256) nonpayable set the buffer cap","title":"setBufferCap"},{"location":"developers/contracts/FeiTimedMinter/#params_14","text":"Param Type Notes newBufferCap uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/FeiTimedMinter/#params_15","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/FeiTimedMinter/#params_16","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#setfrequency","text":"function setFrequency(uint256) nonpayable set the mint frequency","title":"setFrequency"},{"location":"developers/contracts/FeiTimedMinter/#params_17","text":"Param Type Notes newFrequency uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#setincentiveamount","text":"function setIncentiveAmount(uint256) nonpayable set the incentiveAmount","title":"setIncentiveAmount"},{"location":"developers/contracts/FeiTimedMinter/#params_18","text":"Param Type Notes newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#setmintamount","text":"function setMintAmount(uint256) nonpayable","title":"setMintAmount"},{"location":"developers/contracts/FeiTimedMinter/#params_19","text":"Param Type Notes newMintAmount uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#setratelimitpersecond","text":"function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second","title":"setRateLimitPerSecond"},{"location":"developers/contracts/FeiTimedMinter/#params_20","text":"Param Type Notes newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#settarget","text":"function setTarget(address) nonpayable set the new FEI target","title":"setTarget"},{"location":"developers/contracts/FeiTimedMinter/#params_21","text":"Param Type Notes newTarget address","title":"Params"},{"location":"developers/contracts/FeiTimedMinter/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/FeiTimedMinter/#returns_20","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#target","text":"function target() view returns(address) the target receiving minted FEI","title":"target"},{"location":"developers/contracts/FeiTimedMinter/#returns_21","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/FeiTimedMinter/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/FeiTimedMinter/#returns_23","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/FeiTimedMinter/#returns_24","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/FeiTimedMinter/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/GovernorTimelockCompound/","text":"GovernorTimelockCompound DEV NOTE: Extension of {Governor} that binds the execution process to a Compound Timelock. This adds a delay, enforced by the external timelock to all successful proposal (in addition to the voting duration). The {Governor} needs to be the admin of the timelock for any operation to be performed. A public, unrestricted, {GovernorTimelockCompound-__acceptAdmin} is available to accept ownership of the timelock. Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus, the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be inaccessible. Available since v4.3. Events ProposalCanceled event ProposalCanceled(uint256) Params Param Type Notes proposalId uint256 ProposalCreated event ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string) Params Param Type Notes proposalId uint256 proposer address targets address[] values uint256[] signatures string[] calldatas bytes[] startBlock uint256 endBlock uint256 description string ProposalExecuted event ProposalExecuted(uint256) Params Param Type Notes proposalId uint256 ProposalQueued event ProposalQueued(uint256,uint256) Params Param Type Notes proposalId uint256 eta uint256 TimelockChange event TimelockChange(address,address) Params Param Type Notes oldTimelock address newTimelock address VoteCast event VoteCast(address,uint256,uint8,uint256,string) Params Param Type Notes voter indexed address proposalId uint256 support uint8 weight uint256 reason string Methods BALLOT_TYPEHASH function BALLOT_TYPEHASH() view returns(bytes32) Returns Param Type Notes bytes32 COUNTING_MODE function COUNTING_MODE() pure returns(string) module:voting A description of the possible support values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example support=bravo&quorum=for,abstain . There are 2 standard keys: support and quorum . - support=bravo refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in GovernorBravo . - quorum=bravo means that only For votes are counted towards quorum. - quorum=for,abstain means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[ URLSearchParams ] JavaScript class. Returns Param Type Notes string __acceptAdmin function __acceptAdmin() nonpayable Accept admin right over the timelock. castVote function castVote(uint256,uint8) nonpayable returns(uint256) See {IGovernor-castVote}. Params Param Type Notes proposalId uint256 support uint8 Returns Param Type Notes uint256 castVoteBySig function castVoteBySig(uint256,uint8,uint8,bytes32,bytes32) nonpayable returns(uint256) See {IGovernor-castVoteBySig}. Params Param Type Notes proposalId uint256 support uint8 v uint8 r bytes32 s bytes32 Returns Param Type Notes uint256 castVoteWithReason function castVoteWithReason(uint256,uint8,string) nonpayable returns(uint256) See {IGovernor-castVoteWithReason}. Params Param Type Notes proposalId uint256 support uint8 reason string Returns Param Type Notes uint256 execute function execute(address[],uint256[],bytes[],bytes32) payable returns(uint256) See {IGovernor-execute}. Params Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32 Returns Param Type Notes uint256 getVotes function getVotes(address,uint256) view returns(uint256) module:reputation Voting power of an account at a specific blockNumber . Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens. Params Param Type Notes account address blockNumber uint256 Returns Param Type Notes uint256 hasVoted function hasVoted(uint256,address) view returns(bool) module:voting Returns weither account has cast a vote on proposalId . Params Param Type Notes proposalId uint256 account address Returns Param Type Notes bool hashProposal function hashProposal(address[],uint256[],bytes[],bytes32) pure returns(uint256) See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded targets array, the values array, the calldatas array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts. Params Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32 Returns Param Type Notes uint256 name function name() view returns(string) See {IGovernor-name}. Returns Param Type Notes string proposalDeadline function proposalDeadline(uint256) view returns(uint256) See {IGovernor-proposalDeadline}. Params Param Type Notes proposalId uint256 Returns Param Type Notes uint256 proposalEta function proposalEta(uint256) view returns(uint256) Public accessor to check the eta of a queued proposal Params Param Type Notes proposalId uint256 Returns Param Type Notes uint256 proposalSnapshot function proposalSnapshot(uint256) view returns(uint256) See {IGovernor-proposalSnapshot}. Params Param Type Notes proposalId uint256 Returns Param Type Notes uint256 proposalThreshold function proposalThreshold() view returns(uint256) Part of the Governor Bravo's interface: \"The number of votes required in order for a voter to become a proposer\" . Returns Param Type Notes uint256 propose function propose(address[],uint256[],bytes[],string) nonpayable returns(uint256) See {IGovernor-propose}. Params Param Type Notes targets address[] values uint256[] calldatas bytes[] description string Returns Param Type Notes uint256 queue function queue(address[],uint256[],bytes[],bytes32) nonpayable returns(uint256) Function to queue a proposal to the timelock. Params Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32 Returns Param Type Notes uint256 quorum function quorum(uint256) view returns(uint256) module:user-config Minimum number of cast voted required for a proposal to be successful. Note: The blockNumber parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}). Params Param Type Notes blockNumber uint256 Returns Param Type Notes uint256 state function state(uint256) view returns(uint8) Overriden version of the {Governor-state} function with added support for the Queued and Expired status. Params Param Type Notes proposalId uint256 Returns Param Type Notes uint8 supportsInterface function supportsInterface(bytes4) view returns(bool) See {IERC165-supportsInterface}. Params Param Type Notes interfaceId bytes4 Returns Param Type Notes bool timelock function timelock() view returns(address) Public accessor to check the address of the timelock Returns Param Type Notes address updateTimelock function updateTimelock(address) nonpayable Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow. For security reason, the timelock must be handed over to another admin before setting up a new one. The two operations (hand over the timelock) and do the update can be batched in a single proposal. Note that if the timelock admin has been handed over in a previous operation, we refuse updates made through the timelock if admin of the timelock has already been accepted and the operation is executed outside the scope of governance. Params Param Type Notes newTimelock address version function version() view returns(string) See {IGovernor-version}. Returns Param Type Notes string votingDelay function votingDelay() view returns(uint256) module:user-config Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts. Returns Param Type Notes uint256 votingPeriod function votingPeriod() view returns(uint256) module:user-config Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay. Returns Param Type Notes uint256","title":"GovernorTimelockCompound"},{"location":"developers/contracts/GovernorTimelockCompound/#governortimelockcompound","text":"DEV NOTE: Extension of {Governor} that binds the execution process to a Compound Timelock. This adds a delay, enforced by the external timelock to all successful proposal (in addition to the voting duration). The {Governor} needs to be the admin of the timelock for any operation to be performed. A public, unrestricted, {GovernorTimelockCompound-__acceptAdmin} is available to accept ownership of the timelock. Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus, the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be inaccessible. Available since v4.3.","title":"GovernorTimelockCompound"},{"location":"developers/contracts/GovernorTimelockCompound/#events","text":"","title":"Events"},{"location":"developers/contracts/GovernorTimelockCompound/#proposalcanceled","text":"event ProposalCanceled(uint256)","title":"ProposalCanceled"},{"location":"developers/contracts/GovernorTimelockCompound/#params","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#proposalcreated","text":"event ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)","title":"ProposalCreated"},{"location":"developers/contracts/GovernorTimelockCompound/#params_1","text":"Param Type Notes proposalId uint256 proposer address targets address[] values uint256[] signatures string[] calldatas bytes[] startBlock uint256 endBlock uint256 description string","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#proposalexecuted","text":"event ProposalExecuted(uint256)","title":"ProposalExecuted"},{"location":"developers/contracts/GovernorTimelockCompound/#params_2","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#proposalqueued","text":"event ProposalQueued(uint256,uint256)","title":"ProposalQueued"},{"location":"developers/contracts/GovernorTimelockCompound/#params_3","text":"Param Type Notes proposalId uint256 eta uint256","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#timelockchange","text":"event TimelockChange(address,address)","title":"TimelockChange"},{"location":"developers/contracts/GovernorTimelockCompound/#params_4","text":"Param Type Notes oldTimelock address newTimelock address","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#votecast","text":"event VoteCast(address,uint256,uint8,uint256,string)","title":"VoteCast"},{"location":"developers/contracts/GovernorTimelockCompound/#params_5","text":"Param Type Notes voter indexed address proposalId uint256 support uint8 weight uint256 reason string","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#methods","text":"","title":"Methods"},{"location":"developers/contracts/GovernorTimelockCompound/#ballot_typehash","text":"function BALLOT_TYPEHASH() view returns(bytes32)","title":"BALLOT_TYPEHASH"},{"location":"developers/contracts/GovernorTimelockCompound/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#counting_mode","text":"function COUNTING_MODE() pure returns(string) module:voting A description of the possible support values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example support=bravo&quorum=for,abstain . There are 2 standard keys: support and quorum . - support=bravo refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in GovernorBravo . - quorum=bravo means that only For votes are counted towards quorum. - quorum=for,abstain means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[ URLSearchParams ] JavaScript class.","title":"COUNTING_MODE"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_1","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#__acceptadmin","text":"function __acceptAdmin() nonpayable Accept admin right over the timelock.","title":"__acceptAdmin"},{"location":"developers/contracts/GovernorTimelockCompound/#castvote","text":"function castVote(uint256,uint8) nonpayable returns(uint256) See {IGovernor-castVote}.","title":"castVote"},{"location":"developers/contracts/GovernorTimelockCompound/#params_6","text":"Param Type Notes proposalId uint256 support uint8","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#castvotebysig","text":"function castVoteBySig(uint256,uint8,uint8,bytes32,bytes32) nonpayable returns(uint256) See {IGovernor-castVoteBySig}.","title":"castVoteBySig"},{"location":"developers/contracts/GovernorTimelockCompound/#params_7","text":"Param Type Notes proposalId uint256 support uint8 v uint8 r bytes32 s bytes32","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#castvotewithreason","text":"function castVoteWithReason(uint256,uint8,string) nonpayable returns(uint256) See {IGovernor-castVoteWithReason}.","title":"castVoteWithReason"},{"location":"developers/contracts/GovernorTimelockCompound/#params_8","text":"Param Type Notes proposalId uint256 support uint8 reason string","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#execute","text":"function execute(address[],uint256[],bytes[],bytes32) payable returns(uint256) See {IGovernor-execute}.","title":"execute"},{"location":"developers/contracts/GovernorTimelockCompound/#params_9","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#getvotes","text":"function getVotes(address,uint256) view returns(uint256) module:reputation Voting power of an account at a specific blockNumber . Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens.","title":"getVotes"},{"location":"developers/contracts/GovernorTimelockCompound/#params_10","text":"Param Type Notes account address blockNumber uint256","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#hasvoted","text":"function hasVoted(uint256,address) view returns(bool) module:voting Returns weither account has cast a vote on proposalId .","title":"hasVoted"},{"location":"developers/contracts/GovernorTimelockCompound/#params_11","text":"Param Type Notes proposalId uint256 account address","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#hashproposal","text":"function hashProposal(address[],uint256[],bytes[],bytes32) pure returns(uint256) See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded targets array, the values array, the calldatas array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts.","title":"hashProposal"},{"location":"developers/contracts/GovernorTimelockCompound/#params_12","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#name","text":"function name() view returns(string) See {IGovernor-name}.","title":"name"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_9","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#proposaldeadline","text":"function proposalDeadline(uint256) view returns(uint256) See {IGovernor-proposalDeadline}.","title":"proposalDeadline"},{"location":"developers/contracts/GovernorTimelockCompound/#params_13","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#proposaleta","text":"function proposalEta(uint256) view returns(uint256) Public accessor to check the eta of a queued proposal","title":"proposalEta"},{"location":"developers/contracts/GovernorTimelockCompound/#params_14","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#proposalsnapshot","text":"function proposalSnapshot(uint256) view returns(uint256) See {IGovernor-proposalSnapshot}.","title":"proposalSnapshot"},{"location":"developers/contracts/GovernorTimelockCompound/#params_15","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#proposalthreshold","text":"function proposalThreshold() view returns(uint256) Part of the Governor Bravo's interface: \"The number of votes required in order for a voter to become a proposer\" .","title":"proposalThreshold"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#propose","text":"function propose(address[],uint256[],bytes[],string) nonpayable returns(uint256) See {IGovernor-propose}.","title":"propose"},{"location":"developers/contracts/GovernorTimelockCompound/#params_16","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] description string","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#queue","text":"function queue(address[],uint256[],bytes[],bytes32) nonpayable returns(uint256) Function to queue a proposal to the timelock.","title":"queue"},{"location":"developers/contracts/GovernorTimelockCompound/#params_17","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#quorum","text":"function quorum(uint256) view returns(uint256) module:user-config Minimum number of cast voted required for a proposal to be successful. Note: The blockNumber parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).","title":"quorum"},{"location":"developers/contracts/GovernorTimelockCompound/#params_18","text":"Param Type Notes blockNumber uint256","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#state","text":"function state(uint256) view returns(uint8) Overriden version of the {Governor-state} function with added support for the Queued and Expired status.","title":"state"},{"location":"developers/contracts/GovernorTimelockCompound/#params_19","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_17","text":"Param Type Notes uint8","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#supportsinterface","text":"function supportsInterface(bytes4) view returns(bool) See {IERC165-supportsInterface}.","title":"supportsInterface"},{"location":"developers/contracts/GovernorTimelockCompound/#params_20","text":"Param Type Notes interfaceId bytes4","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_18","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#timelock","text":"function timelock() view returns(address) Public accessor to check the address of the timelock","title":"timelock"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_19","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#updatetimelock","text":"function updateTimelock(address) nonpayable Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled and executed using the {Governor} workflow. For security reason, the timelock must be handed over to another admin before setting up a new one. The two operations (hand over the timelock) and do the update can be batched in a single proposal. Note that if the timelock admin has been handed over in a previous operation, we refuse updates made through the timelock if admin of the timelock has already been accepted and the operation is executed outside the scope of governance.","title":"updateTimelock"},{"location":"developers/contracts/GovernorTimelockCompound/#params_21","text":"Param Type Notes newTimelock address","title":"Params"},{"location":"developers/contracts/GovernorTimelockCompound/#version","text":"function version() view returns(string) See {IGovernor-version}.","title":"version"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_20","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#votingdelay","text":"function votingDelay() view returns(uint256) module:user-config Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.","title":"votingDelay"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_21","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/GovernorTimelockCompound/#votingperiod","text":"function votingPeriod() view returns(uint256) module:user-config Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay.","title":"votingPeriod"},{"location":"developers/contracts/GovernorTimelockCompound/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IAaveIncentivesController/","text":"\u2b05\ufe0f Contracts IAaveIncentivesController Events AssetConfigUpdated event AssetConfigUpdated(address,uint256) Params Param Type Notes asset indexed address emission uint256 AssetIndexUpdated event AssetIndexUpdated(address,uint256) Params Param Type Notes asset indexed address index uint256 ClaimerSet event ClaimerSet(address,address) Params Param Type Notes user indexed address claimer indexed address DistributionEndUpdated event DistributionEndUpdated(uint256) Params Param Type Notes newDistributionEnd uint256 RewardsAccrued event RewardsAccrued(address,uint256) Params Param Type Notes user indexed address amount uint256 RewardsClaimed event RewardsClaimed(address,address,address,uint256) Params Param Type Notes user indexed address to indexed address claimer indexed address amount uint256 UserIndexUpdated event UserIndexUpdated(address,address,uint256) Params Param Type Notes user indexed address asset indexed address index uint256 Methods DISTRIBUTION_END function DISTRIBUTION_END() view returns(uint256) for backwards compatibility with the previous DistributionManager used Returns Param Type Notes uint256 REWARD_TOKEN function REWARD_TOKEN() view returns(address) for backward compatibility with previous implementation of the Incentives controller Returns Param Type Notes address claimRewards function claimRewards(address[],uint256,address) nonpayable returns(uint256) Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards Params Param Type Notes assets address[] amount uint256 Amount of rewards to claim to address Address that will be receiving the rewards Returns Param Type Notes uint256 claimRewardsOnBehalf function claimRewardsOnBehalf(address[],uint256,address,address) nonpayable returns(uint256) Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager Params Param Type Notes assets address[] amount uint256 Amount of rewards to claim user address Address to check and claim rewards to address Address that will be receiving the rewards Returns Param Type Notes uint256 configureAssets function configureAssets(address[],uint256[]) nonpayable Configure assets for a certain rewards emission Params Param Type Notes assets address[] The assets to incentivize emissionsPerSecond uint256[] The emission for each asset getAssetData function getAssetData(address) view returns(uint256,uint256,uint256) Returns the configuration of the distribution for a certain asset Params Param Type Notes asset address The address of the reference asset of the distribution Returns Param Type Notes uint256 uint256 uint256 getClaimer function getClaimer(address) view returns(address) Returns the whitelisted claimer for a certain address (0x0 if not set) Params Param Type Notes user address The address of the user Returns Param Type Notes address getDistributionEnd function getDistributionEnd() view returns(uint256) Gets the end date for the distribution Returns Param Type Notes uint256 getRewardsBalance function getRewardsBalance(address[],address) view returns(uint256) Returns the total of rewards of an user, already accrued + not yet accrued Params Param Type Notes assets address[] user address The address of the user Returns Param Type Notes uint256 getUserAssetData function getUserAssetData(address,address) view returns(uint256) Returns the data of an user on a distribution Params Param Type Notes user address Address of the user asset address The address of the reference asset of the distribution Returns Param Type Notes uint256 getUserUnclaimedRewards function getUserUnclaimedRewards(address) view returns(uint256) returns the unclaimed rewards of the user Params Param Type Notes user address the address of the user Returns Param Type Notes uint256 handleAction function handleAction(address,uint256,uint256) nonpayable Called by the corresponding asset on any update that affects the rewards distribution Params Param Type Notes asset address The address of the user userBalance uint256 The balance of the user of the asset in the lending pool totalSupply uint256 The total supply of the asset in the lending pool* setClaimer function setClaimer(address,address) nonpayable Whitelists an address to claim the rewards on behalf of another address Params Param Type Notes user address The address of the user claimer address The address of the claimer setDistributionEnd function setDistributionEnd(uint256) nonpayable Sets the end date for the distribution Params Param Type Notes distributionEnd uint256 The end date timestamp* \u2b05\ufe0f Contracts","title":"IAaveIncentivesController"},{"location":"developers/contracts/IAaveIncentivesController/#iaaveincentivescontroller","text":"","title":"IAaveIncentivesController"},{"location":"developers/contracts/IAaveIncentivesController/#events","text":"","title":"Events"},{"location":"developers/contracts/IAaveIncentivesController/#assetconfigupdated","text":"event AssetConfigUpdated(address,uint256)","title":"AssetConfigUpdated"},{"location":"developers/contracts/IAaveIncentivesController/#params","text":"Param Type Notes asset indexed address emission uint256","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#assetindexupdated","text":"event AssetIndexUpdated(address,uint256)","title":"AssetIndexUpdated"},{"location":"developers/contracts/IAaveIncentivesController/#params_1","text":"Param Type Notes asset indexed address index uint256","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#claimerset","text":"event ClaimerSet(address,address)","title":"ClaimerSet"},{"location":"developers/contracts/IAaveIncentivesController/#params_2","text":"Param Type Notes user indexed address claimer indexed address","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#distributionendupdated","text":"event DistributionEndUpdated(uint256)","title":"DistributionEndUpdated"},{"location":"developers/contracts/IAaveIncentivesController/#params_3","text":"Param Type Notes newDistributionEnd uint256","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#rewardsaccrued","text":"event RewardsAccrued(address,uint256)","title":"RewardsAccrued"},{"location":"developers/contracts/IAaveIncentivesController/#params_4","text":"Param Type Notes user indexed address amount uint256","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#rewardsclaimed","text":"event RewardsClaimed(address,address,address,uint256)","title":"RewardsClaimed"},{"location":"developers/contracts/IAaveIncentivesController/#params_5","text":"Param Type Notes user indexed address to indexed address claimer indexed address amount uint256","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#userindexupdated","text":"event UserIndexUpdated(address,address,uint256)","title":"UserIndexUpdated"},{"location":"developers/contracts/IAaveIncentivesController/#params_6","text":"Param Type Notes user indexed address asset indexed address index uint256","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IAaveIncentivesController/#distribution_end","text":"function DISTRIBUTION_END() view returns(uint256) for backwards compatibility with the previous DistributionManager used","title":"DISTRIBUTION_END"},{"location":"developers/contracts/IAaveIncentivesController/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IAaveIncentivesController/#reward_token","text":"function REWARD_TOKEN() view returns(address) for backward compatibility with previous implementation of the Incentives controller","title":"REWARD_TOKEN"},{"location":"developers/contracts/IAaveIncentivesController/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IAaveIncentivesController/#claimrewards","text":"function claimRewards(address[],uint256,address) nonpayable returns(uint256) Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards","title":"claimRewards"},{"location":"developers/contracts/IAaveIncentivesController/#params_7","text":"Param Type Notes assets address[] amount uint256 Amount of rewards to claim to address Address that will be receiving the rewards","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IAaveIncentivesController/#claimrewardsonbehalf","text":"function claimRewardsOnBehalf(address[],uint256,address,address) nonpayable returns(uint256) Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager","title":"claimRewardsOnBehalf"},{"location":"developers/contracts/IAaveIncentivesController/#params_8","text":"Param Type Notes assets address[] amount uint256 Amount of rewards to claim user address Address to check and claim rewards to address Address that will be receiving the rewards","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IAaveIncentivesController/#configureassets","text":"function configureAssets(address[],uint256[]) nonpayable Configure assets for a certain rewards emission","title":"configureAssets"},{"location":"developers/contracts/IAaveIncentivesController/#params_9","text":"Param Type Notes assets address[] The assets to incentivize emissionsPerSecond uint256[] The emission for each asset","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#getassetdata","text":"function getAssetData(address) view returns(uint256,uint256,uint256) Returns the configuration of the distribution for a certain asset","title":"getAssetData"},{"location":"developers/contracts/IAaveIncentivesController/#params_10","text":"Param Type Notes asset address The address of the reference asset of the distribution","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#returns_4","text":"Param Type Notes uint256 uint256 uint256","title":"Returns"},{"location":"developers/contracts/IAaveIncentivesController/#getclaimer","text":"function getClaimer(address) view returns(address) Returns the whitelisted claimer for a certain address (0x0 if not set)","title":"getClaimer"},{"location":"developers/contracts/IAaveIncentivesController/#params_11","text":"Param Type Notes user address The address of the user","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IAaveIncentivesController/#getdistributionend","text":"function getDistributionEnd() view returns(uint256) Gets the end date for the distribution","title":"getDistributionEnd"},{"location":"developers/contracts/IAaveIncentivesController/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IAaveIncentivesController/#getrewardsbalance","text":"function getRewardsBalance(address[],address) view returns(uint256) Returns the total of rewards of an user, already accrued + not yet accrued","title":"getRewardsBalance"},{"location":"developers/contracts/IAaveIncentivesController/#params_12","text":"Param Type Notes assets address[] user address The address of the user","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IAaveIncentivesController/#getuserassetdata","text":"function getUserAssetData(address,address) view returns(uint256) Returns the data of an user on a distribution","title":"getUserAssetData"},{"location":"developers/contracts/IAaveIncentivesController/#params_13","text":"Param Type Notes user address Address of the user asset address The address of the reference asset of the distribution","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IAaveIncentivesController/#getuserunclaimedrewards","text":"function getUserUnclaimedRewards(address) view returns(uint256) returns the unclaimed rewards of the user","title":"getUserUnclaimedRewards"},{"location":"developers/contracts/IAaveIncentivesController/#params_14","text":"Param Type Notes user address the address of the user","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IAaveIncentivesController/#handleaction","text":"function handleAction(address,uint256,uint256) nonpayable Called by the corresponding asset on any update that affects the rewards distribution","title":"handleAction"},{"location":"developers/contracts/IAaveIncentivesController/#params_15","text":"Param Type Notes asset address The address of the user userBalance uint256 The balance of the user of the asset in the lending pool totalSupply uint256 The total supply of the asset in the lending pool*","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#setclaimer","text":"function setClaimer(address,address) nonpayable Whitelists an address to claim the rewards on behalf of another address","title":"setClaimer"},{"location":"developers/contracts/IAaveIncentivesController/#params_16","text":"Param Type Notes user address The address of the user claimer address The address of the claimer","title":"Params"},{"location":"developers/contracts/IAaveIncentivesController/#setdistributionend","text":"function setDistributionEnd(uint256) nonpayable Sets the end date for the distribution","title":"setDistributionEnd"},{"location":"developers/contracts/IAaveIncentivesController/#params_17","text":"Param Type Notes distributionEnd uint256 The end date timestamp* \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/IAutoRewardsDistributor/","text":"\u2b05\ufe0f Contracts IAutoRewardsDistributor Methods setAutoRewardsDistribution function setAutoRewardsDistribution() nonpayable \u2b05\ufe0f Contracts","title":"IAutoRewardsDistributor"},{"location":"developers/contracts/IAutoRewardsDistributor/#iautorewardsdistributor","text":"","title":"IAutoRewardsDistributor"},{"location":"developers/contracts/IAutoRewardsDistributor/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IAutoRewardsDistributor/#setautorewardsdistribution","text":"function setAutoRewardsDistribution() nonpayable \u2b05\ufe0f Contracts","title":"setAutoRewardsDistribution"},{"location":"developers/contracts/IBondingCurve/","text":"IBondingCurve Events BufferUpdate event BufferUpdate(uint256,uint256) Params Param Type Notes oldBuffer uint256 newBuffer uint256 DiscountUpdate event DiscountUpdate(uint256,uint256) Params Param Type Notes oldDiscount uint256 newDiscount uint256 MintCapUpdate event MintCapUpdate(uint256,uint256) Params Param Type Notes oldMint uint256 newMint uint256 Purchase event Purchase(address,uint256,uint256) Params Param Type Notes to indexed address amountIn uint256 amountOut uint256 Reset event Reset(uint256) Params Param Type Notes oldTotalPurchased uint256 ScaleUpdate event ScaleUpdate(uint256,uint256) Params Param Type Notes oldScale uint256 newScale uint256 Methods allocate function allocate() nonpayable atScale function atScale() view returns(bool) Returns Param Type Notes bool availableToMint function availableToMint() view returns(uint256) Returns Param Type Notes uint256 buffer function buffer() view returns(uint256) Returns Param Type Notes uint256 discount function discount() view returns(uint256) Returns Param Type Notes uint256 getAmountOut function getAmountOut(uint256) view returns(uint256) Params Param Type Notes amountIn uint256 Returns Param Type Notes amountOut uint256 getCurrentPrice function getCurrentPrice() view returns(tuple) Returns Param Type Notes tuple mintCap function mintCap() view returns(uint256) Returns Param Type Notes uint256 purchase function purchase(address,uint256) payable returns(uint256) Params Param Type Notes to address amountIn uint256 Returns Param Type Notes amountOut uint256 reset function reset() nonpayable scale function scale() view returns(uint256) Returns Param Type Notes uint256 setBuffer function setBuffer(uint256) nonpayable Params Param Type Notes newBuffer uint256 setDiscount function setDiscount(uint256) nonpayable Params Param Type Notes newDiscount uint256 setIncentiveFrequency function setIncentiveFrequency(uint256) nonpayable Params Param Type Notes newFrequency uint256 setMintCap function setMintCap(uint256) nonpayable Params Param Type Notes newMintCap uint256 setScale function setScale(uint256) nonpayable Params Param Type Notes newScale uint256 token function token() view returns(address) Returns Param Type Notes address totalPurchased function totalPurchased() view returns(uint256) Returns Param Type Notes uint256","title":"IBondingCurve"},{"location":"developers/contracts/IBondingCurve/#ibondingcurve","text":"","title":"IBondingCurve"},{"location":"developers/contracts/IBondingCurve/#events","text":"","title":"Events"},{"location":"developers/contracts/IBondingCurve/#bufferupdate","text":"event BufferUpdate(uint256,uint256)","title":"BufferUpdate"},{"location":"developers/contracts/IBondingCurve/#params","text":"Param Type Notes oldBuffer uint256 newBuffer uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#discountupdate","text":"event DiscountUpdate(uint256,uint256)","title":"DiscountUpdate"},{"location":"developers/contracts/IBondingCurve/#params_1","text":"Param Type Notes oldDiscount uint256 newDiscount uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#mintcapupdate","text":"event MintCapUpdate(uint256,uint256)","title":"MintCapUpdate"},{"location":"developers/contracts/IBondingCurve/#params_2","text":"Param Type Notes oldMint uint256 newMint uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#purchase","text":"event Purchase(address,uint256,uint256)","title":"Purchase"},{"location":"developers/contracts/IBondingCurve/#params_3","text":"Param Type Notes to indexed address amountIn uint256 amountOut uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#reset","text":"event Reset(uint256)","title":"Reset"},{"location":"developers/contracts/IBondingCurve/#params_4","text":"Param Type Notes oldTotalPurchased uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#scaleupdate","text":"event ScaleUpdate(uint256,uint256)","title":"ScaleUpdate"},{"location":"developers/contracts/IBondingCurve/#params_5","text":"Param Type Notes oldScale uint256 newScale uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IBondingCurve/#allocate","text":"function allocate() nonpayable","title":"allocate"},{"location":"developers/contracts/IBondingCurve/#atscale","text":"function atScale() view returns(bool)","title":"atScale"},{"location":"developers/contracts/IBondingCurve/#returns","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/IBondingCurve/#availabletomint","text":"function availableToMint() view returns(uint256)","title":"availableToMint"},{"location":"developers/contracts/IBondingCurve/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IBondingCurve/#buffer","text":"function buffer() view returns(uint256)","title":"buffer"},{"location":"developers/contracts/IBondingCurve/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IBondingCurve/#discount","text":"function discount() view returns(uint256)","title":"discount"},{"location":"developers/contracts/IBondingCurve/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IBondingCurve/#getamountout","text":"function getAmountOut(uint256) view returns(uint256)","title":"getAmountOut"},{"location":"developers/contracts/IBondingCurve/#params_6","text":"Param Type Notes amountIn uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#returns_4","text":"Param Type Notes amountOut uint256","title":"Returns"},{"location":"developers/contracts/IBondingCurve/#getcurrentprice","text":"function getCurrentPrice() view returns(tuple)","title":"getCurrentPrice"},{"location":"developers/contracts/IBondingCurve/#returns_5","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/IBondingCurve/#mintcap","text":"function mintCap() view returns(uint256)","title":"mintCap"},{"location":"developers/contracts/IBondingCurve/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IBondingCurve/#purchase_1","text":"function purchase(address,uint256) payable returns(uint256)","title":"purchase"},{"location":"developers/contracts/IBondingCurve/#params_7","text":"Param Type Notes to address amountIn uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#returns_7","text":"Param Type Notes amountOut uint256","title":"Returns"},{"location":"developers/contracts/IBondingCurve/#reset_1","text":"function reset() nonpayable","title":"reset"},{"location":"developers/contracts/IBondingCurve/#scale","text":"function scale() view returns(uint256)","title":"scale"},{"location":"developers/contracts/IBondingCurve/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IBondingCurve/#setbuffer","text":"function setBuffer(uint256) nonpayable","title":"setBuffer"},{"location":"developers/contracts/IBondingCurve/#params_8","text":"Param Type Notes newBuffer uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#setdiscount","text":"function setDiscount(uint256) nonpayable","title":"setDiscount"},{"location":"developers/contracts/IBondingCurve/#params_9","text":"Param Type Notes newDiscount uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#setincentivefrequency","text":"function setIncentiveFrequency(uint256) nonpayable","title":"setIncentiveFrequency"},{"location":"developers/contracts/IBondingCurve/#params_10","text":"Param Type Notes newFrequency uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#setmintcap","text":"function setMintCap(uint256) nonpayable","title":"setMintCap"},{"location":"developers/contracts/IBondingCurve/#params_11","text":"Param Type Notes newMintCap uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#setscale","text":"function setScale(uint256) nonpayable","title":"setScale"},{"location":"developers/contracts/IBondingCurve/#params_12","text":"Param Type Notes newScale uint256","title":"Params"},{"location":"developers/contracts/IBondingCurve/#token","text":"function token() view returns(address)","title":"token"},{"location":"developers/contracts/IBondingCurve/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IBondingCurve/#totalpurchased","text":"function totalPurchased() view returns(uint256)","title":"totalPurchased"},{"location":"developers/contracts/IBondingCurve/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracle/","text":"ICollateralizationOracle Collateralization ratio oracle interface for Fei Protocol Author: Fei Protocol Events Update event Update(uint256) Params Param Type Notes _peg uint256 Methods isOutdated function isOutdated() view returns(bool) Returns Param Type Notes bool isOvercollateralized function isOvercollateralized() view returns(bool) Returns Param Type Notes bool pcvStats function pcvStats() view returns(uint256,uint256,int256,bool) Returns Param Type Notes protocolControlledValue uint256 userCirculatingFei uint256 protocolEquity int256 validityStatus bool read function read() view returns(tuple,bool) Returns Param Type Notes tuple bool update function update() nonpayable","title":"ICollateralizationOracle"},{"location":"developers/contracts/ICollateralizationOracle/#icollateralizationoracle","text":"Collateralization ratio oracle interface for Fei Protocol Author: Fei Protocol","title":"ICollateralizationOracle"},{"location":"developers/contracts/ICollateralizationOracle/#events","text":"","title":"Events"},{"location":"developers/contracts/ICollateralizationOracle/#update","text":"event Update(uint256)","title":"Update"},{"location":"developers/contracts/ICollateralizationOracle/#params","text":"Param Type Notes _peg uint256","title":"Params"},{"location":"developers/contracts/ICollateralizationOracle/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ICollateralizationOracle/#isoutdated","text":"function isOutdated() view returns(bool)","title":"isOutdated"},{"location":"developers/contracts/ICollateralizationOracle/#returns","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracle/#isovercollateralized","text":"function isOvercollateralized() view returns(bool)","title":"isOvercollateralized"},{"location":"developers/contracts/ICollateralizationOracle/#returns_1","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracle/#pcvstats","text":"function pcvStats() view returns(uint256,uint256,int256,bool)","title":"pcvStats"},{"location":"developers/contracts/ICollateralizationOracle/#returns_2","text":"Param Type Notes protocolControlledValue uint256 userCirculatingFei uint256 protocolEquity int256 validityStatus bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracle/#read","text":"function read() view returns(tuple,bool)","title":"read"},{"location":"developers/contracts/ICollateralizationOracle/#returns_3","text":"Param Type Notes tuple bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracle/#update_1","text":"function update() nonpayable","title":"update"},{"location":"developers/contracts/ICollateralizationOracleWrapper/","text":"ICollateralizationOracleWrapper Collateralization ratio oracle interface for Fei Protocol Author: Fei Protocol Events CachedValueUpdate event CachedValueUpdate(address,uint256,uint256,int256) Params Param Type Notes from address protocolControlledValue indexed uint256 userCirculatingFei indexed uint256 protocolEquity indexed int256 CollateralizationOracleUpdate event CollateralizationOracleUpdate(address,address,address) Params Param Type Notes from address oldOracleAddress indexed address newOracleAddress indexed address DeviationThresholdUpdate event DeviationThresholdUpdate(address,uint256,uint256) Params Param Type Notes from address oldThreshold indexed uint256 newThreshold indexed uint256 ReadPauseOverrideUpdate event ReadPauseOverrideUpdate(bool) Params Param Type Notes readPauseOverride bool Update event Update(uint256) Params Param Type Notes _peg uint256 Methods cachedProtocolControlledValue function cachedProtocolControlledValue() view returns(uint256) Returns Param Type Notes uint256 cachedProtocolEquity function cachedProtocolEquity() view returns(int256) Returns Param Type Notes int256 cachedUserCirculatingFei function cachedUserCirculatingFei() view returns(uint256) Returns Param Type Notes uint256 collateralizationOracle function collateralizationOracle() view returns(address) Returns Param Type Notes address deviationThresholdBasisPoints function deviationThresholdBasisPoints() view returns(uint256) Returns Param Type Notes uint256 isExceededDeviationThreshold function isExceededDeviationThreshold() view returns(bool) Returns Param Type Notes bool isOutdated function isOutdated() view returns(bool) Returns Param Type Notes bool isOutdatedOrExceededDeviationThreshold function isOutdatedOrExceededDeviationThreshold() view returns(bool) Returns Param Type Notes bool isOvercollateralized function isOvercollateralized() view returns(bool) Returns Param Type Notes bool pcvStats function pcvStats() view returns(uint256,uint256,int256,bool) Returns Param Type Notes protocolControlledValue uint256 userCirculatingFei uint256 protocolEquity int256 validityStatus bool pcvStatsCurrent function pcvStatsCurrent() view returns(uint256,uint256,int256,bool) Returns Param Type Notes protocolControlledValue uint256 userCirculatingFei uint256 protocolEquity int256 validityStatus bool read function read() view returns(tuple,bool) Returns Param Type Notes tuple bool readPauseOverride function readPauseOverride() view returns(bool) Returns Param Type Notes bool setCache function setCache(uint256,uint256,int256) nonpayable Params Param Type Notes protocolControlledValue uint256 userCirculatingFei uint256 protocolEquity int256 setCollateralizationOracle function setCollateralizationOracle(address) nonpayable Params Param Type Notes _newCollateralizationOracle address setDeviationThresholdBasisPoints function setDeviationThresholdBasisPoints(uint256) nonpayable Params Param Type Notes _newDeviationThresholdBasisPoints uint256 setReadPauseOverride function setReadPauseOverride(bool) nonpayable Params Param Type Notes newReadPauseOverride bool setValidityDuration function setValidityDuration(uint256) nonpayable Params Param Type Notes _validityDuration uint256 update function update() nonpayable updateIfOutdated function updateIfOutdated() nonpayable","title":"ICollateralizationOracleWrapper"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#icollateralizationoraclewrapper","text":"Collateralization ratio oracle interface for Fei Protocol Author: Fei Protocol","title":"ICollateralizationOracleWrapper"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#events","text":"","title":"Events"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#cachedvalueupdate","text":"event CachedValueUpdate(address,uint256,uint256,int256)","title":"CachedValueUpdate"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#params","text":"Param Type Notes from address protocolControlledValue indexed uint256 userCirculatingFei indexed uint256 protocolEquity indexed int256","title":"Params"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#collateralizationoracleupdate","text":"event CollateralizationOracleUpdate(address,address,address)","title":"CollateralizationOracleUpdate"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#params_1","text":"Param Type Notes from address oldOracleAddress indexed address newOracleAddress indexed address","title":"Params"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#deviationthresholdupdate","text":"event DeviationThresholdUpdate(address,uint256,uint256)","title":"DeviationThresholdUpdate"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#params_2","text":"Param Type Notes from address oldThreshold indexed uint256 newThreshold indexed uint256","title":"Params"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#readpauseoverrideupdate","text":"event ReadPauseOverrideUpdate(bool)","title":"ReadPauseOverrideUpdate"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#params_3","text":"Param Type Notes readPauseOverride bool","title":"Params"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#update","text":"event Update(uint256)","title":"Update"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#params_4","text":"Param Type Notes _peg uint256","title":"Params"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#cachedprotocolcontrolledvalue","text":"function cachedProtocolControlledValue() view returns(uint256)","title":"cachedProtocolControlledValue"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#cachedprotocolequity","text":"function cachedProtocolEquity() view returns(int256)","title":"cachedProtocolEquity"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_1","text":"Param Type Notes int256","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#cachedusercirculatingfei","text":"function cachedUserCirculatingFei() view returns(uint256)","title":"cachedUserCirculatingFei"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#collateralizationoracle","text":"function collateralizationOracle() view returns(address)","title":"collateralizationOracle"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#deviationthresholdbasispoints","text":"function deviationThresholdBasisPoints() view returns(uint256)","title":"deviationThresholdBasisPoints"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#isexceededdeviationthreshold","text":"function isExceededDeviationThreshold() view returns(bool)","title":"isExceededDeviationThreshold"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#isoutdated","text":"function isOutdated() view returns(bool)","title":"isOutdated"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#isoutdatedorexceededdeviationthreshold","text":"function isOutdatedOrExceededDeviationThreshold() view returns(bool)","title":"isOutdatedOrExceededDeviationThreshold"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#isovercollateralized","text":"function isOvercollateralized() view returns(bool)","title":"isOvercollateralized"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#pcvstats","text":"function pcvStats() view returns(uint256,uint256,int256,bool)","title":"pcvStats"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_9","text":"Param Type Notes protocolControlledValue uint256 userCirculatingFei uint256 protocolEquity int256 validityStatus bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#pcvstatscurrent","text":"function pcvStatsCurrent() view returns(uint256,uint256,int256,bool)","title":"pcvStatsCurrent"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_10","text":"Param Type Notes protocolControlledValue uint256 userCirculatingFei uint256 protocolEquity int256 validityStatus bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#read","text":"function read() view returns(tuple,bool)","title":"read"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_11","text":"Param Type Notes tuple bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#readpauseoverride","text":"function readPauseOverride() view returns(bool)","title":"readPauseOverride"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#setcache","text":"function setCache(uint256,uint256,int256) nonpayable","title":"setCache"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#params_5","text":"Param Type Notes protocolControlledValue uint256 userCirculatingFei uint256 protocolEquity int256","title":"Params"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#setcollateralizationoracle","text":"function setCollateralizationOracle(address) nonpayable","title":"setCollateralizationOracle"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#params_6","text":"Param Type Notes _newCollateralizationOracle address","title":"Params"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#setdeviationthresholdbasispoints","text":"function setDeviationThresholdBasisPoints(uint256) nonpayable","title":"setDeviationThresholdBasisPoints"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#params_7","text":"Param Type Notes _newDeviationThresholdBasisPoints uint256","title":"Params"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#setreadpauseoverride","text":"function setReadPauseOverride(bool) nonpayable","title":"setReadPauseOverride"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#params_8","text":"Param Type Notes newReadPauseOverride bool","title":"Params"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#setvalidityduration","text":"function setValidityDuration(uint256) nonpayable","title":"setValidityDuration"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#params_9","text":"Param Type Notes _validityDuration uint256","title":"Params"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#update_1","text":"function update() nonpayable","title":"update"},{"location":"developers/contracts/ICollateralizationOracleWrapper/#updateifoutdated","text":"function updateIfOutdated() nonpayable","title":"updateIfOutdated"},{"location":"developers/contracts/ICompoundTimelock/","text":"ICompoundTimelock https://github.com/compound-finance/compound-protocol/blob/master/contracts/Timelock.sol[Compound's timelock] interface Methods GRACE_PERIOD function GRACE_PERIOD() view returns(uint256) Returns Param Type Notes uint256 MAXIMUM_DELAY function MAXIMUM_DELAY() view returns(uint256) Returns Param Type Notes uint256 MINIMUM_DELAY function MINIMUM_DELAY() view returns(uint256) Returns Param Type Notes uint256 acceptAdmin function acceptAdmin() nonpayable admin function admin() view returns(address) Returns Param Type Notes address cancelTransaction function cancelTransaction(address,uint256,string,bytes,uint256) nonpayable Params Param Type Notes target address value uint256 signature string data bytes eta uint256 delay function delay() view returns(uint256) Returns Param Type Notes uint256 executeTransaction function executeTransaction(address,uint256,string,bytes,uint256) payable returns(bytes) Params Param Type Notes target address value uint256 signature string data bytes eta uint256 Returns Param Type Notes bytes pendingAdmin function pendingAdmin() view returns(address) Returns Param Type Notes address queueTransaction function queueTransaction(address,uint256,string,bytes,uint256) nonpayable returns(bytes32) Params Param Type Notes target address value uint256 signature string data bytes eta uint256 Returns Param Type Notes bytes32 queuedTransactions function queuedTransactions(bytes32) view returns(bool) Params Param Type Notes bytes32 Returns Param Type Notes bool setDelay function setDelay(uint256) nonpayable Params Param Type Notes uint256 setPendingAdmin function setPendingAdmin(address) nonpayable Params Param Type Notes address","title":"ICompoundTimelock"},{"location":"developers/contracts/ICompoundTimelock/#icompoundtimelock","text":"https://github.com/compound-finance/compound-protocol/blob/master/contracts/Timelock.sol[Compound's timelock] interface","title":"ICompoundTimelock"},{"location":"developers/contracts/ICompoundTimelock/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ICompoundTimelock/#grace_period","text":"function GRACE_PERIOD() view returns(uint256)","title":"GRACE_PERIOD"},{"location":"developers/contracts/ICompoundTimelock/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ICompoundTimelock/#maximum_delay","text":"function MAXIMUM_DELAY() view returns(uint256)","title":"MAXIMUM_DELAY"},{"location":"developers/contracts/ICompoundTimelock/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ICompoundTimelock/#minimum_delay","text":"function MINIMUM_DELAY() view returns(uint256)","title":"MINIMUM_DELAY"},{"location":"developers/contracts/ICompoundTimelock/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ICompoundTimelock/#acceptadmin","text":"function acceptAdmin() nonpayable","title":"acceptAdmin"},{"location":"developers/contracts/ICompoundTimelock/#admin","text":"function admin() view returns(address)","title":"admin"},{"location":"developers/contracts/ICompoundTimelock/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ICompoundTimelock/#canceltransaction","text":"function cancelTransaction(address,uint256,string,bytes,uint256) nonpayable","title":"cancelTransaction"},{"location":"developers/contracts/ICompoundTimelock/#params","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/ICompoundTimelock/#delay","text":"function delay() view returns(uint256)","title":"delay"},{"location":"developers/contracts/ICompoundTimelock/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ICompoundTimelock/#executetransaction","text":"function executeTransaction(address,uint256,string,bytes,uint256) payable returns(bytes)","title":"executeTransaction"},{"location":"developers/contracts/ICompoundTimelock/#params_1","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/ICompoundTimelock/#returns_5","text":"Param Type Notes bytes","title":"Returns"},{"location":"developers/contracts/ICompoundTimelock/#pendingadmin","text":"function pendingAdmin() view returns(address)","title":"pendingAdmin"},{"location":"developers/contracts/ICompoundTimelock/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ICompoundTimelock/#queuetransaction","text":"function queueTransaction(address,uint256,string,bytes,uint256) nonpayable returns(bytes32)","title":"queueTransaction"},{"location":"developers/contracts/ICompoundTimelock/#params_2","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/ICompoundTimelock/#returns_7","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICompoundTimelock/#queuedtransactions","text":"function queuedTransactions(bytes32) view returns(bool)","title":"queuedTransactions"},{"location":"developers/contracts/ICompoundTimelock/#params_3","text":"Param Type Notes bytes32","title":"Params"},{"location":"developers/contracts/ICompoundTimelock/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICompoundTimelock/#setdelay","text":"function setDelay(uint256) nonpayable","title":"setDelay"},{"location":"developers/contracts/ICompoundTimelock/#params_4","text":"Param Type Notes uint256","title":"Params"},{"location":"developers/contracts/ICompoundTimelock/#setpendingadmin","text":"function setPendingAdmin(address) nonpayable","title":"setPendingAdmin"},{"location":"developers/contracts/ICompoundTimelock/#params_5","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/ICore/","text":"ICore Core Interface Author: Fei Protocol Events FeiUpdate event FeiUpdate(address) Params Param Type Notes _fei indexed address GenesisGroupUpdate event GenesisGroupUpdate(address) Params Param Type Notes _genesisGroup indexed address GenesisPeriodComplete event GenesisPeriodComplete(uint256) Params Param Type Notes _timestamp uint256 RoleAdminChanged event RoleAdminChanged(bytes32,bytes32,bytes32) Params Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32 RoleGranted event RoleGranted(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address RoleRevoked event RoleRevoked(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address TribeAllocation event TribeAllocation(address,uint256) Params Param Type Notes _to indexed address _amount uint256 TribeUpdate event TribeUpdate(address) Params Param Type Notes _tribe indexed address Methods BURNER_ROLE function BURNER_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 GOVERN_ROLE function GOVERN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 GUARDIAN_ROLE function GUARDIAN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 MINTER_ROLE function MINTER_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 PCV_CONTROLLER_ROLE function PCV_CONTROLLER_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 allocateTribe function allocateTribe(address,uint256) nonpayable Params Param Type Notes to address amount uint256 createRole function createRole(bytes32,bytes32) nonpayable Params Param Type Notes role bytes32 adminRole bytes32 fei function fei() view returns(address) Returns Param Type Notes address getRoleAdmin function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}. Params Param Type Notes role bytes32 Returns Param Type Notes bytes32 grantBurner function grantBurner(address) nonpayable Params Param Type Notes burner address grantGovernor function grantGovernor(address) nonpayable Params Param Type Notes governor address grantGuardian function grantGuardian(address) nonpayable Params Param Type Notes guardian address grantMinter function grantMinter(address) nonpayable Params Param Type Notes minter address grantPCVController function grantPCVController(address) nonpayable Params Param Type Notes pcvController address grantRole function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address hasRole function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role . Params Param Type Notes role bytes32 account address Returns Param Type Notes bool init function init() nonpayable isBurner function isBurner(address) view returns(bool) Params Param Type Notes _address address Returns Param Type Notes bool isGovernor function isGovernor(address) view returns(bool) Params Param Type Notes _address address Returns Param Type Notes bool isGuardian function isGuardian(address) view returns(bool) Params Param Type Notes _address address Returns Param Type Notes bool isMinter function isMinter(address) view returns(bool) Params Param Type Notes _address address Returns Param Type Notes bool isPCVController function isPCVController(address) view returns(bool) Params Param Type Notes _address address Returns Param Type Notes bool renounceRole function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must be account . Params Param Type Notes role bytes32 account address revokeBurner function revokeBurner(address) nonpayable Params Param Type Notes burner address revokeGovernor function revokeGovernor(address) nonpayable Params Param Type Notes governor address revokeGuardian function revokeGuardian(address) nonpayable Params Param Type Notes guardian address revokeMinter function revokeMinter(address) nonpayable Params Param Type Notes minter address revokeOverride function revokeOverride(bytes32,address) nonpayable Params Param Type Notes role bytes32 account address revokePCVController function revokePCVController(address) nonpayable Params Param Type Notes pcvController address revokeRole function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address setFei function setFei(address) nonpayable Params Param Type Notes token address setTribe function setTribe(address) nonpayable Params Param Type Notes token address tribe function tribe() view returns(address) Returns Param Type Notes address","title":"ICore"},{"location":"developers/contracts/ICore/#icore","text":"Core Interface Author: Fei Protocol","title":"ICore"},{"location":"developers/contracts/ICore/#events","text":"","title":"Events"},{"location":"developers/contracts/ICore/#feiupdate","text":"event FeiUpdate(address)","title":"FeiUpdate"},{"location":"developers/contracts/ICore/#params","text":"Param Type Notes _fei indexed address","title":"Params"},{"location":"developers/contracts/ICore/#genesisgroupupdate","text":"event GenesisGroupUpdate(address)","title":"GenesisGroupUpdate"},{"location":"developers/contracts/ICore/#params_1","text":"Param Type Notes _genesisGroup indexed address","title":"Params"},{"location":"developers/contracts/ICore/#genesisperiodcomplete","text":"event GenesisPeriodComplete(uint256)","title":"GenesisPeriodComplete"},{"location":"developers/contracts/ICore/#params_2","text":"Param Type Notes _timestamp uint256","title":"Params"},{"location":"developers/contracts/ICore/#roleadminchanged","text":"event RoleAdminChanged(bytes32,bytes32,bytes32)","title":"RoleAdminChanged"},{"location":"developers/contracts/ICore/#params_3","text":"Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/ICore/#rolegranted","text":"event RoleGranted(bytes32,address,address)","title":"RoleGranted"},{"location":"developers/contracts/ICore/#params_4","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/ICore/#rolerevoked","text":"event RoleRevoked(bytes32,address,address)","title":"RoleRevoked"},{"location":"developers/contracts/ICore/#params_5","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/ICore/#tribeallocation","text":"event TribeAllocation(address,uint256)","title":"TribeAllocation"},{"location":"developers/contracts/ICore/#params_6","text":"Param Type Notes _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ICore/#tribeupdate","text":"event TribeUpdate(address)","title":"TribeUpdate"},{"location":"developers/contracts/ICore/#params_7","text":"Param Type Notes _tribe indexed address","title":"Params"},{"location":"developers/contracts/ICore/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ICore/#burner_role","text":"function BURNER_ROLE() view returns(bytes32)","title":"BURNER_ROLE"},{"location":"developers/contracts/ICore/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICore/#govern_role","text":"function GOVERN_ROLE() view returns(bytes32)","title":"GOVERN_ROLE"},{"location":"developers/contracts/ICore/#returns_1","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICore/#guardian_role","text":"function GUARDIAN_ROLE() view returns(bytes32)","title":"GUARDIAN_ROLE"},{"location":"developers/contracts/ICore/#returns_2","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICore/#minter_role","text":"function MINTER_ROLE() view returns(bytes32)","title":"MINTER_ROLE"},{"location":"developers/contracts/ICore/#returns_3","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICore/#pcv_controller_role","text":"function PCV_CONTROLLER_ROLE() view returns(bytes32)","title":"PCV_CONTROLLER_ROLE"},{"location":"developers/contracts/ICore/#returns_4","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICore/#allocatetribe","text":"function allocateTribe(address,uint256) nonpayable","title":"allocateTribe"},{"location":"developers/contracts/ICore/#params_8","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/ICore/#createrole","text":"function createRole(bytes32,bytes32) nonpayable","title":"createRole"},{"location":"developers/contracts/ICore/#params_9","text":"Param Type Notes role bytes32 adminRole bytes32","title":"Params"},{"location":"developers/contracts/ICore/#fei","text":"function fei() view returns(address)","title":"fei"},{"location":"developers/contracts/ICore/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ICore/#getroleadmin","text":"function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.","title":"getRoleAdmin"},{"location":"developers/contracts/ICore/#params_10","text":"Param Type Notes role bytes32","title":"Params"},{"location":"developers/contracts/ICore/#returns_6","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICore/#grantburner","text":"function grantBurner(address) nonpayable","title":"grantBurner"},{"location":"developers/contracts/ICore/#params_11","text":"Param Type Notes burner address","title":"Params"},{"location":"developers/contracts/ICore/#grantgovernor","text":"function grantGovernor(address) nonpayable","title":"grantGovernor"},{"location":"developers/contracts/ICore/#params_12","text":"Param Type Notes governor address","title":"Params"},{"location":"developers/contracts/ICore/#grantguardian","text":"function grantGuardian(address) nonpayable","title":"grantGuardian"},{"location":"developers/contracts/ICore/#params_13","text":"Param Type Notes guardian address","title":"Params"},{"location":"developers/contracts/ICore/#grantminter","text":"function grantMinter(address) nonpayable","title":"grantMinter"},{"location":"developers/contracts/ICore/#params_14","text":"Param Type Notes minter address","title":"Params"},{"location":"developers/contracts/ICore/#grantpcvcontroller","text":"function grantPCVController(address) nonpayable","title":"grantPCVController"},{"location":"developers/contracts/ICore/#params_15","text":"Param Type Notes pcvController address","title":"Params"},{"location":"developers/contracts/ICore/#grantrole","text":"function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role.","title":"grantRole"},{"location":"developers/contracts/ICore/#params_16","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/ICore/#hasrole","text":"function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role .","title":"hasRole"},{"location":"developers/contracts/ICore/#params_17","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/ICore/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICore/#init","text":"function init() nonpayable","title":"init"},{"location":"developers/contracts/ICore/#isburner","text":"function isBurner(address) view returns(bool)","title":"isBurner"},{"location":"developers/contracts/ICore/#params_18","text":"Param Type Notes _address address","title":"Params"},{"location":"developers/contracts/ICore/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICore/#isgovernor","text":"function isGovernor(address) view returns(bool)","title":"isGovernor"},{"location":"developers/contracts/ICore/#params_19","text":"Param Type Notes _address address","title":"Params"},{"location":"developers/contracts/ICore/#returns_9","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICore/#isguardian","text":"function isGuardian(address) view returns(bool)","title":"isGuardian"},{"location":"developers/contracts/ICore/#params_20","text":"Param Type Notes _address address","title":"Params"},{"location":"developers/contracts/ICore/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICore/#isminter","text":"function isMinter(address) view returns(bool)","title":"isMinter"},{"location":"developers/contracts/ICore/#params_21","text":"Param Type Notes _address address","title":"Params"},{"location":"developers/contracts/ICore/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICore/#ispcvcontroller","text":"function isPCVController(address) view returns(bool)","title":"isPCVController"},{"location":"developers/contracts/ICore/#params_22","text":"Param Type Notes _address address","title":"Params"},{"location":"developers/contracts/ICore/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICore/#renouncerole","text":"function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must be account .","title":"renounceRole"},{"location":"developers/contracts/ICore/#params_23","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/ICore/#revokeburner","text":"function revokeBurner(address) nonpayable","title":"revokeBurner"},{"location":"developers/contracts/ICore/#params_24","text":"Param Type Notes burner address","title":"Params"},{"location":"developers/contracts/ICore/#revokegovernor","text":"function revokeGovernor(address) nonpayable","title":"revokeGovernor"},{"location":"developers/contracts/ICore/#params_25","text":"Param Type Notes governor address","title":"Params"},{"location":"developers/contracts/ICore/#revokeguardian","text":"function revokeGuardian(address) nonpayable","title":"revokeGuardian"},{"location":"developers/contracts/ICore/#params_26","text":"Param Type Notes guardian address","title":"Params"},{"location":"developers/contracts/ICore/#revokeminter","text":"function revokeMinter(address) nonpayable","title":"revokeMinter"},{"location":"developers/contracts/ICore/#params_27","text":"Param Type Notes minter address","title":"Params"},{"location":"developers/contracts/ICore/#revokeoverride","text":"function revokeOverride(bytes32,address) nonpayable","title":"revokeOverride"},{"location":"developers/contracts/ICore/#params_28","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/ICore/#revokepcvcontroller","text":"function revokePCVController(address) nonpayable","title":"revokePCVController"},{"location":"developers/contracts/ICore/#params_29","text":"Param Type Notes pcvController address","title":"Params"},{"location":"developers/contracts/ICore/#revokerole","text":"function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role.","title":"revokeRole"},{"location":"developers/contracts/ICore/#params_30","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/ICore/#setfei","text":"function setFei(address) nonpayable","title":"setFei"},{"location":"developers/contracts/ICore/#params_31","text":"Param Type Notes token address","title":"Params"},{"location":"developers/contracts/ICore/#settribe","text":"function setTribe(address) nonpayable","title":"setTribe"},{"location":"developers/contracts/ICore/#params_32","text":"Param Type Notes token address","title":"Params"},{"location":"developers/contracts/ICore/#tribe","text":"function tribe() view returns(address)","title":"tribe"},{"location":"developers/contracts/ICore/#returns_13","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ICoreRef/","text":"ICoreRef CoreRef interface Author: Fei Protocol Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 core function core() view returns(address) Returns Param Type Notes address fei function fei() view returns(address) Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) Params Param Type Notes admin address Returns Param Type Notes bool pause function pause() nonpayable setContractAdminRole function setContractAdminRole(bytes32) nonpayable Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable Params Param Type Notes newCore address tribe function tribe() view returns(address) Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) Returns Param Type Notes uint256 unpause function unpause() nonpayable","title":"ICoreRef"},{"location":"developers/contracts/ICoreRef/#icoreref","text":"CoreRef interface Author: Fei Protocol","title":"ICoreRef"},{"location":"developers/contracts/ICoreRef/#events","text":"","title":"Events"},{"location":"developers/contracts/ICoreRef/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/ICoreRef/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/ICoreRef/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/ICoreRef/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/ICoreRef/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ICoreRef/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32)","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/ICoreRef/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICoreRef/#core","text":"function core() view returns(address)","title":"core"},{"location":"developers/contracts/ICoreRef/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ICoreRef/#fei","text":"function fei() view returns(address)","title":"fei"},{"location":"developers/contracts/ICoreRef/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ICoreRef/#feibalance","text":"function feiBalance() view returns(uint256)","title":"feiBalance"},{"location":"developers/contracts/ICoreRef/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ICoreRef/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool)","title":"isContractAdmin"},{"location":"developers/contracts/ICoreRef/#params_2","text":"Param Type Notes admin address","title":"Params"},{"location":"developers/contracts/ICoreRef/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICoreRef/#pause","text":"function pause() nonpayable","title":"pause"},{"location":"developers/contracts/ICoreRef/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable","title":"setContractAdminRole"},{"location":"developers/contracts/ICoreRef/#params_3","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/ICoreRef/#setcore","text":"function setCore(address) nonpayable","title":"setCore"},{"location":"developers/contracts/ICoreRef/#params_4","text":"Param Type Notes newCore address","title":"Params"},{"location":"developers/contracts/ICoreRef/#tribe","text":"function tribe() view returns(address)","title":"tribe"},{"location":"developers/contracts/ICoreRef/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ICoreRef/#tribebalance","text":"function tribeBalance() view returns(uint256)","title":"tribeBalance"},{"location":"developers/contracts/ICoreRef/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ICoreRef/#unpause","text":"function unpause() nonpayable","title":"unpause"},{"location":"developers/contracts/ICoreV1/","text":"ICoreV1 [OLD] Core V1 Interface Author: Fei Protocol Events FeiUpdate event FeiUpdate(address) Params Param Type Notes _fei indexed address GenesisGroupUpdate event GenesisGroupUpdate(address) Params Param Type Notes _genesisGroup indexed address GenesisPeriodComplete event GenesisPeriodComplete(uint256) Params Param Type Notes _timestamp uint256 RoleAdminChanged event RoleAdminChanged(bytes32,bytes32,bytes32) Params Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32 RoleGranted event RoleGranted(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address RoleRevoked event RoleRevoked(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address TribeAllocation event TribeAllocation(address,uint256) Params Param Type Notes _to indexed address _amount uint256 TribeUpdate event TribeUpdate(address) Params Param Type Notes _tribe indexed address Methods BURNER_ROLE function BURNER_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 GOVERN_ROLE function GOVERN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 GUARDIAN_ROLE function GUARDIAN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 MINTER_ROLE function MINTER_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 PCV_CONTROLLER_ROLE function PCV_CONTROLLER_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 allocateTribe function allocateTribe(address,uint256) nonpayable Params Param Type Notes to address amount uint256 createRole function createRole(bytes32,bytes32) nonpayable Params Param Type Notes role bytes32 adminRole bytes32 fei function fei() view returns(address) Returns Param Type Notes address genesisGroup function genesisGroup() view returns(address) Returns Param Type Notes address getRoleAdmin function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}. Params Param Type Notes role bytes32 Returns Param Type Notes bytes32 grantBurner function grantBurner(address) nonpayable Params Param Type Notes burner address grantGovernor function grantGovernor(address) nonpayable Params Param Type Notes governor address grantGuardian function grantGuardian(address) nonpayable Params Param Type Notes guardian address grantMinter function grantMinter(address) nonpayable Params Param Type Notes minter address grantPCVController function grantPCVController(address) nonpayable Params Param Type Notes pcvController address grantRole function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address hasRole function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role . Params Param Type Notes role bytes32 account address Returns Param Type Notes bool init function init() nonpayable isBurner function isBurner(address) view returns(bool) Params Param Type Notes _address address Returns Param Type Notes bool isGovernor function isGovernor(address) view returns(bool) Params Param Type Notes _address address Returns Param Type Notes bool isGuardian function isGuardian(address) view returns(bool) Params Param Type Notes _address address Returns Param Type Notes bool isMinter function isMinter(address) view returns(bool) Params Param Type Notes _address address Returns Param Type Notes bool isPCVController function isPCVController(address) view returns(bool) Params Param Type Notes _address address Returns Param Type Notes bool renounceRole function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must be account . Params Param Type Notes role bytes32 account address revokeBurner function revokeBurner(address) nonpayable Params Param Type Notes burner address revokeGovernor function revokeGovernor(address) nonpayable Params Param Type Notes governor address revokeGuardian function revokeGuardian(address) nonpayable Params Param Type Notes guardian address revokeMinter function revokeMinter(address) nonpayable Params Param Type Notes minter address revokeOverride function revokeOverride(bytes32,address) nonpayable Params Param Type Notes role bytes32 account address revokePCVController function revokePCVController(address) nonpayable Params Param Type Notes pcvController address revokeRole function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address setFei function setFei(address) nonpayable Params Param Type Notes token address setGenesisGroup function setGenesisGroup(address) nonpayable Params Param Type Notes token address setTribe function setTribe(address) nonpayable Params Param Type Notes token address tribe function tribe() view returns(address) Returns Param Type Notes address","title":"ICoreV1"},{"location":"developers/contracts/ICoreV1/#icorev1","text":"[OLD] Core V1 Interface Author: Fei Protocol","title":"ICoreV1"},{"location":"developers/contracts/ICoreV1/#events","text":"","title":"Events"},{"location":"developers/contracts/ICoreV1/#feiupdate","text":"event FeiUpdate(address)","title":"FeiUpdate"},{"location":"developers/contracts/ICoreV1/#params","text":"Param Type Notes _fei indexed address","title":"Params"},{"location":"developers/contracts/ICoreV1/#genesisgroupupdate","text":"event GenesisGroupUpdate(address)","title":"GenesisGroupUpdate"},{"location":"developers/contracts/ICoreV1/#params_1","text":"Param Type Notes _genesisGroup indexed address","title":"Params"},{"location":"developers/contracts/ICoreV1/#genesisperiodcomplete","text":"event GenesisPeriodComplete(uint256)","title":"GenesisPeriodComplete"},{"location":"developers/contracts/ICoreV1/#params_2","text":"Param Type Notes _timestamp uint256","title":"Params"},{"location":"developers/contracts/ICoreV1/#roleadminchanged","text":"event RoleAdminChanged(bytes32,bytes32,bytes32)","title":"RoleAdminChanged"},{"location":"developers/contracts/ICoreV1/#params_3","text":"Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/ICoreV1/#rolegranted","text":"event RoleGranted(bytes32,address,address)","title":"RoleGranted"},{"location":"developers/contracts/ICoreV1/#params_4","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/ICoreV1/#rolerevoked","text":"event RoleRevoked(bytes32,address,address)","title":"RoleRevoked"},{"location":"developers/contracts/ICoreV1/#params_5","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/ICoreV1/#tribeallocation","text":"event TribeAllocation(address,uint256)","title":"TribeAllocation"},{"location":"developers/contracts/ICoreV1/#params_6","text":"Param Type Notes _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ICoreV1/#tribeupdate","text":"event TribeUpdate(address)","title":"TribeUpdate"},{"location":"developers/contracts/ICoreV1/#params_7","text":"Param Type Notes _tribe indexed address","title":"Params"},{"location":"developers/contracts/ICoreV1/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ICoreV1/#burner_role","text":"function BURNER_ROLE() view returns(bytes32)","title":"BURNER_ROLE"},{"location":"developers/contracts/ICoreV1/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICoreV1/#govern_role","text":"function GOVERN_ROLE() view returns(bytes32)","title":"GOVERN_ROLE"},{"location":"developers/contracts/ICoreV1/#returns_1","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICoreV1/#guardian_role","text":"function GUARDIAN_ROLE() view returns(bytes32)","title":"GUARDIAN_ROLE"},{"location":"developers/contracts/ICoreV1/#returns_2","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICoreV1/#minter_role","text":"function MINTER_ROLE() view returns(bytes32)","title":"MINTER_ROLE"},{"location":"developers/contracts/ICoreV1/#returns_3","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICoreV1/#pcv_controller_role","text":"function PCV_CONTROLLER_ROLE() view returns(bytes32)","title":"PCV_CONTROLLER_ROLE"},{"location":"developers/contracts/ICoreV1/#returns_4","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICoreV1/#allocatetribe","text":"function allocateTribe(address,uint256) nonpayable","title":"allocateTribe"},{"location":"developers/contracts/ICoreV1/#params_8","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/ICoreV1/#createrole","text":"function createRole(bytes32,bytes32) nonpayable","title":"createRole"},{"location":"developers/contracts/ICoreV1/#params_9","text":"Param Type Notes role bytes32 adminRole bytes32","title":"Params"},{"location":"developers/contracts/ICoreV1/#fei","text":"function fei() view returns(address)","title":"fei"},{"location":"developers/contracts/ICoreV1/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ICoreV1/#genesisgroup","text":"function genesisGroup() view returns(address)","title":"genesisGroup"},{"location":"developers/contracts/ICoreV1/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ICoreV1/#getroleadmin","text":"function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.","title":"getRoleAdmin"},{"location":"developers/contracts/ICoreV1/#params_10","text":"Param Type Notes role bytes32","title":"Params"},{"location":"developers/contracts/ICoreV1/#returns_7","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/ICoreV1/#grantburner","text":"function grantBurner(address) nonpayable","title":"grantBurner"},{"location":"developers/contracts/ICoreV1/#params_11","text":"Param Type Notes burner address","title":"Params"},{"location":"developers/contracts/ICoreV1/#grantgovernor","text":"function grantGovernor(address) nonpayable","title":"grantGovernor"},{"location":"developers/contracts/ICoreV1/#params_12","text":"Param Type Notes governor address","title":"Params"},{"location":"developers/contracts/ICoreV1/#grantguardian","text":"function grantGuardian(address) nonpayable","title":"grantGuardian"},{"location":"developers/contracts/ICoreV1/#params_13","text":"Param Type Notes guardian address","title":"Params"},{"location":"developers/contracts/ICoreV1/#grantminter","text":"function grantMinter(address) nonpayable","title":"grantMinter"},{"location":"developers/contracts/ICoreV1/#params_14","text":"Param Type Notes minter address","title":"Params"},{"location":"developers/contracts/ICoreV1/#grantpcvcontroller","text":"function grantPCVController(address) nonpayable","title":"grantPCVController"},{"location":"developers/contracts/ICoreV1/#params_15","text":"Param Type Notes pcvController address","title":"Params"},{"location":"developers/contracts/ICoreV1/#grantrole","text":"function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role.","title":"grantRole"},{"location":"developers/contracts/ICoreV1/#params_16","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/ICoreV1/#hasrole","text":"function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role .","title":"hasRole"},{"location":"developers/contracts/ICoreV1/#params_17","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/ICoreV1/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICoreV1/#init","text":"function init() nonpayable","title":"init"},{"location":"developers/contracts/ICoreV1/#isburner","text":"function isBurner(address) view returns(bool)","title":"isBurner"},{"location":"developers/contracts/ICoreV1/#params_18","text":"Param Type Notes _address address","title":"Params"},{"location":"developers/contracts/ICoreV1/#returns_9","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICoreV1/#isgovernor","text":"function isGovernor(address) view returns(bool)","title":"isGovernor"},{"location":"developers/contracts/ICoreV1/#params_19","text":"Param Type Notes _address address","title":"Params"},{"location":"developers/contracts/ICoreV1/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICoreV1/#isguardian","text":"function isGuardian(address) view returns(bool)","title":"isGuardian"},{"location":"developers/contracts/ICoreV1/#params_20","text":"Param Type Notes _address address","title":"Params"},{"location":"developers/contracts/ICoreV1/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICoreV1/#isminter","text":"function isMinter(address) view returns(bool)","title":"isMinter"},{"location":"developers/contracts/ICoreV1/#params_21","text":"Param Type Notes _address address","title":"Params"},{"location":"developers/contracts/ICoreV1/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICoreV1/#ispcvcontroller","text":"function isPCVController(address) view returns(bool)","title":"isPCVController"},{"location":"developers/contracts/ICoreV1/#params_22","text":"Param Type Notes _address address","title":"Params"},{"location":"developers/contracts/ICoreV1/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ICoreV1/#renouncerole","text":"function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must be account .","title":"renounceRole"},{"location":"developers/contracts/ICoreV1/#params_23","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/ICoreV1/#revokeburner","text":"function revokeBurner(address) nonpayable","title":"revokeBurner"},{"location":"developers/contracts/ICoreV1/#params_24","text":"Param Type Notes burner address","title":"Params"},{"location":"developers/contracts/ICoreV1/#revokegovernor","text":"function revokeGovernor(address) nonpayable","title":"revokeGovernor"},{"location":"developers/contracts/ICoreV1/#params_25","text":"Param Type Notes governor address","title":"Params"},{"location":"developers/contracts/ICoreV1/#revokeguardian","text":"function revokeGuardian(address) nonpayable","title":"revokeGuardian"},{"location":"developers/contracts/ICoreV1/#params_26","text":"Param Type Notes guardian address","title":"Params"},{"location":"developers/contracts/ICoreV1/#revokeminter","text":"function revokeMinter(address) nonpayable","title":"revokeMinter"},{"location":"developers/contracts/ICoreV1/#params_27","text":"Param Type Notes minter address","title":"Params"},{"location":"developers/contracts/ICoreV1/#revokeoverride","text":"function revokeOverride(bytes32,address) nonpayable","title":"revokeOverride"},{"location":"developers/contracts/ICoreV1/#params_28","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/ICoreV1/#revokepcvcontroller","text":"function revokePCVController(address) nonpayable","title":"revokePCVController"},{"location":"developers/contracts/ICoreV1/#params_29","text":"Param Type Notes pcvController address","title":"Params"},{"location":"developers/contracts/ICoreV1/#revokerole","text":"function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role.","title":"revokeRole"},{"location":"developers/contracts/ICoreV1/#params_30","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/ICoreV1/#setfei","text":"function setFei(address) nonpayable","title":"setFei"},{"location":"developers/contracts/ICoreV1/#params_31","text":"Param Type Notes token address","title":"Params"},{"location":"developers/contracts/ICoreV1/#setgenesisgroup","text":"function setGenesisGroup(address) nonpayable","title":"setGenesisGroup"},{"location":"developers/contracts/ICoreV1/#params_32","text":"Param Type Notes token address","title":"Params"},{"location":"developers/contracts/ICoreV1/#settribe","text":"function setTribe(address) nonpayable","title":"setTribe"},{"location":"developers/contracts/ICoreV1/#params_33","text":"Param Type Notes token address","title":"Params"},{"location":"developers/contracts/ICoreV1/#tribe","text":"function tribe() view returns(address)","title":"tribe"},{"location":"developers/contracts/ICoreV1/#returns_14","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IExchanger/","text":"IExchanger Methods exchange function exchange(uint256) nonpayable Params Param Type Notes amount uint256","title":"IExchanger"},{"location":"developers/contracts/IExchanger/#iexchanger","text":"","title":"IExchanger"},{"location":"developers/contracts/IExchanger/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IExchanger/#exchange","text":"function exchange(uint256) nonpayable","title":"exchange"},{"location":"developers/contracts/IExchanger/#params","text":"Param Type Notes amount uint256","title":"Params"},{"location":"developers/contracts/IFei/","text":"IFei FEI stablecoin interface Author: Fei Protocol Events Approval event Approval(address,address,uint256) Params Param Type Notes owner indexed address spender indexed address value uint256 Burning event Burning(address,address,uint256) Params Param Type Notes _to indexed address _burner indexed address _amount uint256 IncentiveContractUpdate event IncentiveContractUpdate(address,address) Params Param Type Notes _incentivized indexed address _incentiveContract indexed address Minting event Minting(address,address,uint256) Params Param Type Notes _to indexed address _minter indexed address _amount uint256 Transfer event Transfer(address,address,uint256) Params Param Type Notes from indexed address to indexed address value uint256 Methods allowance function allowance(address,address) view returns(uint256) Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called. Params Param Type Notes owner address spender address Returns Param Type Notes uint256 approve function approve(address,uint256) nonpayable returns(bool) Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event. Params Param Type Notes spender address amount uint256 Returns Param Type Notes bool balanceOf function balanceOf(address) view returns(uint256) Returns the amount of tokens owned by account . Params Param Type Notes account address Returns Param Type Notes uint256 burn function burn(uint256) nonpayable Params Param Type Notes amount uint256 burnFrom function burnFrom(address,uint256) nonpayable Params Param Type Notes account address amount uint256 incentiveContract function incentiveContract(address) view returns(address) Params Param Type Notes account address Returns Param Type Notes address mint function mint(address,uint256) nonpayable Params Param Type Notes account address amount uint256 permit function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) nonpayable Params Param Type Notes owner address spender address value uint256 deadline uint256 v uint8 r bytes32 s bytes32 setIncentiveContract function setIncentiveContract(address,address) nonpayable Params Param Type Notes account address incentive address totalSupply function totalSupply() view returns(uint256) Returns the amount of tokens in existence. Returns Param Type Notes uint256 transfer function transfer(address,uint256) nonpayable returns(bool) Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. Params Param Type Notes recipient address amount uint256 Returns Param Type Notes bool transferFrom function transferFrom(address,address,uint256) nonpayable returns(bool) Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. Params Param Type Notes sender address recipient address amount uint256 Returns Param Type Notes bool","title":"IFei"},{"location":"developers/contracts/IFei/#ifei","text":"FEI stablecoin interface Author: Fei Protocol","title":"IFei"},{"location":"developers/contracts/IFei/#events","text":"","title":"Events"},{"location":"developers/contracts/IFei/#approval","text":"event Approval(address,address,uint256)","title":"Approval"},{"location":"developers/contracts/IFei/#params","text":"Param Type Notes owner indexed address spender indexed address value uint256","title":"Params"},{"location":"developers/contracts/IFei/#burning","text":"event Burning(address,address,uint256)","title":"Burning"},{"location":"developers/contracts/IFei/#params_1","text":"Param Type Notes _to indexed address _burner indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/IFei/#incentivecontractupdate","text":"event IncentiveContractUpdate(address,address)","title":"IncentiveContractUpdate"},{"location":"developers/contracts/IFei/#params_2","text":"Param Type Notes _incentivized indexed address _incentiveContract indexed address","title":"Params"},{"location":"developers/contracts/IFei/#minting","text":"event Minting(address,address,uint256)","title":"Minting"},{"location":"developers/contracts/IFei/#params_3","text":"Param Type Notes _to indexed address _minter indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/IFei/#transfer","text":"event Transfer(address,address,uint256)","title":"Transfer"},{"location":"developers/contracts/IFei/#params_4","text":"Param Type Notes from indexed address to indexed address value uint256","title":"Params"},{"location":"developers/contracts/IFei/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IFei/#allowance","text":"function allowance(address,address) view returns(uint256) Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.","title":"allowance"},{"location":"developers/contracts/IFei/#params_5","text":"Param Type Notes owner address spender address","title":"Params"},{"location":"developers/contracts/IFei/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IFei/#approve","text":"function approve(address,uint256) nonpayable returns(bool) Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.","title":"approve"},{"location":"developers/contracts/IFei/#params_6","text":"Param Type Notes spender address amount uint256","title":"Params"},{"location":"developers/contracts/IFei/#returns_1","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/IFei/#balanceof","text":"function balanceOf(address) view returns(uint256) Returns the amount of tokens owned by account .","title":"balanceOf"},{"location":"developers/contracts/IFei/#params_7","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/IFei/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IFei/#burn","text":"function burn(uint256) nonpayable","title":"burn"},{"location":"developers/contracts/IFei/#params_8","text":"Param Type Notes amount uint256","title":"Params"},{"location":"developers/contracts/IFei/#burnfrom","text":"function burnFrom(address,uint256) nonpayable","title":"burnFrom"},{"location":"developers/contracts/IFei/#params_9","text":"Param Type Notes account address amount uint256","title":"Params"},{"location":"developers/contracts/IFei/#incentivecontract","text":"function incentiveContract(address) view returns(address)","title":"incentiveContract"},{"location":"developers/contracts/IFei/#params_10","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/IFei/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IFei/#mint","text":"function mint(address,uint256) nonpayable","title":"mint"},{"location":"developers/contracts/IFei/#params_11","text":"Param Type Notes account address amount uint256","title":"Params"},{"location":"developers/contracts/IFei/#permit","text":"function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) nonpayable","title":"permit"},{"location":"developers/contracts/IFei/#params_12","text":"Param Type Notes owner address spender address value uint256 deadline uint256 v uint8 r bytes32 s bytes32","title":"Params"},{"location":"developers/contracts/IFei/#setincentivecontract","text":"function setIncentiveContract(address,address) nonpayable","title":"setIncentiveContract"},{"location":"developers/contracts/IFei/#params_13","text":"Param Type Notes account address incentive address","title":"Params"},{"location":"developers/contracts/IFei/#totalsupply","text":"function totalSupply() view returns(uint256) Returns the amount of tokens in existence.","title":"totalSupply"},{"location":"developers/contracts/IFei/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IFei/#transfer_1","text":"function transfer(address,uint256) nonpayable returns(bool) Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.","title":"transfer"},{"location":"developers/contracts/IFei/#params_14","text":"Param Type Notes recipient address amount uint256","title":"Params"},{"location":"developers/contracts/IFei/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/IFei/#transferfrom","text":"function transferFrom(address,address,uint256) nonpayable returns(bool) Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.","title":"transferFrom"},{"location":"developers/contracts/IFei/#params_15","text":"Param Type Notes sender address recipient address amount uint256","title":"Params"},{"location":"developers/contracts/IFei/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/IFeiDAO/","text":"\u2b05\ufe0f Contracts IFeiDAO Methods updateTimelock function updateTimelock(address) nonpayable Params Param Type Notes newTimelock address \u2b05\ufe0f Contracts","title":"IFeiDAO"},{"location":"developers/contracts/IFeiDAO/#ifeidao","text":"","title":"IFeiDAO"},{"location":"developers/contracts/IFeiDAO/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IFeiDAO/#updatetimelock","text":"function updateTimelock(address) nonpayable","title":"updateTimelock"},{"location":"developers/contracts/IFeiDAO/#params","text":"Param Type Notes newTimelock address \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/IFeiRewardsDistributor/","text":"IFeiRewardsDistributor Methods governorWithdrawTribe function governorWithdrawTribe(uint256) nonpayable Params Param Type Notes amount uint256","title":"IFeiRewardsDistributor"},{"location":"developers/contracts/IFeiRewardsDistributor/#ifeirewardsdistributor","text":"","title":"IFeiRewardsDistributor"},{"location":"developers/contracts/IFeiRewardsDistributor/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IFeiRewardsDistributor/#governorwithdrawtribe","text":"function governorWithdrawTribe(uint256) nonpayable","title":"governorWithdrawTribe"},{"location":"developers/contracts/IFeiRewardsDistributor/#params","text":"Param Type Notes amount uint256","title":"Params"},{"location":"developers/contracts/IFeiTimedMinter/","text":"IFeiTimedMinter a Fei Timed Minter Author: Fei Protocol Events FeiMinting event FeiMinting(address,uint256) Params Param Type Notes caller indexed address feiAmount uint256 MintAmountUpdate event MintAmountUpdate(uint256,uint256) Params Param Type Notes oldMintAmount uint256 newMintAmount uint256 TargetUpdate event TargetUpdate(address,address) Params Param Type Notes oldTarget address newTarget address Methods MAX_MINT_FREQUENCY function MAX_MINT_FREQUENCY() view returns(uint256) Returns Param Type Notes uint256 MIN_MINT_FREQUENCY function MIN_MINT_FREQUENCY() view returns(uint256) Returns Param Type Notes uint256 mint function mint() nonpayable mintAmount function mintAmount() view returns(uint256) Returns Param Type Notes uint256 setFrequency function setFrequency(uint256) nonpayable Params Param Type Notes newFrequency uint256 setMintAmount function setMintAmount(uint256) nonpayable Params Param Type Notes newMintAmount uint256 setTarget function setTarget(address) nonpayable Params Param Type Notes newTarget address target function target() view returns(address) Returns Param Type Notes address","title":"IFeiTimedMinter"},{"location":"developers/contracts/IFeiTimedMinter/#ifeitimedminter","text":"a Fei Timed Minter Author: Fei Protocol","title":"IFeiTimedMinter"},{"location":"developers/contracts/IFeiTimedMinter/#events","text":"","title":"Events"},{"location":"developers/contracts/IFeiTimedMinter/#feiminting","text":"event FeiMinting(address,uint256)","title":"FeiMinting"},{"location":"developers/contracts/IFeiTimedMinter/#params","text":"Param Type Notes caller indexed address feiAmount uint256","title":"Params"},{"location":"developers/contracts/IFeiTimedMinter/#mintamountupdate","text":"event MintAmountUpdate(uint256,uint256)","title":"MintAmountUpdate"},{"location":"developers/contracts/IFeiTimedMinter/#params_1","text":"Param Type Notes oldMintAmount uint256 newMintAmount uint256","title":"Params"},{"location":"developers/contracts/IFeiTimedMinter/#targetupdate","text":"event TargetUpdate(address,address)","title":"TargetUpdate"},{"location":"developers/contracts/IFeiTimedMinter/#params_2","text":"Param Type Notes oldTarget address newTarget address","title":"Params"},{"location":"developers/contracts/IFeiTimedMinter/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IFeiTimedMinter/#max_mint_frequency","text":"function MAX_MINT_FREQUENCY() view returns(uint256)","title":"MAX_MINT_FREQUENCY"},{"location":"developers/contracts/IFeiTimedMinter/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IFeiTimedMinter/#min_mint_frequency","text":"function MIN_MINT_FREQUENCY() view returns(uint256)","title":"MIN_MINT_FREQUENCY"},{"location":"developers/contracts/IFeiTimedMinter/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IFeiTimedMinter/#mint","text":"function mint() nonpayable","title":"mint"},{"location":"developers/contracts/IFeiTimedMinter/#mintamount","text":"function mintAmount() view returns(uint256)","title":"mintAmount"},{"location":"developers/contracts/IFeiTimedMinter/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IFeiTimedMinter/#setfrequency","text":"function setFrequency(uint256) nonpayable","title":"setFrequency"},{"location":"developers/contracts/IFeiTimedMinter/#params_3","text":"Param Type Notes newFrequency uint256","title":"Params"},{"location":"developers/contracts/IFeiTimedMinter/#setmintamount","text":"function setMintAmount(uint256) nonpayable","title":"setMintAmount"},{"location":"developers/contracts/IFeiTimedMinter/#params_4","text":"Param Type Notes newMintAmount uint256","title":"Params"},{"location":"developers/contracts/IFeiTimedMinter/#settarget","text":"function setTarget(address) nonpayable","title":"setTarget"},{"location":"developers/contracts/IFeiTimedMinter/#params_5","text":"Param Type Notes newTarget address","title":"Params"},{"location":"developers/contracts/IFeiTimedMinter/#target","text":"function target() view returns(address)","title":"target"},{"location":"developers/contracts/IFeiTimedMinter/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/","text":"IGovernorTimelock DEV NOTE: Extension of the {IGovernor} for timelock supporting modules. Available since v4.3. Events ProposalCanceled event ProposalCanceled(uint256) Params Param Type Notes proposalId uint256 ProposalCreated event ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string) Params Param Type Notes proposalId uint256 proposer address targets address[] values uint256[] signatures string[] calldatas bytes[] startBlock uint256 endBlock uint256 description string ProposalExecuted event ProposalExecuted(uint256) Params Param Type Notes proposalId uint256 ProposalQueued event ProposalQueued(uint256,uint256) Params Param Type Notes proposalId uint256 eta uint256 VoteCast event VoteCast(address,uint256,uint8,uint256,string) Params Param Type Notes voter indexed address proposalId uint256 support uint8 weight uint256 reason string Methods COUNTING_MODE function COUNTING_MODE() pure returns(string) module:voting A description of the possible support values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example support=bravo&quorum=for,abstain . There are 2 standard keys: support and quorum . - support=bravo refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in GovernorBravo . - quorum=bravo means that only For votes are counted towards quorum. - quorum=for,abstain means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[ URLSearchParams ] JavaScript class. Returns Param Type Notes string castVote function castVote(uint256,uint8) nonpayable returns(uint256) Cast a vote Emits a {VoteCast} event. Params Param Type Notes proposalId uint256 support uint8 Returns Param Type Notes balance uint256 castVoteBySig function castVoteBySig(uint256,uint8,uint8,bytes32,bytes32) nonpayable returns(uint256) Cast a vote using the user cryptographic signature. Emits a {VoteCast} event. Params Param Type Notes proposalId uint256 support uint8 v uint8 r bytes32 s bytes32 Returns Param Type Notes balance uint256 castVoteWithReason function castVoteWithReason(uint256,uint8,string) nonpayable returns(uint256) Cast a with a reason Emits a {VoteCast} event. Params Param Type Notes proposalId uint256 support uint8 reason string Returns Param Type Notes balance uint256 execute function execute(address[],uint256[],bytes[],bytes32) payable returns(uint256) Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the deadline to be reached. Emits a {ProposalExecuted} event. Note: some module can modify the requirements for execution, for example by adding an additional timelock. Params Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32 Returns Param Type Notes proposalId uint256 getVotes function getVotes(address,uint256) view returns(uint256) module:reputation Voting power of an account at a specific blockNumber . Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens. Params Param Type Notes account address blockNumber uint256 Returns Param Type Notes uint256 hasVoted function hasVoted(uint256,address) view returns(bool) module:voting Returns weither account has cast a vote on proposalId . Params Param Type Notes proposalId uint256 account address Returns Param Type Notes bool hashProposal function hashProposal(address[],uint256[],bytes[],bytes32) pure returns(uint256) module:core Hashing function used to (re)build the proposal id from the proposal details.. Params Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32 Returns Param Type Notes uint256 name function name() view returns(string) module:core Name of the governor instance (used in building the ERC712 domain separator). Returns Param Type Notes string proposalDeadline function proposalDeadline(uint256) view returns(uint256) module:core Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote during this block. Params Param Type Notes proposalId uint256 Returns Param Type Notes uint256 proposalEta function proposalEta(uint256) view returns(uint256) Params Param Type Notes proposalId uint256 Returns Param Type Notes uint256 proposalSnapshot function proposalSnapshot(uint256) view returns(uint256) module:core Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the following block. Params Param Type Notes proposalId uint256 Returns Param Type Notes uint256 propose function propose(address[],uint256[],bytes[],string) nonpayable returns(uint256) Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends {IGovernor-votingPeriod} blocks after the voting starts. Emits a {ProposalCreated} event. Params Param Type Notes targets address[] values uint256[] calldatas bytes[] description string Returns Param Type Notes proposalId uint256 queue function queue(address[],uint256[],bytes[],bytes32) nonpayable returns(uint256) Params Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32 Returns Param Type Notes proposalId uint256 quorum function quorum(uint256) view returns(uint256) module:user-config Minimum number of cast voted required for a proposal to be successful. Note: The blockNumber parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}). Params Param Type Notes blockNumber uint256 Returns Param Type Notes uint256 state function state(uint256) view returns(uint8) module:core Current state of a proposal, following Compound's convention Params Param Type Notes proposalId uint256 Returns Param Type Notes uint8 supportsInterface function supportsInterface(bytes4) view returns(bool) Returns true if this contract implements the interface defined by interfaceId . See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas. Params Param Type Notes interfaceId bytes4 Returns Param Type Notes bool timelock function timelock() view returns(address) Returns Param Type Notes address version function version() view returns(string) module:core Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\" Returns Param Type Notes string votingDelay function votingDelay() view returns(uint256) module:user-config Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts. Returns Param Type Notes uint256 votingPeriod function votingPeriod() view returns(uint256) module:user-config Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay. Returns Param Type Notes uint256","title":"IGovernorTimelock"},{"location":"developers/contracts/IGovernorTimelock/#igovernortimelock","text":"DEV NOTE: Extension of the {IGovernor} for timelock supporting modules. Available since v4.3.","title":"IGovernorTimelock"},{"location":"developers/contracts/IGovernorTimelock/#events","text":"","title":"Events"},{"location":"developers/contracts/IGovernorTimelock/#proposalcanceled","text":"event ProposalCanceled(uint256)","title":"ProposalCanceled"},{"location":"developers/contracts/IGovernorTimelock/#params","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#proposalcreated","text":"event ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)","title":"ProposalCreated"},{"location":"developers/contracts/IGovernorTimelock/#params_1","text":"Param Type Notes proposalId uint256 proposer address targets address[] values uint256[] signatures string[] calldatas bytes[] startBlock uint256 endBlock uint256 description string","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#proposalexecuted","text":"event ProposalExecuted(uint256)","title":"ProposalExecuted"},{"location":"developers/contracts/IGovernorTimelock/#params_2","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#proposalqueued","text":"event ProposalQueued(uint256,uint256)","title":"ProposalQueued"},{"location":"developers/contracts/IGovernorTimelock/#params_3","text":"Param Type Notes proposalId uint256 eta uint256","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#votecast","text":"event VoteCast(address,uint256,uint8,uint256,string)","title":"VoteCast"},{"location":"developers/contracts/IGovernorTimelock/#params_4","text":"Param Type Notes voter indexed address proposalId uint256 support uint8 weight uint256 reason string","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IGovernorTimelock/#counting_mode","text":"function COUNTING_MODE() pure returns(string) module:voting A description of the possible support values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example support=bravo&quorum=for,abstain . There are 2 standard keys: support and quorum . - support=bravo refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in GovernorBravo . - quorum=bravo means that only For votes are counted towards quorum. - quorum=for,abstain means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[ URLSearchParams ] JavaScript class.","title":"COUNTING_MODE"},{"location":"developers/contracts/IGovernorTimelock/#returns","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#castvote","text":"function castVote(uint256,uint8) nonpayable returns(uint256) Cast a vote Emits a {VoteCast} event.","title":"castVote"},{"location":"developers/contracts/IGovernorTimelock/#params_5","text":"Param Type Notes proposalId uint256 support uint8","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_1","text":"Param Type Notes balance uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#castvotebysig","text":"function castVoteBySig(uint256,uint8,uint8,bytes32,bytes32) nonpayable returns(uint256) Cast a vote using the user cryptographic signature. Emits a {VoteCast} event.","title":"castVoteBySig"},{"location":"developers/contracts/IGovernorTimelock/#params_6","text":"Param Type Notes proposalId uint256 support uint8 v uint8 r bytes32 s bytes32","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_2","text":"Param Type Notes balance uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#castvotewithreason","text":"function castVoteWithReason(uint256,uint8,string) nonpayable returns(uint256) Cast a with a reason Emits a {VoteCast} event.","title":"castVoteWithReason"},{"location":"developers/contracts/IGovernorTimelock/#params_7","text":"Param Type Notes proposalId uint256 support uint8 reason string","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_3","text":"Param Type Notes balance uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#execute","text":"function execute(address[],uint256[],bytes[],bytes32) payable returns(uint256) Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the deadline to be reached. Emits a {ProposalExecuted} event. Note: some module can modify the requirements for execution, for example by adding an additional timelock.","title":"execute"},{"location":"developers/contracts/IGovernorTimelock/#params_8","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_4","text":"Param Type Notes proposalId uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#getvotes","text":"function getVotes(address,uint256) view returns(uint256) module:reputation Voting power of an account at a specific blockNumber . Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or multiple), {ERC20Votes} tokens.","title":"getVotes"},{"location":"developers/contracts/IGovernorTimelock/#params_9","text":"Param Type Notes account address blockNumber uint256","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#hasvoted","text":"function hasVoted(uint256,address) view returns(bool) module:voting Returns weither account has cast a vote on proposalId .","title":"hasVoted"},{"location":"developers/contracts/IGovernorTimelock/#params_10","text":"Param Type Notes proposalId uint256 account address","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#hashproposal","text":"function hashProposal(address[],uint256[],bytes[],bytes32) pure returns(uint256) module:core Hashing function used to (re)build the proposal id from the proposal details..","title":"hashProposal"},{"location":"developers/contracts/IGovernorTimelock/#params_11","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#name","text":"function name() view returns(string) module:core Name of the governor instance (used in building the ERC712 domain separator).","title":"name"},{"location":"developers/contracts/IGovernorTimelock/#returns_8","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#proposaldeadline","text":"function proposalDeadline(uint256) view returns(uint256) module:core Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote during this block.","title":"proposalDeadline"},{"location":"developers/contracts/IGovernorTimelock/#params_12","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#proposaleta","text":"function proposalEta(uint256) view returns(uint256)","title":"proposalEta"},{"location":"developers/contracts/IGovernorTimelock/#params_13","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#proposalsnapshot","text":"function proposalSnapshot(uint256) view returns(uint256) module:core Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the following block.","title":"proposalSnapshot"},{"location":"developers/contracts/IGovernorTimelock/#params_14","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#propose","text":"function propose(address[],uint256[],bytes[],string) nonpayable returns(uint256) Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends {IGovernor-votingPeriod} blocks after the voting starts. Emits a {ProposalCreated} event.","title":"propose"},{"location":"developers/contracts/IGovernorTimelock/#params_15","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] description string","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_12","text":"Param Type Notes proposalId uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#queue","text":"function queue(address[],uint256[],bytes[],bytes32) nonpayable returns(uint256)","title":"queue"},{"location":"developers/contracts/IGovernorTimelock/#params_16","text":"Param Type Notes targets address[] values uint256[] calldatas bytes[] descriptionHash bytes32","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_13","text":"Param Type Notes proposalId uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#quorum","text":"function quorum(uint256) view returns(uint256) module:user-config Minimum number of cast voted required for a proposal to be successful. Note: The blockNumber parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).","title":"quorum"},{"location":"developers/contracts/IGovernorTimelock/#params_17","text":"Param Type Notes blockNumber uint256","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#state","text":"function state(uint256) view returns(uint8) module:core Current state of a proposal, following Compound's convention","title":"state"},{"location":"developers/contracts/IGovernorTimelock/#params_18","text":"Param Type Notes proposalId uint256","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_15","text":"Param Type Notes uint8","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#supportsinterface","text":"function supportsInterface(bytes4) view returns(bool) Returns true if this contract implements the interface defined by interfaceId . See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.","title":"supportsInterface"},{"location":"developers/contracts/IGovernorTimelock/#params_19","text":"Param Type Notes interfaceId bytes4","title":"Params"},{"location":"developers/contracts/IGovernorTimelock/#returns_16","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#timelock","text":"function timelock() view returns(address)","title":"timelock"},{"location":"developers/contracts/IGovernorTimelock/#returns_17","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#version","text":"function version() view returns(string) module:core Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\"","title":"version"},{"location":"developers/contracts/IGovernorTimelock/#returns_18","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#votingdelay","text":"function votingDelay() view returns(uint256) module:user-config Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.","title":"votingDelay"},{"location":"developers/contracts/IGovernorTimelock/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IGovernorTimelock/#votingperiod","text":"function votingPeriod() view returns(uint256) module:user-config Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay.","title":"votingPeriod"},{"location":"developers/contracts/IGovernorTimelock/#returns_20","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ILido/","text":"\u2b05\ufe0f Contracts ILido Methods decreaseAllowance function decreaseAllowance(address,uint256) nonpayable returns(bool) Params Param Type Notes _spender address _subtractedValue uint256 Returns Param Type Notes bool getFee function getFee() view returns(uint256) Returns Param Type Notes uint256 getPooledEthByShares function getPooledEthByShares(uint256) view returns(uint256) Params Param Type Notes _sharesAmount uint256 Returns Param Type Notes uint256 getSharesByPooledEth function getSharesByPooledEth(uint256) view returns(uint256) Params Param Type Notes _ethAmount uint256 Returns Param Type Notes uint256 getTotalPooledEther function getTotalPooledEther() view returns(uint256) Returns Param Type Notes uint256 getTotalShares function getTotalShares() view returns(uint256) Returns Param Type Notes uint256 increaseAllowance function increaseAllowance(address,uint256) nonpayable returns(bool) Params Param Type Notes _spender address _addedValue uint256 Returns Param Type Notes bool sharesOf function sharesOf(address) view returns(uint256) Params Param Type Notes _account address Returns Param Type Notes uint256 submit function submit(address) payable returns(uint256) Params Param Type Notes referral address Returns Param Type Notes uint256 \u2b05\ufe0f Contracts","title":"ILido"},{"location":"developers/contracts/ILido/#ilido","text":"","title":"ILido"},{"location":"developers/contracts/ILido/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ILido/#decreaseallowance","text":"function decreaseAllowance(address,uint256) nonpayable returns(bool)","title":"decreaseAllowance"},{"location":"developers/contracts/ILido/#params","text":"Param Type Notes _spender address _subtractedValue uint256","title":"Params"},{"location":"developers/contracts/ILido/#returns","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ILido/#getfee","text":"function getFee() view returns(uint256)","title":"getFee"},{"location":"developers/contracts/ILido/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ILido/#getpooledethbyshares","text":"function getPooledEthByShares(uint256) view returns(uint256)","title":"getPooledEthByShares"},{"location":"developers/contracts/ILido/#params_1","text":"Param Type Notes _sharesAmount uint256","title":"Params"},{"location":"developers/contracts/ILido/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ILido/#getsharesbypooledeth","text":"function getSharesByPooledEth(uint256) view returns(uint256)","title":"getSharesByPooledEth"},{"location":"developers/contracts/ILido/#params_2","text":"Param Type Notes _ethAmount uint256","title":"Params"},{"location":"developers/contracts/ILido/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ILido/#gettotalpooledether","text":"function getTotalPooledEther() view returns(uint256)","title":"getTotalPooledEther"},{"location":"developers/contracts/ILido/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ILido/#gettotalshares","text":"function getTotalShares() view returns(uint256)","title":"getTotalShares"},{"location":"developers/contracts/ILido/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ILido/#increaseallowance","text":"function increaseAllowance(address,uint256) nonpayable returns(bool)","title":"increaseAllowance"},{"location":"developers/contracts/ILido/#params_3","text":"Param Type Notes _spender address _addedValue uint256","title":"Params"},{"location":"developers/contracts/ILido/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ILido/#sharesof","text":"function sharesOf(address) view returns(uint256)","title":"sharesOf"},{"location":"developers/contracts/ILido/#params_4","text":"Param Type Notes _account address","title":"Params"},{"location":"developers/contracts/ILido/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ILido/#submit","text":"function submit(address) payable returns(uint256)","title":"submit"},{"location":"developers/contracts/ILido/#params_5","text":"Param Type Notes referral address","title":"Params"},{"location":"developers/contracts/ILido/#returns_8","text":"Param Type Notes uint256 \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/IPCVDripController/","text":"IPCVDripController a PCV dripping controller interface Author: Fei Protocol Events DripAmountUpdate event DripAmountUpdate(uint256,uint256) Params Param Type Notes oldDripAmount uint256 newDripAmount uint256 Dripped event Dripped(address,address,uint256) Params Param Type Notes source indexed address target indexed address amount uint256 SourceUpdate event SourceUpdate(address,address) Params Param Type Notes oldSource indexed address newSource indexed address TargetUpdate event TargetUpdate(address,address) Params Param Type Notes oldTarget indexed address newTarget indexed address Methods drip function drip() nonpayable dripAmount function dripAmount() view returns(uint256) Returns Param Type Notes uint256 dripEligible function dripEligible() view returns(bool) Returns Param Type Notes bool setDripAmount function setDripAmount(uint256) nonpayable Params Param Type Notes newDripAmount uint256 setSource function setSource(address) nonpayable Params Param Type Notes newSource address setTarget function setTarget(address) nonpayable Params Param Type Notes newTarget address source function source() view returns(address) Returns Param Type Notes address target function target() view returns(address) Returns Param Type Notes address","title":"IPCVDripController"},{"location":"developers/contracts/IPCVDripController/#ipcvdripcontroller","text":"a PCV dripping controller interface Author: Fei Protocol","title":"IPCVDripController"},{"location":"developers/contracts/IPCVDripController/#events","text":"","title":"Events"},{"location":"developers/contracts/IPCVDripController/#dripamountupdate","text":"event DripAmountUpdate(uint256,uint256)","title":"DripAmountUpdate"},{"location":"developers/contracts/IPCVDripController/#params","text":"Param Type Notes oldDripAmount uint256 newDripAmount uint256","title":"Params"},{"location":"developers/contracts/IPCVDripController/#dripped","text":"event Dripped(address,address,uint256)","title":"Dripped"},{"location":"developers/contracts/IPCVDripController/#params_1","text":"Param Type Notes source indexed address target indexed address amount uint256","title":"Params"},{"location":"developers/contracts/IPCVDripController/#sourceupdate","text":"event SourceUpdate(address,address)","title":"SourceUpdate"},{"location":"developers/contracts/IPCVDripController/#params_2","text":"Param Type Notes oldSource indexed address newSource indexed address","title":"Params"},{"location":"developers/contracts/IPCVDripController/#targetupdate","text":"event TargetUpdate(address,address)","title":"TargetUpdate"},{"location":"developers/contracts/IPCVDripController/#params_3","text":"Param Type Notes oldTarget indexed address newTarget indexed address","title":"Params"},{"location":"developers/contracts/IPCVDripController/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IPCVDripController/#drip","text":"function drip() nonpayable","title":"drip"},{"location":"developers/contracts/IPCVDripController/#dripamount","text":"function dripAmount() view returns(uint256)","title":"dripAmount"},{"location":"developers/contracts/IPCVDripController/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IPCVDripController/#dripeligible","text":"function dripEligible() view returns(bool)","title":"dripEligible"},{"location":"developers/contracts/IPCVDripController/#returns_1","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/IPCVDripController/#setdripamount","text":"function setDripAmount(uint256) nonpayable","title":"setDripAmount"},{"location":"developers/contracts/IPCVDripController/#params_4","text":"Param Type Notes newDripAmount uint256","title":"Params"},{"location":"developers/contracts/IPCVDripController/#setsource","text":"function setSource(address) nonpayable","title":"setSource"},{"location":"developers/contracts/IPCVDripController/#params_5","text":"Param Type Notes newSource address","title":"Params"},{"location":"developers/contracts/IPCVDripController/#settarget","text":"function setTarget(address) nonpayable","title":"setTarget"},{"location":"developers/contracts/IPCVDripController/#params_6","text":"Param Type Notes newTarget address","title":"Params"},{"location":"developers/contracts/IPCVDripController/#source","text":"function source() view returns(address)","title":"source"},{"location":"developers/contracts/IPCVDripController/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IPCVDripController/#target","text":"function target() view returns(address)","title":"target"},{"location":"developers/contracts/IPCVDripController/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IPCVEquityMinter/","text":"IPCVEquityMinter a PCV Equity Minter Interface Author: Fei Protocol Events APRUpdate event APRUpdate(uint256,uint256) Params Param Type Notes oldAprBasisPoints uint256 newAprBasisPoints uint256 CollateralizationOracleUpdate event CollateralizationOracleUpdate(address,address) Params Param Type Notes oldCollateralizationOracle address newCollateralizationOracle address Methods MAX_APR_BASIS_POINTS function MAX_APR_BASIS_POINTS() view returns(uint256) Returns Param Type Notes uint256 aprBasisPoints function aprBasisPoints() view returns(uint256) Returns Param Type Notes uint256 collateralizationOracle function collateralizationOracle() view returns(address) Returns Param Type Notes address setAPRBasisPoints function setAPRBasisPoints(uint256) nonpayable Params Param Type Notes newAprBasisPoints uint256 setCollateralizationOracle function setCollateralizationOracle(address) nonpayable Params Param Type Notes newCollateralizationOracle address","title":"IPCVEquityMinter"},{"location":"developers/contracts/IPCVEquityMinter/#ipcvequityminter","text":"a PCV Equity Minter Interface Author: Fei Protocol","title":"IPCVEquityMinter"},{"location":"developers/contracts/IPCVEquityMinter/#events","text":"","title":"Events"},{"location":"developers/contracts/IPCVEquityMinter/#aprupdate","text":"event APRUpdate(uint256,uint256)","title":"APRUpdate"},{"location":"developers/contracts/IPCVEquityMinter/#params","text":"Param Type Notes oldAprBasisPoints uint256 newAprBasisPoints uint256","title":"Params"},{"location":"developers/contracts/IPCVEquityMinter/#collateralizationoracleupdate","text":"event CollateralizationOracleUpdate(address,address)","title":"CollateralizationOracleUpdate"},{"location":"developers/contracts/IPCVEquityMinter/#params_1","text":"Param Type Notes oldCollateralizationOracle address newCollateralizationOracle address","title":"Params"},{"location":"developers/contracts/IPCVEquityMinter/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IPCVEquityMinter/#max_apr_basis_points","text":"function MAX_APR_BASIS_POINTS() view returns(uint256)","title":"MAX_APR_BASIS_POINTS"},{"location":"developers/contracts/IPCVEquityMinter/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IPCVEquityMinter/#aprbasispoints","text":"function aprBasisPoints() view returns(uint256)","title":"aprBasisPoints"},{"location":"developers/contracts/IPCVEquityMinter/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IPCVEquityMinter/#collateralizationoracle","text":"function collateralizationOracle() view returns(address)","title":"collateralizationOracle"},{"location":"developers/contracts/IPCVEquityMinter/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IPCVEquityMinter/#setaprbasispoints","text":"function setAPRBasisPoints(uint256) nonpayable","title":"setAPRBasisPoints"},{"location":"developers/contracts/IPCVEquityMinter/#params_2","text":"Param Type Notes newAprBasisPoints uint256","title":"Params"},{"location":"developers/contracts/IPCVEquityMinter/#setcollateralizationoracle","text":"function setCollateralizationOracle(address) nonpayable","title":"setCollateralizationOracle"},{"location":"developers/contracts/IPCVEquityMinter/#params_3","text":"Param Type Notes newCollateralizationOracle address","title":"Params"},{"location":"developers/contracts/IPCVGuardian/","text":"IPCVGuardian IPCVGuardian an interface for defining how the PCVGuardian functions DEV NOTE: any implementation of this contract should be granted the roles of Guardian and PCVController in order to work correctly Events PCVGuardianERC20Withdrawal event PCVGuardianERC20Withdrawal(address,address,address,uint256) Params Param Type Notes pcvDeposit indexed address destination indexed address token indexed address amount uint256 PCVGuardianETHWithdrawal event PCVGuardianETHWithdrawal(address,address,uint256) Params Param Type Notes pcvDeposit indexed address destination indexed address amount uint256 PCVGuardianWithdrawal event PCVGuardianWithdrawal(address,address,uint256) Params Param Type Notes pcvDeposit indexed address destination indexed address amount uint256 SafeAddressAdded event SafeAddressAdded(address) Params Param Type Notes safeAddress indexed address SafeAddressRemoved event SafeAddressRemoved(address) Params Param Type Notes safeAddress indexed address Methods getSafeAddresses function getSafeAddresses() view returns(address[]) returns all safe addresses Returns Param Type Notes address[] isSafeAddress function isSafeAddress(address) view returns(bool) returns true if the the provided address is a valid destination to withdraw funds to Params Param Type Notes pcvDeposit address the address to check Returns Param Type Notes bool setSafeAddress function setSafeAddress(address) nonpayable governor-only method to set an address as \"safe\" to withdraw funds to Params Param Type Notes pcvDeposit address the address to set as safe setSafeAddresses function setSafeAddresses(address[]) nonpayable batch version of setSafeAddress Params Param Type Notes safeAddresses address[] the addresses to set as safe, as calldata unsetSafeAddress function unsetSafeAddress(address) nonpayable governor-or-guardian-only method to un-set an address as \"safe\" to withdraw funds to Params Param Type Notes pcvDeposit address the address to un-set as safe unsetSafeAddresses function unsetSafeAddresses(address[]) nonpayable batch version of unsetSafeAddresses Params Param Type Notes safeAddresses address[] the addresses to un-set as safe withdrawERC20ToSafeAddress function withdrawERC20ToSafeAddress(address,address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it Params Param Type Notes pcvDeposit address the deposit to pull funds from safeAddress address the destination address to withdraw to token address the token to withdraw amount uint256 the amount of funds to withdraw pauseAfter bool whether to pause the pcv after withdrawing depositAfter bool if true, attempts to deposit to the target PCV deposit withdrawETHToSafeAddress function withdrawETHToSafeAddress(address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it Params Param Type Notes pcvDeposit address the address of the pcv deposit contract safeAddress address the destination address to withdraw to amount uint256 the amount of tokens to withdraw pauseAfter bool if true, the pcv contract will be paused after the withdraw depositAfter bool if true, attempts to deposit to the target PCV deposit withdrawToSafeAddress function withdrawToSafeAddress(address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it Params Param Type Notes pcvDeposit address the address of the pcv deposit contract safeAddress address the destination address to withdraw to amount uint256 the amount to withdraw pauseAfter bool if true, the pcv contract will be paused after the withdraw depositAfter bool if true, attempts to deposit to the target PCV deposit","title":"IPCVGuardian"},{"location":"developers/contracts/IPCVGuardian/#ipcvguardian","text":"IPCVGuardian an interface for defining how the PCVGuardian functions DEV NOTE: any implementation of this contract should be granted the roles of Guardian and PCVController in order to work correctly","title":"IPCVGuardian"},{"location":"developers/contracts/IPCVGuardian/#events","text":"","title":"Events"},{"location":"developers/contracts/IPCVGuardian/#pcvguardianerc20withdrawal","text":"event PCVGuardianERC20Withdrawal(address,address,address,uint256)","title":"PCVGuardianERC20Withdrawal"},{"location":"developers/contracts/IPCVGuardian/#params","text":"Param Type Notes pcvDeposit indexed address destination indexed address token indexed address amount uint256","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#pcvguardianethwithdrawal","text":"event PCVGuardianETHWithdrawal(address,address,uint256)","title":"PCVGuardianETHWithdrawal"},{"location":"developers/contracts/IPCVGuardian/#params_1","text":"Param Type Notes pcvDeposit indexed address destination indexed address amount uint256","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#pcvguardianwithdrawal","text":"event PCVGuardianWithdrawal(address,address,uint256)","title":"PCVGuardianWithdrawal"},{"location":"developers/contracts/IPCVGuardian/#params_2","text":"Param Type Notes pcvDeposit indexed address destination indexed address amount uint256","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#safeaddressadded","text":"event SafeAddressAdded(address)","title":"SafeAddressAdded"},{"location":"developers/contracts/IPCVGuardian/#params_3","text":"Param Type Notes safeAddress indexed address","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#safeaddressremoved","text":"event SafeAddressRemoved(address)","title":"SafeAddressRemoved"},{"location":"developers/contracts/IPCVGuardian/#params_4","text":"Param Type Notes safeAddress indexed address","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IPCVGuardian/#getsafeaddresses","text":"function getSafeAddresses() view returns(address[]) returns all safe addresses","title":"getSafeAddresses"},{"location":"developers/contracts/IPCVGuardian/#returns","text":"Param Type Notes address[]","title":"Returns"},{"location":"developers/contracts/IPCVGuardian/#issafeaddress","text":"function isSafeAddress(address) view returns(bool) returns true if the the provided address is a valid destination to withdraw funds to","title":"isSafeAddress"},{"location":"developers/contracts/IPCVGuardian/#params_5","text":"Param Type Notes pcvDeposit address the address to check","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#returns_1","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/IPCVGuardian/#setsafeaddress","text":"function setSafeAddress(address) nonpayable governor-only method to set an address as \"safe\" to withdraw funds to","title":"setSafeAddress"},{"location":"developers/contracts/IPCVGuardian/#params_6","text":"Param Type Notes pcvDeposit address the address to set as safe","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#setsafeaddresses","text":"function setSafeAddresses(address[]) nonpayable batch version of setSafeAddress","title":"setSafeAddresses"},{"location":"developers/contracts/IPCVGuardian/#params_7","text":"Param Type Notes safeAddresses address[] the addresses to set as safe, as calldata","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#unsetsafeaddress","text":"function unsetSafeAddress(address) nonpayable governor-or-guardian-only method to un-set an address as \"safe\" to withdraw funds to","title":"unsetSafeAddress"},{"location":"developers/contracts/IPCVGuardian/#params_8","text":"Param Type Notes pcvDeposit address the address to un-set as safe","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#unsetsafeaddresses","text":"function unsetSafeAddresses(address[]) nonpayable batch version of unsetSafeAddresses","title":"unsetSafeAddresses"},{"location":"developers/contracts/IPCVGuardian/#params_9","text":"Param Type Notes safeAddresses address[] the addresses to un-set as safe","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#withdrawerc20tosafeaddress","text":"function withdrawERC20ToSafeAddress(address,address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it","title":"withdrawERC20ToSafeAddress"},{"location":"developers/contracts/IPCVGuardian/#params_10","text":"Param Type Notes pcvDeposit address the deposit to pull funds from safeAddress address the destination address to withdraw to token address the token to withdraw amount uint256 the amount of funds to withdraw pauseAfter bool whether to pause the pcv after withdrawing depositAfter bool if true, attempts to deposit to the target PCV deposit","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#withdrawethtosafeaddress","text":"function withdrawETHToSafeAddress(address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it","title":"withdrawETHToSafeAddress"},{"location":"developers/contracts/IPCVGuardian/#params_11","text":"Param Type Notes pcvDeposit address the address of the pcv deposit contract safeAddress address the destination address to withdraw to amount uint256 the amount of tokens to withdraw pauseAfter bool if true, the pcv contract will be paused after the withdraw depositAfter bool if true, attempts to deposit to the target PCV deposit","title":"Params"},{"location":"developers/contracts/IPCVGuardian/#withdrawtosafeaddress","text":"function withdrawToSafeAddress(address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it","title":"withdrawToSafeAddress"},{"location":"developers/contracts/IPCVGuardian/#params_12","text":"Param Type Notes pcvDeposit address the address of the pcv deposit contract safeAddress address the destination address to withdraw to amount uint256 the amount to withdraw pauseAfter bool if true, the pcv contract will be paused after the withdraw depositAfter bool if true, attempts to deposit to the target PCV deposit","title":"Params"},{"location":"developers/contracts/IPausable/","text":"\u2b05\ufe0f Contracts IPausable Methods paused function paused() view returns(bool) Returns Param Type Notes bool \u2b05\ufe0f Contracts","title":"IPausable"},{"location":"developers/contracts/IPausable/#ipausable","text":"","title":"IPausable"},{"location":"developers/contracts/IPausable/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IPausable/#paused","text":"function paused() view returns(bool)","title":"paused"},{"location":"developers/contracts/IPausable/#returns","text":"Param Type Notes bool \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/IPoolManager/","text":"\u2b05\ufe0f Contracts IPoolManager Methods token function token() nonpayable returns(address) Returns Param Type Notes address \u2b05\ufe0f Contracts","title":"IPoolManager"},{"location":"developers/contracts/IPoolManager/#ipoolmanager","text":"","title":"IPoolManager"},{"location":"developers/contracts/IPoolManager/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IPoolManager/#token","text":"function token() nonpayable returns(address)","title":"token"},{"location":"developers/contracts/IPoolManager/#returns","text":"Param Type Notes address \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/IRewardsDistributorAdmin/","text":"IRewardsDistributorAdmin Methods AUTO_REWARDS_DISTRIBUTOR_ROLE function AUTO_REWARDS_DISTRIBUTOR_ROLE() view returns(bytes32) Role for AutoRewardsDistributor contracts Returns Param Type Notes bytes32 _acceptAdmin function _acceptAdmin() nonpayable Accepts transfer of admin rights. msg.sender must be pendingAdmin Admin function for pending admin to accept role and update admin _addMarket function _addMarket(address) nonpayable Add a default market to claim rewards for in claimRewards() Params Param Type Notes cToken address The market to add _grantComp function _grantComp(address,uint256) nonpayable Transfer COMP to the recipient Note: If there is not enough COMP, we do not perform the transfer all. Params Param Type Notes recipient address The address of the recipient to transfer COMP to amount uint256 The amount of COMP to (possibly) transfer _setCompBorrowSpeed function _setCompBorrowSpeed(address,uint256) nonpayable Set COMP speed for a single market Params Param Type Notes cToken address The market whose COMP speed to update compSpeed uint256 New COMP speed for market _setCompSupplySpeed function _setCompSupplySpeed(address,uint256) nonpayable Set COMP speed for a single market Params Param Type Notes cToken address The market whose COMP speed to update compSpeed uint256 New COMP speed for market _setContributorCompSpeed function _setContributorCompSpeed(address,uint256) nonpayable Set COMP speed for a single contributor Params Param Type Notes contributor address The contributor whose COMP speed to update compSpeed uint256 New COMP speed for contributor _setImplementation function _setImplementation(address) nonpayable Set logic contract address Params Param Type Notes implementation_ address _setPendingAdmin function _setPendingAdmin(address) nonpayable Begins transfer of admin rights. The newPendingAdmin must call _acceptAdmin to finalize the transfer. Admin function to begin change of admin. The newPendingAdmin must call _acceptAdmin to finalize the transfer. Params Param Type Notes newPendingAdmin address New pending admin. compBorrowSpeeds function compBorrowSpeeds(address) view returns(uint256) The portion of compRate that each market currently receives Params Param Type Notes address Returns Param Type Notes uint256 compSupplySpeeds function compSupplySpeeds(address) view returns(uint256) The portion of compRate that each market currently receives Params Param Type Notes address Returns Param Type Notes uint256","title":"IRewardsDistributorAdmin"},{"location":"developers/contracts/IRewardsDistributorAdmin/#irewardsdistributoradmin","text":"","title":"IRewardsDistributorAdmin"},{"location":"developers/contracts/IRewardsDistributorAdmin/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IRewardsDistributorAdmin/#auto_rewards_distributor_role","text":"function AUTO_REWARDS_DISTRIBUTOR_ROLE() view returns(bytes32) Role for AutoRewardsDistributor contracts","title":"AUTO_REWARDS_DISTRIBUTOR_ROLE"},{"location":"developers/contracts/IRewardsDistributorAdmin/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/IRewardsDistributorAdmin/#_acceptadmin","text":"function _acceptAdmin() nonpayable Accepts transfer of admin rights. msg.sender must be pendingAdmin Admin function for pending admin to accept role and update admin","title":"_acceptAdmin"},{"location":"developers/contracts/IRewardsDistributorAdmin/#_addmarket","text":"function _addMarket(address) nonpayable Add a default market to claim rewards for in claimRewards()","title":"_addMarket"},{"location":"developers/contracts/IRewardsDistributorAdmin/#params","text":"Param Type Notes cToken address The market to add","title":"Params"},{"location":"developers/contracts/IRewardsDistributorAdmin/#_grantcomp","text":"function _grantComp(address,uint256) nonpayable Transfer COMP to the recipient Note: If there is not enough COMP, we do not perform the transfer all.","title":"_grantComp"},{"location":"developers/contracts/IRewardsDistributorAdmin/#params_1","text":"Param Type Notes recipient address The address of the recipient to transfer COMP to amount uint256 The amount of COMP to (possibly) transfer","title":"Params"},{"location":"developers/contracts/IRewardsDistributorAdmin/#_setcompborrowspeed","text":"function _setCompBorrowSpeed(address,uint256) nonpayable Set COMP speed for a single market","title":"_setCompBorrowSpeed"},{"location":"developers/contracts/IRewardsDistributorAdmin/#params_2","text":"Param Type Notes cToken address The market whose COMP speed to update compSpeed uint256 New COMP speed for market","title":"Params"},{"location":"developers/contracts/IRewardsDistributorAdmin/#_setcompsupplyspeed","text":"function _setCompSupplySpeed(address,uint256) nonpayable Set COMP speed for a single market","title":"_setCompSupplySpeed"},{"location":"developers/contracts/IRewardsDistributorAdmin/#params_3","text":"Param Type Notes cToken address The market whose COMP speed to update compSpeed uint256 New COMP speed for market","title":"Params"},{"location":"developers/contracts/IRewardsDistributorAdmin/#_setcontributorcompspeed","text":"function _setContributorCompSpeed(address,uint256) nonpayable Set COMP speed for a single contributor","title":"_setContributorCompSpeed"},{"location":"developers/contracts/IRewardsDistributorAdmin/#params_4","text":"Param Type Notes contributor address The contributor whose COMP speed to update compSpeed uint256 New COMP speed for contributor","title":"Params"},{"location":"developers/contracts/IRewardsDistributorAdmin/#_setimplementation","text":"function _setImplementation(address) nonpayable Set logic contract address","title":"_setImplementation"},{"location":"developers/contracts/IRewardsDistributorAdmin/#params_5","text":"Param Type Notes implementation_ address","title":"Params"},{"location":"developers/contracts/IRewardsDistributorAdmin/#_setpendingadmin","text":"function _setPendingAdmin(address) nonpayable Begins transfer of admin rights. The newPendingAdmin must call _acceptAdmin to finalize the transfer. Admin function to begin change of admin. The newPendingAdmin must call _acceptAdmin to finalize the transfer.","title":"_setPendingAdmin"},{"location":"developers/contracts/IRewardsDistributorAdmin/#params_6","text":"Param Type Notes newPendingAdmin address New pending admin.","title":"Params"},{"location":"developers/contracts/IRewardsDistributorAdmin/#compborrowspeeds","text":"function compBorrowSpeeds(address) view returns(uint256) The portion of compRate that each market currently receives","title":"compBorrowSpeeds"},{"location":"developers/contracts/IRewardsDistributorAdmin/#params_7","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/IRewardsDistributorAdmin/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IRewardsDistributorAdmin/#compsupplyspeeds","text":"function compSupplySpeeds(address) view returns(uint256) The portion of compRate that each market currently receives","title":"compSupplySpeeds"},{"location":"developers/contracts/IRewardsDistributorAdmin/#params_8","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/IRewardsDistributorAdmin/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IStableMaster/","text":"\u2b05\ufe0f Contracts IStableMaster Methods agToken function agToken() nonpayable returns(address) Returns Param Type Notes address burn function burn(uint256,address,address,address,uint256) nonpayable Params Param Type Notes amount uint256 burner address dest address poolManager address minCollatAmount uint256 mint function mint(uint256,address,address,uint256) nonpayable Params Param Type Notes amount uint256 user address poolManager address minStableAmount uint256 unpause function unpause(bytes32,address) nonpayable Params Param Type Notes agent bytes32 poolManager address \u2b05\ufe0f Contracts","title":"IStableMaster"},{"location":"developers/contracts/IStableMaster/#istablemaster","text":"","title":"IStableMaster"},{"location":"developers/contracts/IStableMaster/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IStableMaster/#agtoken","text":"function agToken() nonpayable returns(address)","title":"agToken"},{"location":"developers/contracts/IStableMaster/#returns","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IStableMaster/#burn","text":"function burn(uint256,address,address,address,uint256) nonpayable","title":"burn"},{"location":"developers/contracts/IStableMaster/#params","text":"Param Type Notes amount uint256 burner address dest address poolManager address minCollatAmount uint256","title":"Params"},{"location":"developers/contracts/IStableMaster/#mint","text":"function mint(uint256,address,address,uint256) nonpayable","title":"mint"},{"location":"developers/contracts/IStableMaster/#params_1","text":"Param Type Notes amount uint256 user address poolManager address minStableAmount uint256","title":"Params"},{"location":"developers/contracts/IStableMaster/#unpause","text":"function unpause(bytes32,address) nonpayable","title":"unpause"},{"location":"developers/contracts/IStableMaster/#params_2","text":"Param Type Notes agent bytes32 poolManager address \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/IStableSwapSTETH/","text":"\u2b05\ufe0f Contracts IStableSwapSTETH Methods coins function coins(uint256) view returns(address) Params Param Type Notes arg0 uint256 Returns Param Type Notes address exchange function exchange(int128,int128,uint256,uint256) payable returns(uint256) Params Param Type Notes i int128 j int128 dx uint256 min_dy uint256 Returns Param Type Notes uint256 get_dy function get_dy(int128,int128,uint256) view returns(uint256) Params Param Type Notes i int128 j int128 dx uint256 Returns Param Type Notes uint256 \u2b05\ufe0f Contracts","title":"IStableSwapSTETH"},{"location":"developers/contracts/IStableSwapSTETH/#istableswapsteth","text":"","title":"IStableSwapSTETH"},{"location":"developers/contracts/IStableSwapSTETH/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IStableSwapSTETH/#coins","text":"function coins(uint256) view returns(address)","title":"coins"},{"location":"developers/contracts/IStableSwapSTETH/#params","text":"Param Type Notes arg0 uint256","title":"Params"},{"location":"developers/contracts/IStableSwapSTETH/#returns","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IStableSwapSTETH/#exchange","text":"function exchange(int128,int128,uint256,uint256) payable returns(uint256)","title":"exchange"},{"location":"developers/contracts/IStableSwapSTETH/#params_1","text":"Param Type Notes i int128 j int128 dx uint256 min_dy uint256","title":"Params"},{"location":"developers/contracts/IStableSwapSTETH/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IStableSwapSTETH/#get_dy","text":"function get_dy(int128,int128,uint256) view returns(uint256)","title":"get_dy"},{"location":"developers/contracts/IStableSwapSTETH/#params_2","text":"Param Type Notes i int128 j int128 dx uint256","title":"Params"},{"location":"developers/contracts/IStableSwapSTETH/#returns_2","text":"Param Type Notes uint256 \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/IStakingRewards/","text":"\u2b05\ufe0f Contracts IStakingRewards Methods balanceOf function balanceOf(address) view returns(uint256) Params Param Type Notes account address Returns Param Type Notes uint256 getReward function getReward() nonpayable stake function stake(uint256) nonpayable Params Param Type Notes amount uint256 stakingToken function stakingToken() nonpayable returns(address) Returns Param Type Notes address withdraw function withdraw(uint256) nonpayable Params Param Type Notes amount uint256 \u2b05\ufe0f Contracts","title":"IStakingRewards"},{"location":"developers/contracts/IStakingRewards/#istakingrewards","text":"","title":"IStakingRewards"},{"location":"developers/contracts/IStakingRewards/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IStakingRewards/#balanceof","text":"function balanceOf(address) view returns(uint256)","title":"balanceOf"},{"location":"developers/contracts/IStakingRewards/#params","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/IStakingRewards/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IStakingRewards/#getreward","text":"function getReward() nonpayable","title":"getReward"},{"location":"developers/contracts/IStakingRewards/#stake","text":"function stake(uint256) nonpayable","title":"stake"},{"location":"developers/contracts/IStakingRewards/#params_1","text":"Param Type Notes amount uint256","title":"Params"},{"location":"developers/contracts/IStakingRewards/#stakingtoken","text":"function stakingToken() nonpayable returns(address)","title":"stakingToken"},{"location":"developers/contracts/IStakingRewards/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IStakingRewards/#withdraw","text":"function withdraw(uint256) nonpayable","title":"withdraw"},{"location":"developers/contracts/IStakingRewards/#params_2","text":"Param Type Notes amount uint256 \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/ITimelock/","text":"\u2b05\ufe0f Contracts ITimelock Methods execute function execute(address,uint256,bytes,bytes32,bytes32) nonpayable Params Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32 \u2b05\ufe0f Contracts","title":"ITimelock"},{"location":"developers/contracts/ITimelock/#itimelock","text":"","title":"ITimelock"},{"location":"developers/contracts/ITimelock/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ITimelock/#execute","text":"function execute(address,uint256,bytes,bytes32,bytes32) nonpayable","title":"execute"},{"location":"developers/contracts/ITimelock/#params","text":"Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32 \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/ITimelockedDelegator/","text":"ITimelockedDelegator TimelockedDelegator interface Author: Fei Protocol Events Delegate event Delegate(address,uint256) Params Param Type Notes _delegatee indexed address _amount uint256 Undelegate event Undelegate(address,uint256) Params Param Type Notes _delegatee indexed address _amount uint256 Methods delegate function delegate(address,uint256) nonpayable Params Param Type Notes delegatee address amount uint256 delegateAmount function delegateAmount(address) view returns(uint256) Params Param Type Notes delegatee address Returns Param Type Notes uint256 delegateContract function delegateContract(address) view returns(address) Params Param Type Notes delegatee address Returns Param Type Notes address totalDelegated function totalDelegated() view returns(uint256) Returns Param Type Notes uint256 tribe function tribe() view returns(address) Returns Param Type Notes address undelegate function undelegate(address) nonpayable returns(uint256) Params Param Type Notes delegatee address Returns Param Type Notes uint256","title":"ITimelockedDelegator"},{"location":"developers/contracts/ITimelockedDelegator/#itimelockeddelegator","text":"TimelockedDelegator interface Author: Fei Protocol","title":"ITimelockedDelegator"},{"location":"developers/contracts/ITimelockedDelegator/#events","text":"","title":"Events"},{"location":"developers/contracts/ITimelockedDelegator/#delegate","text":"event Delegate(address,uint256)","title":"Delegate"},{"location":"developers/contracts/ITimelockedDelegator/#params","text":"Param Type Notes _delegatee indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ITimelockedDelegator/#undelegate","text":"event Undelegate(address,uint256)","title":"Undelegate"},{"location":"developers/contracts/ITimelockedDelegator/#params_1","text":"Param Type Notes _delegatee indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ITimelockedDelegator/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ITimelockedDelegator/#delegate_1","text":"function delegate(address,uint256) nonpayable","title":"delegate"},{"location":"developers/contracts/ITimelockedDelegator/#params_2","text":"Param Type Notes delegatee address amount uint256","title":"Params"},{"location":"developers/contracts/ITimelockedDelegator/#delegateamount","text":"function delegateAmount(address) view returns(uint256)","title":"delegateAmount"},{"location":"developers/contracts/ITimelockedDelegator/#params_3","text":"Param Type Notes delegatee address","title":"Params"},{"location":"developers/contracts/ITimelockedDelegator/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITimelockedDelegator/#delegatecontract","text":"function delegateContract(address) view returns(address)","title":"delegateContract"},{"location":"developers/contracts/ITimelockedDelegator/#params_4","text":"Param Type Notes delegatee address","title":"Params"},{"location":"developers/contracts/ITimelockedDelegator/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ITimelockedDelegator/#totaldelegated","text":"function totalDelegated() view returns(uint256)","title":"totalDelegated"},{"location":"developers/contracts/ITimelockedDelegator/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITimelockedDelegator/#tribe","text":"function tribe() view returns(address)","title":"tribe"},{"location":"developers/contracts/ITimelockedDelegator/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ITimelockedDelegator/#undelegate_1","text":"function undelegate(address) nonpayable returns(uint256)","title":"undelegate"},{"location":"developers/contracts/ITimelockedDelegator/#params_5","text":"Param Type Notes delegatee address","title":"Params"},{"location":"developers/contracts/ITimelockedDelegator/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITokemakERC20Pool/","text":"\u2b05\ufe0f Contracts ITokemakERC20Pool Methods deposit function deposit(uint256) nonpayable Params Param Type Notes amount uint256 withdraw function withdraw(uint256) nonpayable Params Param Type Notes requestedAmount uint256 \u2b05\ufe0f Contracts","title":"ITokemakERC20Pool"},{"location":"developers/contracts/ITokemakERC20Pool/#itokemakerc20pool","text":"","title":"ITokemakERC20Pool"},{"location":"developers/contracts/ITokemakERC20Pool/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ITokemakERC20Pool/#deposit","text":"function deposit(uint256) nonpayable","title":"deposit"},{"location":"developers/contracts/ITokemakERC20Pool/#params","text":"Param Type Notes amount uint256","title":"Params"},{"location":"developers/contracts/ITokemakERC20Pool/#withdraw","text":"function withdraw(uint256) nonpayable","title":"withdraw"},{"location":"developers/contracts/ITokemakERC20Pool/#params_1","text":"Param Type Notes requestedAmount uint256 \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/ITokemakEthPool/","text":"\u2b05\ufe0f Contracts ITokemakEthPool Methods deposit function deposit(uint256) payable Params Param Type Notes amount uint256 withdraw function withdraw(uint256,bool) nonpayable Params Param Type Notes requestedAmount uint256 asEth bool \u2b05\ufe0f Contracts","title":"ITokemakEthPool"},{"location":"developers/contracts/ITokemakEthPool/#itokemakethpool","text":"","title":"ITokemakEthPool"},{"location":"developers/contracts/ITokemakEthPool/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ITokemakEthPool/#deposit","text":"function deposit(uint256) payable","title":"deposit"},{"location":"developers/contracts/ITokemakEthPool/#params","text":"Param Type Notes amount uint256","title":"Params"},{"location":"developers/contracts/ITokemakEthPool/#withdraw","text":"function withdraw(uint256,bool) nonpayable","title":"withdraw"},{"location":"developers/contracts/ITokemakEthPool/#params_1","text":"Param Type Notes requestedAmount uint256 asEth bool \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/ITokenTimelock/","text":"ITokenTimelock TokenTimelock interface Author: Fei Protocol Events BeneficiaryUpdate event BeneficiaryUpdate(address) Params Param Type Notes _beneficiary indexed address PendingBeneficiaryUpdate event PendingBeneficiaryUpdate(address) Params Param Type Notes _pendingBeneficiary indexed address Release event Release(address,address,uint256) Params Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256 Methods acceptBeneficiary function acceptBeneficiary() nonpayable alreadyReleasedAmount function alreadyReleasedAmount() view returns(uint256) Returns Param Type Notes uint256 availableForRelease function availableForRelease() view returns(uint256) Returns Param Type Notes uint256 beneficiary function beneficiary() view returns(address) Returns Param Type Notes address initialBalance function initialBalance() view returns(uint256) Returns Param Type Notes uint256 lockedToken function lockedToken() view returns(address) Returns Param Type Notes address pendingBeneficiary function pendingBeneficiary() view returns(address) Returns Param Type Notes address release function release(address,uint256) nonpayable Params Param Type Notes to address amount uint256 releaseMax function releaseMax(address) nonpayable Params Param Type Notes to address setPendingBeneficiary function setPendingBeneficiary(address) nonpayable Params Param Type Notes _pendingBeneficiary address totalToken function totalToken() view returns(uint256) Returns Param Type Notes uint256","title":"ITokenTimelock"},{"location":"developers/contracts/ITokenTimelock/#itokentimelock","text":"TokenTimelock interface Author: Fei Protocol","title":"ITokenTimelock"},{"location":"developers/contracts/ITokenTimelock/#events","text":"","title":"Events"},{"location":"developers/contracts/ITokenTimelock/#beneficiaryupdate","text":"event BeneficiaryUpdate(address)","title":"BeneficiaryUpdate"},{"location":"developers/contracts/ITokenTimelock/#params","text":"Param Type Notes _beneficiary indexed address","title":"Params"},{"location":"developers/contracts/ITokenTimelock/#pendingbeneficiaryupdate","text":"event PendingBeneficiaryUpdate(address)","title":"PendingBeneficiaryUpdate"},{"location":"developers/contracts/ITokenTimelock/#params_1","text":"Param Type Notes _pendingBeneficiary indexed address","title":"Params"},{"location":"developers/contracts/ITokenTimelock/#release","text":"event Release(address,address,uint256)","title":"Release"},{"location":"developers/contracts/ITokenTimelock/#params_2","text":"Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/ITokenTimelock/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ITokenTimelock/#acceptbeneficiary","text":"function acceptBeneficiary() nonpayable","title":"acceptBeneficiary"},{"location":"developers/contracts/ITokenTimelock/#alreadyreleasedamount","text":"function alreadyReleasedAmount() view returns(uint256)","title":"alreadyReleasedAmount"},{"location":"developers/contracts/ITokenTimelock/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITokenTimelock/#availableforrelease","text":"function availableForRelease() view returns(uint256)","title":"availableForRelease"},{"location":"developers/contracts/ITokenTimelock/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITokenTimelock/#beneficiary","text":"function beneficiary() view returns(address)","title":"beneficiary"},{"location":"developers/contracts/ITokenTimelock/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ITokenTimelock/#initialbalance","text":"function initialBalance() view returns(uint256)","title":"initialBalance"},{"location":"developers/contracts/ITokenTimelock/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITokenTimelock/#lockedtoken","text":"function lockedToken() view returns(address)","title":"lockedToken"},{"location":"developers/contracts/ITokenTimelock/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ITokenTimelock/#pendingbeneficiary","text":"function pendingBeneficiary() view returns(address)","title":"pendingBeneficiary"},{"location":"developers/contracts/ITokenTimelock/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ITokenTimelock/#release_1","text":"function release(address,uint256) nonpayable","title":"release"},{"location":"developers/contracts/ITokenTimelock/#params_3","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/ITokenTimelock/#releasemax","text":"function releaseMax(address) nonpayable","title":"releaseMax"},{"location":"developers/contracts/ITokenTimelock/#params_4","text":"Param Type Notes to address","title":"Params"},{"location":"developers/contracts/ITokenTimelock/#setpendingbeneficiary","text":"function setPendingBeneficiary(address) nonpayable","title":"setPendingBeneficiary"},{"location":"developers/contracts/ITokenTimelock/#params_5","text":"Param Type Notes _pendingBeneficiary address","title":"Params"},{"location":"developers/contracts/ITokenTimelock/#totaltoken","text":"function totalToken() view returns(uint256)","title":"totalToken"},{"location":"developers/contracts/ITokenTimelock/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribalChief/","text":"ITribalChief FEI stablecoin interface Author: Fei Protocol Methods SCALE_FACTOR function SCALE_FACTOR() view returns(uint256) Returns Param Type Notes uint256 add function add(uint120,address,address,(uint128,uint128)[]) nonpayable Params Param Type Notes allocPoint uint120 _stakedToken address _rewarder address rewardData tuple[] deposit function deposit(uint256,uint256,uint64) nonpayable functions for users to deposit, withdraw and get rewards from our contracts Params Param Type Notes _pid uint256 _amount uint256 _lockLength uint64 emergencyWithdraw function emergencyWithdraw(uint256,address) nonpayable Params Param Type Notes pid uint256 to address getTotalStakedInPool function getTotalStakedInPool(uint256,address) view returns(uint256) Params Param Type Notes pid uint256 user address Returns Param Type Notes uint256 governorAddPoolMultiplier function governorAddPoolMultiplier(uint256,uint64,uint64) nonpayable Params Param Type Notes _pid uint256 lockLength uint64 newRewardsMultiplier uint64 governorWithdrawTribe function governorWithdrawTribe(uint256) nonpayable Params Param Type Notes amount uint256 harvest function harvest(uint256,address) nonpayable Params Param Type Notes pid uint256 to address lockPool function lockPool(uint256) nonpayable Params Param Type Notes _pid uint256 massUpdatePools function massUpdatePools(uint256[]) nonpayable Params Param Type Notes pids uint256[] numPools function numPools() view returns(uint256) Returns Param Type Notes uint256 openUserDeposits function openUserDeposits(uint256,address) view returns(uint256) Params Param Type Notes pid uint256 user address Returns Param Type Notes uint256 pendingRewards function pendingRewards(uint256,address) view returns(uint256) Params Param Type Notes _pid uint256 _user address Returns Param Type Notes uint256 poolInfo function poolInfo(uint256) view returns(uint256,uint256,uint128,uint120,bool) Params Param Type Notes _index uint256 Returns Param Type Notes uint256 uint256 uint128 uint120 bool resetRewards function resetRewards(uint256) nonpayable functions to change and add pools and multipliers that can only be called by governor, guardian, or TribalChiefAdmin Params Param Type Notes _pid uint256 rewardMultipliers function rewardMultipliers(uint256,uint128) view returns(uint128) view only functions that return data on pools, user deposit(s), tribe distributed per block, and other constants Params Param Type Notes _pid uint256 _blocksLocked uint128 Returns Param Type Notes uint128 set function set(uint256,uint120,address,bool) nonpayable Params Param Type Notes _pid uint256 _allocPoint uint120 _rewarder address overwrite bool stakedToken function stakedToken(uint256) view returns(address) Params Param Type Notes _index uint256 Returns Param Type Notes address totalAllocPoint function totalAllocPoint() view returns(uint256) Returns Param Type Notes uint256 tribePerBlock function tribePerBlock() view returns(uint256) Returns Param Type Notes uint256 unlockPool function unlockPool(uint256) nonpayable Params Param Type Notes _pid uint256 updateBlockReward function updateBlockReward(uint256) nonpayable Params Param Type Notes newBlockReward uint256 updatePool function updatePool(uint256) nonpayable functions to update pools that can be called by anyone Params Param Type Notes pid uint256 withdrawAllAndHarvest function withdrawAllAndHarvest(uint256,address) nonpayable Params Param Type Notes pid uint256 to address withdrawFromDeposit function withdrawFromDeposit(uint256,uint256,address,uint256) nonpayable Params Param Type Notes pid uint256 amount uint256 to address index uint256","title":"ITribalChief"},{"location":"developers/contracts/ITribalChief/#itribalchief","text":"FEI stablecoin interface Author: Fei Protocol","title":"ITribalChief"},{"location":"developers/contracts/ITribalChief/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ITribalChief/#scale_factor","text":"function SCALE_FACTOR() view returns(uint256)","title":"SCALE_FACTOR"},{"location":"developers/contracts/ITribalChief/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribalChief/#add","text":"function add(uint120,address,address,(uint128,uint128)[]) nonpayable","title":"add"},{"location":"developers/contracts/ITribalChief/#params","text":"Param Type Notes allocPoint uint120 _stakedToken address _rewarder address rewardData tuple[]","title":"Params"},{"location":"developers/contracts/ITribalChief/#deposit","text":"function deposit(uint256,uint256,uint64) nonpayable functions for users to deposit, withdraw and get rewards from our contracts","title":"deposit"},{"location":"developers/contracts/ITribalChief/#params_1","text":"Param Type Notes _pid uint256 _amount uint256 _lockLength uint64","title":"Params"},{"location":"developers/contracts/ITribalChief/#emergencywithdraw","text":"function emergencyWithdraw(uint256,address) nonpayable","title":"emergencyWithdraw"},{"location":"developers/contracts/ITribalChief/#params_2","text":"Param Type Notes pid uint256 to address","title":"Params"},{"location":"developers/contracts/ITribalChief/#gettotalstakedinpool","text":"function getTotalStakedInPool(uint256,address) view returns(uint256)","title":"getTotalStakedInPool"},{"location":"developers/contracts/ITribalChief/#params_3","text":"Param Type Notes pid uint256 user address","title":"Params"},{"location":"developers/contracts/ITribalChief/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribalChief/#governoraddpoolmultiplier","text":"function governorAddPoolMultiplier(uint256,uint64,uint64) nonpayable","title":"governorAddPoolMultiplier"},{"location":"developers/contracts/ITribalChief/#params_4","text":"Param Type Notes _pid uint256 lockLength uint64 newRewardsMultiplier uint64","title":"Params"},{"location":"developers/contracts/ITribalChief/#governorwithdrawtribe","text":"function governorWithdrawTribe(uint256) nonpayable","title":"governorWithdrawTribe"},{"location":"developers/contracts/ITribalChief/#params_5","text":"Param Type Notes amount uint256","title":"Params"},{"location":"developers/contracts/ITribalChief/#harvest","text":"function harvest(uint256,address) nonpayable","title":"harvest"},{"location":"developers/contracts/ITribalChief/#params_6","text":"Param Type Notes pid uint256 to address","title":"Params"},{"location":"developers/contracts/ITribalChief/#lockpool","text":"function lockPool(uint256) nonpayable","title":"lockPool"},{"location":"developers/contracts/ITribalChief/#params_7","text":"Param Type Notes _pid uint256","title":"Params"},{"location":"developers/contracts/ITribalChief/#massupdatepools","text":"function massUpdatePools(uint256[]) nonpayable","title":"massUpdatePools"},{"location":"developers/contracts/ITribalChief/#params_8","text":"Param Type Notes pids uint256[]","title":"Params"},{"location":"developers/contracts/ITribalChief/#numpools","text":"function numPools() view returns(uint256)","title":"numPools"},{"location":"developers/contracts/ITribalChief/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribalChief/#openuserdeposits","text":"function openUserDeposits(uint256,address) view returns(uint256)","title":"openUserDeposits"},{"location":"developers/contracts/ITribalChief/#params_9","text":"Param Type Notes pid uint256 user address","title":"Params"},{"location":"developers/contracts/ITribalChief/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribalChief/#pendingrewards","text":"function pendingRewards(uint256,address) view returns(uint256)","title":"pendingRewards"},{"location":"developers/contracts/ITribalChief/#params_10","text":"Param Type Notes _pid uint256 _user address","title":"Params"},{"location":"developers/contracts/ITribalChief/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribalChief/#poolinfo","text":"function poolInfo(uint256) view returns(uint256,uint256,uint128,uint120,bool)","title":"poolInfo"},{"location":"developers/contracts/ITribalChief/#params_11","text":"Param Type Notes _index uint256","title":"Params"},{"location":"developers/contracts/ITribalChief/#returns_5","text":"Param Type Notes uint256 uint256 uint128 uint120 bool","title":"Returns"},{"location":"developers/contracts/ITribalChief/#resetrewards","text":"function resetRewards(uint256) nonpayable functions to change and add pools and multipliers that can only be called by governor, guardian, or TribalChiefAdmin","title":"resetRewards"},{"location":"developers/contracts/ITribalChief/#params_12","text":"Param Type Notes _pid uint256","title":"Params"},{"location":"developers/contracts/ITribalChief/#rewardmultipliers","text":"function rewardMultipliers(uint256,uint128) view returns(uint128) view only functions that return data on pools, user deposit(s), tribe distributed per block, and other constants","title":"rewardMultipliers"},{"location":"developers/contracts/ITribalChief/#params_13","text":"Param Type Notes _pid uint256 _blocksLocked uint128","title":"Params"},{"location":"developers/contracts/ITribalChief/#returns_6","text":"Param Type Notes uint128","title":"Returns"},{"location":"developers/contracts/ITribalChief/#set","text":"function set(uint256,uint120,address,bool) nonpayable","title":"set"},{"location":"developers/contracts/ITribalChief/#params_14","text":"Param Type Notes _pid uint256 _allocPoint uint120 _rewarder address overwrite bool","title":"Params"},{"location":"developers/contracts/ITribalChief/#stakedtoken","text":"function stakedToken(uint256) view returns(address)","title":"stakedToken"},{"location":"developers/contracts/ITribalChief/#params_15","text":"Param Type Notes _index uint256","title":"Params"},{"location":"developers/contracts/ITribalChief/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ITribalChief/#totalallocpoint","text":"function totalAllocPoint() view returns(uint256)","title":"totalAllocPoint"},{"location":"developers/contracts/ITribalChief/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribalChief/#tribeperblock","text":"function tribePerBlock() view returns(uint256)","title":"tribePerBlock"},{"location":"developers/contracts/ITribalChief/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribalChief/#unlockpool","text":"function unlockPool(uint256) nonpayable","title":"unlockPool"},{"location":"developers/contracts/ITribalChief/#params_16","text":"Param Type Notes _pid uint256","title":"Params"},{"location":"developers/contracts/ITribalChief/#updateblockreward","text":"function updateBlockReward(uint256) nonpayable","title":"updateBlockReward"},{"location":"developers/contracts/ITribalChief/#params_17","text":"Param Type Notes newBlockReward uint256","title":"Params"},{"location":"developers/contracts/ITribalChief/#updatepool","text":"function updatePool(uint256) nonpayable functions to update pools that can be called by anyone","title":"updatePool"},{"location":"developers/contracts/ITribalChief/#params_18","text":"Param Type Notes pid uint256","title":"Params"},{"location":"developers/contracts/ITribalChief/#withdrawallandharvest","text":"function withdrawAllAndHarvest(uint256,address) nonpayable","title":"withdrawAllAndHarvest"},{"location":"developers/contracts/ITribalChief/#params_19","text":"Param Type Notes pid uint256 to address","title":"Params"},{"location":"developers/contracts/ITribalChief/#withdrawfromdeposit","text":"function withdrawFromDeposit(uint256,uint256,address,uint256) nonpayable","title":"withdrawFromDeposit"},{"location":"developers/contracts/ITribalChief/#params_20","text":"Param Type Notes pid uint256 amount uint256 to address index uint256","title":"Params"},{"location":"developers/contracts/ITribe/","text":"ITribe Events Approval event Approval(address,address,uint256) Params Param Type Notes owner indexed address spender indexed address value uint256 Transfer event Transfer(address,address,uint256) Params Param Type Notes from indexed address to indexed address value uint256 Methods allowance function allowance(address,address) view returns(uint256) Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called. Params Param Type Notes owner address spender address Returns Param Type Notes uint256 approve function approve(address,uint256) nonpayable returns(bool) Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event. Params Param Type Notes spender address amount uint256 Returns Param Type Notes bool balanceOf function balanceOf(address) view returns(uint256) Returns the amount of tokens owned by account . Params Param Type Notes account address Returns Param Type Notes uint256 mint function mint(address,uint256) nonpayable Params Param Type Notes to address amount uint256 setMinter function setMinter(address) nonpayable Params Param Type Notes newMinter address totalSupply function totalSupply() view returns(uint256) Returns the amount of tokens in existence. Returns Param Type Notes uint256 transfer function transfer(address,uint256) nonpayable returns(bool) Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. Params Param Type Notes recipient address amount uint256 Returns Param Type Notes bool transferFrom function transferFrom(address,address,uint256) nonpayable returns(bool) Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. Params Param Type Notes sender address recipient address amount uint256 Returns Param Type Notes bool","title":"ITribe"},{"location":"developers/contracts/ITribe/#itribe","text":"","title":"ITribe"},{"location":"developers/contracts/ITribe/#events","text":"","title":"Events"},{"location":"developers/contracts/ITribe/#approval","text":"event Approval(address,address,uint256)","title":"Approval"},{"location":"developers/contracts/ITribe/#params","text":"Param Type Notes owner indexed address spender indexed address value uint256","title":"Params"},{"location":"developers/contracts/ITribe/#transfer","text":"event Transfer(address,address,uint256)","title":"Transfer"},{"location":"developers/contracts/ITribe/#params_1","text":"Param Type Notes from indexed address to indexed address value uint256","title":"Params"},{"location":"developers/contracts/ITribe/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ITribe/#allowance","text":"function allowance(address,address) view returns(uint256) Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.","title":"allowance"},{"location":"developers/contracts/ITribe/#params_2","text":"Param Type Notes owner address spender address","title":"Params"},{"location":"developers/contracts/ITribe/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribe/#approve","text":"function approve(address,uint256) nonpayable returns(bool) Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.","title":"approve"},{"location":"developers/contracts/ITribe/#params_3","text":"Param Type Notes spender address amount uint256","title":"Params"},{"location":"developers/contracts/ITribe/#returns_1","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ITribe/#balanceof","text":"function balanceOf(address) view returns(uint256) Returns the amount of tokens owned by account .","title":"balanceOf"},{"location":"developers/contracts/ITribe/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/ITribe/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribe/#mint","text":"function mint(address,uint256) nonpayable","title":"mint"},{"location":"developers/contracts/ITribe/#params_5","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/ITribe/#setminter","text":"function setMinter(address) nonpayable","title":"setMinter"},{"location":"developers/contracts/ITribe/#params_6","text":"Param Type Notes newMinter address","title":"Params"},{"location":"developers/contracts/ITribe/#totalsupply","text":"function totalSupply() view returns(uint256) Returns the amount of tokens in existence.","title":"totalSupply"},{"location":"developers/contracts/ITribe/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribe/#transfer_1","text":"function transfer(address,uint256) nonpayable returns(bool) Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.","title":"transfer"},{"location":"developers/contracts/ITribe/#params_7","text":"Param Type Notes recipient address amount uint256","title":"Params"},{"location":"developers/contracts/ITribe/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ITribe/#transferfrom","text":"function transferFrom(address,address,uint256) nonpayable returns(bool) Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.","title":"transferFrom"},{"location":"developers/contracts/ITribe/#params_8","text":"Param Type Notes sender address recipient address amount uint256","title":"Params"},{"location":"developers/contracts/ITribe/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ITribeMinter/","text":"ITribeMinter TribeMinter interface Author: Fei Protocol Events AnnualMaxInflationUpdate event AnnualMaxInflationUpdate(uint256,uint256) Params Param Type Notes oldAnnualMaxInflationBasisPoints uint256 newAnnualMaxInflationBasisPoints uint256 TribeRewardsDripperUpdate event TribeRewardsDripperUpdate(address,address) Params Param Type Notes oldTribeRewardsDripper indexed address newTribeRewardsDripper indexed address TribeTreasuryUpdate event TribeTreasuryUpdate(address,address) Params Param Type Notes oldTribeTreasury indexed address newTribeTreasury indexed address Methods annualMaxInflationBasisPoints function annualMaxInflationBasisPoints() view returns(uint256) Returns Param Type Notes uint256 idealBufferCap function idealBufferCap() view returns(uint256) Returns Param Type Notes uint256 isPokeNeeded function isPokeNeeded() view returns(bool) Returns Param Type Notes bool mint function mint(address,uint256) nonpayable Params Param Type Notes to address amount uint256 poke function poke() nonpayable setAnnualMaxInflationBasisPoints function setAnnualMaxInflationBasisPoints(uint256) nonpayable Params Param Type Notes newAnnualMaxInflationBasisPoints uint256 setMinter function setMinter(address) nonpayable Params Param Type Notes newMinter address setTribeRewardsDripper function setTribeRewardsDripper(address) nonpayable Params Param Type Notes newTribeRewardsDripper address setTribeTreasury function setTribeTreasury(address) nonpayable Params Param Type Notes newTribeTreasury address totalSupply function totalSupply() view returns(uint256) Returns Param Type Notes uint256 tribeCirculatingSupply function tribeCirculatingSupply() view returns(uint256) Returns Param Type Notes uint256 tribeRewardsDripper function tribeRewardsDripper() view returns(address) Returns Param Type Notes address tribeTreasury function tribeTreasury() view returns(address) Returns Param Type Notes address","title":"ITribeMinter"},{"location":"developers/contracts/ITribeMinter/#itribeminter","text":"TribeMinter interface Author: Fei Protocol","title":"ITribeMinter"},{"location":"developers/contracts/ITribeMinter/#events","text":"","title":"Events"},{"location":"developers/contracts/ITribeMinter/#annualmaxinflationupdate","text":"event AnnualMaxInflationUpdate(uint256,uint256)","title":"AnnualMaxInflationUpdate"},{"location":"developers/contracts/ITribeMinter/#params","text":"Param Type Notes oldAnnualMaxInflationBasisPoints uint256 newAnnualMaxInflationBasisPoints uint256","title":"Params"},{"location":"developers/contracts/ITribeMinter/#triberewardsdripperupdate","text":"event TribeRewardsDripperUpdate(address,address)","title":"TribeRewardsDripperUpdate"},{"location":"developers/contracts/ITribeMinter/#params_1","text":"Param Type Notes oldTribeRewardsDripper indexed address newTribeRewardsDripper indexed address","title":"Params"},{"location":"developers/contracts/ITribeMinter/#tribetreasuryupdate","text":"event TribeTreasuryUpdate(address,address)","title":"TribeTreasuryUpdate"},{"location":"developers/contracts/ITribeMinter/#params_2","text":"Param Type Notes oldTribeTreasury indexed address newTribeTreasury indexed address","title":"Params"},{"location":"developers/contracts/ITribeMinter/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ITribeMinter/#annualmaxinflationbasispoints","text":"function annualMaxInflationBasisPoints() view returns(uint256)","title":"annualMaxInflationBasisPoints"},{"location":"developers/contracts/ITribeMinter/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribeMinter/#idealbuffercap","text":"function idealBufferCap() view returns(uint256)","title":"idealBufferCap"},{"location":"developers/contracts/ITribeMinter/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribeMinter/#ispokeneeded","text":"function isPokeNeeded() view returns(bool)","title":"isPokeNeeded"},{"location":"developers/contracts/ITribeMinter/#returns_2","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ITribeMinter/#mint","text":"function mint(address,uint256) nonpayable","title":"mint"},{"location":"developers/contracts/ITribeMinter/#params_3","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/ITribeMinter/#poke","text":"function poke() nonpayable","title":"poke"},{"location":"developers/contracts/ITribeMinter/#setannualmaxinflationbasispoints","text":"function setAnnualMaxInflationBasisPoints(uint256) nonpayable","title":"setAnnualMaxInflationBasisPoints"},{"location":"developers/contracts/ITribeMinter/#params_4","text":"Param Type Notes newAnnualMaxInflationBasisPoints uint256","title":"Params"},{"location":"developers/contracts/ITribeMinter/#setminter","text":"function setMinter(address) nonpayable","title":"setMinter"},{"location":"developers/contracts/ITribeMinter/#params_5","text":"Param Type Notes newMinter address","title":"Params"},{"location":"developers/contracts/ITribeMinter/#settriberewardsdripper","text":"function setTribeRewardsDripper(address) nonpayable","title":"setTribeRewardsDripper"},{"location":"developers/contracts/ITribeMinter/#params_6","text":"Param Type Notes newTribeRewardsDripper address","title":"Params"},{"location":"developers/contracts/ITribeMinter/#settribetreasury","text":"function setTribeTreasury(address) nonpayable","title":"setTribeTreasury"},{"location":"developers/contracts/ITribeMinter/#params_7","text":"Param Type Notes newTribeTreasury address","title":"Params"},{"location":"developers/contracts/ITribeMinter/#totalsupply","text":"function totalSupply() view returns(uint256)","title":"totalSupply"},{"location":"developers/contracts/ITribeMinter/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribeMinter/#tribecirculatingsupply","text":"function tribeCirculatingSupply() view returns(uint256)","title":"tribeCirculatingSupply"},{"location":"developers/contracts/ITribeMinter/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/ITribeMinter/#triberewardsdripper","text":"function tribeRewardsDripper() view returns(address)","title":"tribeRewardsDripper"},{"location":"developers/contracts/ITribeMinter/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ITribeMinter/#tribetreasury","text":"function tribeTreasury() view returns(address)","title":"tribeTreasury"},{"location":"developers/contracts/ITribeMinter/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ITribeReserveStabilizer/","text":"ITribeReserveStabilizer a Tribe Reserve Stabilizer interface Author: Fei Protocol Events CollateralizationOracleUpdate event CollateralizationOracleUpdate(address,address) Params Param Type Notes oldCollateralizationOracle indexed address newCollateralizationOracle indexed address CollateralizationThresholdUpdate event CollateralizationThresholdUpdate(uint256,uint256) Params Param Type Notes oldCollateralizationThresholdBasisPoints uint256 newCollateralizationThresholdBasisPoints uint256 Methods collateralizationOracle function collateralizationOracle() view returns(address) Returns Param Type Notes address collateralizationThreshold function collateralizationThreshold() view returns(tuple) Returns Param Type Notes tuple isCollateralizationBelowThreshold function isCollateralizationBelowThreshold() view returns(bool) Returns Param Type Notes bool resetOracleDelayCountdown function resetOracleDelayCountdown() nonpayable setCollateralizationOracle function setCollateralizationOracle(address) nonpayable Params Param Type Notes newCollateralizationOracle address setCollateralizationThreshold function setCollateralizationThreshold(uint256) nonpayable Params Param Type Notes newCollateralizationThresholdBasisPoints uint256 startOracleDelayCountdown function startOracleDelayCountdown() nonpayable","title":"ITribeReserveStabilizer"},{"location":"developers/contracts/ITribeReserveStabilizer/#itribereservestabilizer","text":"a Tribe Reserve Stabilizer interface Author: Fei Protocol","title":"ITribeReserveStabilizer"},{"location":"developers/contracts/ITribeReserveStabilizer/#events","text":"","title":"Events"},{"location":"developers/contracts/ITribeReserveStabilizer/#collateralizationoracleupdate","text":"event CollateralizationOracleUpdate(address,address)","title":"CollateralizationOracleUpdate"},{"location":"developers/contracts/ITribeReserveStabilizer/#params","text":"Param Type Notes oldCollateralizationOracle indexed address newCollateralizationOracle indexed address","title":"Params"},{"location":"developers/contracts/ITribeReserveStabilizer/#collateralizationthresholdupdate","text":"event CollateralizationThresholdUpdate(uint256,uint256)","title":"CollateralizationThresholdUpdate"},{"location":"developers/contracts/ITribeReserveStabilizer/#params_1","text":"Param Type Notes oldCollateralizationThresholdBasisPoints uint256 newCollateralizationThresholdBasisPoints uint256","title":"Params"},{"location":"developers/contracts/ITribeReserveStabilizer/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ITribeReserveStabilizer/#collateralizationoracle","text":"function collateralizationOracle() view returns(address)","title":"collateralizationOracle"},{"location":"developers/contracts/ITribeReserveStabilizer/#returns","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ITribeReserveStabilizer/#collateralizationthreshold","text":"function collateralizationThreshold() view returns(tuple)","title":"collateralizationThreshold"},{"location":"developers/contracts/ITribeReserveStabilizer/#returns_1","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/ITribeReserveStabilizer/#iscollateralizationbelowthreshold","text":"function isCollateralizationBelowThreshold() view returns(bool)","title":"isCollateralizationBelowThreshold"},{"location":"developers/contracts/ITribeReserveStabilizer/#returns_2","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/ITribeReserveStabilizer/#resetoracledelaycountdown","text":"function resetOracleDelayCountdown() nonpayable","title":"resetOracleDelayCountdown"},{"location":"developers/contracts/ITribeReserveStabilizer/#setcollateralizationoracle","text":"function setCollateralizationOracle(address) nonpayable","title":"setCollateralizationOracle"},{"location":"developers/contracts/ITribeReserveStabilizer/#params_2","text":"Param Type Notes newCollateralizationOracle address","title":"Params"},{"location":"developers/contracts/ITribeReserveStabilizer/#setcollateralizationthreshold","text":"function setCollateralizationThreshold(uint256) nonpayable","title":"setCollateralizationThreshold"},{"location":"developers/contracts/ITribeReserveStabilizer/#params_3","text":"Param Type Notes newCollateralizationThresholdBasisPoints uint256","title":"Params"},{"location":"developers/contracts/ITribeReserveStabilizer/#startoracledelaycountdown","text":"function startOracleDelayCountdown() nonpayable","title":"startOracleDelayCountdown"},{"location":"developers/contracts/IUniswapPCVDeposit/","text":"IUniswapPCVDeposit a PCV Deposit interface Author: Fei Protocol Events MaxBasisPointsFromPegLPUpdate event MaxBasisPointsFromPegLPUpdate(uint256,uint256) Params Param Type Notes oldMaxBasisPointsFromPegLP uint256 newMaxBasisPointsFromPegLP uint256 Methods liquidityOwned function liquidityOwned() view returns(uint256) Returns Param Type Notes uint256 maxBasisPointsFromPegLP function maxBasisPointsFromPegLP() view returns(uint256) Returns Param Type Notes uint256 router function router() view returns(address) Returns Param Type Notes address setMaxBasisPointsFromPegLP function setMaxBasisPointsFromPegLP(uint256) nonpayable Params Param Type Notes amount uint256","title":"IUniswapPCVDeposit"},{"location":"developers/contracts/IUniswapPCVDeposit/#iuniswappcvdeposit","text":"a PCV Deposit interface Author: Fei Protocol","title":"IUniswapPCVDeposit"},{"location":"developers/contracts/IUniswapPCVDeposit/#events","text":"","title":"Events"},{"location":"developers/contracts/IUniswapPCVDeposit/#maxbasispointsfrompeglpupdate","text":"event MaxBasisPointsFromPegLPUpdate(uint256,uint256)","title":"MaxBasisPointsFromPegLPUpdate"},{"location":"developers/contracts/IUniswapPCVDeposit/#params","text":"Param Type Notes oldMaxBasisPointsFromPegLP uint256 newMaxBasisPointsFromPegLP uint256","title":"Params"},{"location":"developers/contracts/IUniswapPCVDeposit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IUniswapPCVDeposit/#liquidityowned","text":"function liquidityOwned() view returns(uint256)","title":"liquidityOwned"},{"location":"developers/contracts/IUniswapPCVDeposit/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IUniswapPCVDeposit/#maxbasispointsfrompeglp","text":"function maxBasisPointsFromPegLP() view returns(uint256)","title":"maxBasisPointsFromPegLP"},{"location":"developers/contracts/IUniswapPCVDeposit/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IUniswapPCVDeposit/#router","text":"function router() view returns(address)","title":"router"},{"location":"developers/contracts/IUniswapPCVDeposit/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/IUniswapPCVDeposit/#setmaxbasispointsfrompeglp","text":"function setMaxBasisPointsFromPegLP(uint256) nonpayable","title":"setMaxBasisPointsFromPegLP"},{"location":"developers/contracts/IUniswapPCVDeposit/#params_1","text":"Param Type Notes amount uint256","title":"Params"},{"location":"developers/contracts/IVotingToken/","text":"IVotingToken Events Approval event Approval(address,address,uint256) Params Param Type Notes owner indexed address spender indexed address value uint256 Transfer event Transfer(address,address,uint256) Params Param Type Notes from indexed address to indexed address value uint256 Methods allowance function allowance(address,address) view returns(uint256) Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called. Params Param Type Notes owner address spender address Returns Param Type Notes uint256 approve function approve(address,uint256) nonpayable returns(bool) Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event. Params Param Type Notes spender address amount uint256 Returns Param Type Notes bool balanceOf function balanceOf(address) view returns(uint256) Returns the amount of tokens owned by account . Params Param Type Notes account address Returns Param Type Notes uint256 delegate function delegate(address) nonpayable Params Param Type Notes delegatee address totalSupply function totalSupply() view returns(uint256) Returns the amount of tokens in existence. Returns Param Type Notes uint256 transfer function transfer(address,uint256) nonpayable returns(bool) Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. Params Param Type Notes recipient address amount uint256 Returns Param Type Notes bool transferFrom function transferFrom(address,address,uint256) nonpayable returns(bool) Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. Params Param Type Notes sender address recipient address amount uint256 Returns Param Type Notes bool","title":"IVotingToken"},{"location":"developers/contracts/IVotingToken/#ivotingtoken","text":"","title":"IVotingToken"},{"location":"developers/contracts/IVotingToken/#events","text":"","title":"Events"},{"location":"developers/contracts/IVotingToken/#approval","text":"event Approval(address,address,uint256)","title":"Approval"},{"location":"developers/contracts/IVotingToken/#params","text":"Param Type Notes owner indexed address spender indexed address value uint256","title":"Params"},{"location":"developers/contracts/IVotingToken/#transfer","text":"event Transfer(address,address,uint256)","title":"Transfer"},{"location":"developers/contracts/IVotingToken/#params_1","text":"Param Type Notes from indexed address to indexed address value uint256","title":"Params"},{"location":"developers/contracts/IVotingToken/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IVotingToken/#allowance","text":"function allowance(address,address) view returns(uint256) Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.","title":"allowance"},{"location":"developers/contracts/IVotingToken/#params_2","text":"Param Type Notes owner address spender address","title":"Params"},{"location":"developers/contracts/IVotingToken/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IVotingToken/#approve","text":"function approve(address,uint256) nonpayable returns(bool) Sets amount as the allowance of spender over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.","title":"approve"},{"location":"developers/contracts/IVotingToken/#params_3","text":"Param Type Notes spender address amount uint256","title":"Params"},{"location":"developers/contracts/IVotingToken/#returns_1","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/IVotingToken/#balanceof","text":"function balanceOf(address) view returns(uint256) Returns the amount of tokens owned by account .","title":"balanceOf"},{"location":"developers/contracts/IVotingToken/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/IVotingToken/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IVotingToken/#delegate","text":"function delegate(address) nonpayable","title":"delegate"},{"location":"developers/contracts/IVotingToken/#params_5","text":"Param Type Notes delegatee address","title":"Params"},{"location":"developers/contracts/IVotingToken/#totalsupply","text":"function totalSupply() view returns(uint256) Returns the amount of tokens in existence.","title":"totalSupply"},{"location":"developers/contracts/IVotingToken/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/IVotingToken/#transfer_1","text":"function transfer(address,uint256) nonpayable returns(bool) Moves amount tokens from the caller's account to recipient . Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.","title":"transfer"},{"location":"developers/contracts/IVotingToken/#params_6","text":"Param Type Notes recipient address amount uint256","title":"Params"},{"location":"developers/contracts/IVotingToken/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/IVotingToken/#transferfrom","text":"function transferFrom(address,address,uint256) nonpayable returns(bool) Moves amount tokens from sender to recipient using the allowance mechanism. amount is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.","title":"transferFrom"},{"location":"developers/contracts/IVotingToken/#params_7","text":"Param Type Notes sender address recipient address amount uint256","title":"Params"},{"location":"developers/contracts/IVotingToken/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/IncentivesController/","text":"\u2b05\ufe0f Contracts IncentivesController Methods claimRewards function claimRewards(address[],uint256,address) nonpayable Params Param Type Notes assets address[] amount uint256 to address getRewardsBalance function getRewardsBalance(address[],address) view returns(uint256) Params Param Type Notes assets address[] user address Returns Param Type Notes uint256 \u2b05\ufe0f Contracts","title":"IncentivesController"},{"location":"developers/contracts/IncentivesController/#incentivescontroller","text":"","title":"IncentivesController"},{"location":"developers/contracts/IncentivesController/#methods","text":"","title":"Methods"},{"location":"developers/contracts/IncentivesController/#claimrewards","text":"function claimRewards(address[],uint256,address) nonpayable","title":"claimRewards"},{"location":"developers/contracts/IncentivesController/#params","text":"Param Type Notes assets address[] amount uint256 to address","title":"Params"},{"location":"developers/contracts/IncentivesController/#getrewardsbalance","text":"function getRewardsBalance(address[],address) view returns(uint256)","title":"getRewardsBalance"},{"location":"developers/contracts/IncentivesController/#params_1","text":"Param Type Notes assets address[] user address","title":"Params"},{"location":"developers/contracts/IncentivesController/#returns","text":"Param Type Notes uint256 \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/LendingPool/","text":"\u2b05\ufe0f Contracts LendingPool Methods deposit function deposit(address,uint256,address,uint16) nonpayable Params Param Type Notes asset address amount uint256 onBehalfOf address referralCode uint16 withdraw function withdraw(address,uint256,address) nonpayable Params Param Type Notes asset address amount uint256 to address \u2b05\ufe0f Contracts","title":"LendingPool"},{"location":"developers/contracts/LendingPool/#lendingpool","text":"","title":"LendingPool"},{"location":"developers/contracts/LendingPool/#methods","text":"","title":"Methods"},{"location":"developers/contracts/LendingPool/#deposit","text":"function deposit(address,uint256,address,uint16) nonpayable","title":"deposit"},{"location":"developers/contracts/LendingPool/#params","text":"Param Type Notes asset address amount uint256 onBehalfOf address referralCode uint16","title":"Params"},{"location":"developers/contracts/LendingPool/#withdraw","text":"function withdraw(address,uint256,address) nonpayable","title":"withdraw"},{"location":"developers/contracts/LendingPool/#params_1","text":"Param Type Notes asset address amount uint256 to address \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/LinearTokenTimelock/","text":"LinearTokenTimelock Events BeneficiaryUpdate event BeneficiaryUpdate(address) Params Param Type Notes _beneficiary indexed address DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 PendingBeneficiaryUpdate event PendingBeneficiaryUpdate(address) Params Param Type Notes _pendingBeneficiary indexed address Release event Release(address,address,uint256) Params Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256 TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Methods acceptBeneficiary function acceptBeneficiary() nonpayable pending beneficiary accepts new beneficiary alreadyReleasedAmount function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary Returns Param Type Notes uint256 availableForRelease function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release Returns Param Type Notes uint256 beneficiary function beneficiary() view returns(address) beneficiary of tokens after they are released Returns Param Type Notes address clawback function clawback() nonpayable clawbackAdmin function clawbackAdmin() view returns(address) Returns Param Type Notes address cliffSeconds function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed Returns Param Type Notes uint256 duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 initialBalance function initialBalance() view returns(uint256) initial balance of lockedToken Returns Param Type Notes uint256 isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool lockedToken function lockedToken() view returns(address) ERC20 basic token contract being held in timelock Returns Param Type Notes address passedCliff function passedCliff() view returns(bool) Returns Param Type Notes bool pendingBeneficiary function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary Returns Param Type Notes address release function release(address,uint256) nonpayable releases amount unlocked tokens to address to Params Param Type Notes to address amount uint256 releaseMax function releaseMax(address) nonpayable releases maximum unlocked tokens to address to Params Param Type Notes to address remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setPendingBeneficiary function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted Params Param Type Notes _pendingBeneficiary address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 totalToken function totalToken() view returns(uint256) the total amount of tokens held by timelock Returns Param Type Notes uint256","title":"LinearTokenTimelock"},{"location":"developers/contracts/LinearTokenTimelock/#lineartokentimelock","text":"","title":"LinearTokenTimelock"},{"location":"developers/contracts/LinearTokenTimelock/#events","text":"","title":"Events"},{"location":"developers/contracts/LinearTokenTimelock/#beneficiaryupdate","text":"event BeneficiaryUpdate(address)","title":"BeneficiaryUpdate"},{"location":"developers/contracts/LinearTokenTimelock/#params","text":"Param Type Notes _beneficiary indexed address","title":"Params"},{"location":"developers/contracts/LinearTokenTimelock/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/LinearTokenTimelock/#params_1","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/LinearTokenTimelock/#pendingbeneficiaryupdate","text":"event PendingBeneficiaryUpdate(address)","title":"PendingBeneficiaryUpdate"},{"location":"developers/contracts/LinearTokenTimelock/#params_2","text":"Param Type Notes _pendingBeneficiary indexed address","title":"Params"},{"location":"developers/contracts/LinearTokenTimelock/#release","text":"event Release(address,address,uint256)","title":"Release"},{"location":"developers/contracts/LinearTokenTimelock/#params_3","text":"Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/LinearTokenTimelock/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/LinearTokenTimelock/#params_4","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/LinearTokenTimelock/#methods","text":"","title":"Methods"},{"location":"developers/contracts/LinearTokenTimelock/#acceptbeneficiary","text":"function acceptBeneficiary() nonpayable pending beneficiary accepts new beneficiary","title":"acceptBeneficiary"},{"location":"developers/contracts/LinearTokenTimelock/#alreadyreleasedamount","text":"function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary","title":"alreadyReleasedAmount"},{"location":"developers/contracts/LinearTokenTimelock/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#availableforrelease","text":"function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release","title":"availableForRelease"},{"location":"developers/contracts/LinearTokenTimelock/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#beneficiary","text":"function beneficiary() view returns(address) beneficiary of tokens after they are released","title":"beneficiary"},{"location":"developers/contracts/LinearTokenTimelock/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#clawback","text":"function clawback() nonpayable","title":"clawback"},{"location":"developers/contracts/LinearTokenTimelock/#clawbackadmin","text":"function clawbackAdmin() view returns(address)","title":"clawbackAdmin"},{"location":"developers/contracts/LinearTokenTimelock/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#cliffseconds","text":"function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed","title":"cliffSeconds"},{"location":"developers/contracts/LinearTokenTimelock/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/LinearTokenTimelock/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#initialbalance","text":"function initialBalance() view returns(uint256) initial balance of lockedToken","title":"initialBalance"},{"location":"developers/contracts/LinearTokenTimelock/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/LinearTokenTimelock/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/LinearTokenTimelock/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#lockedtoken","text":"function lockedToken() view returns(address) ERC20 basic token contract being held in timelock","title":"lockedToken"},{"location":"developers/contracts/LinearTokenTimelock/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#passedcliff","text":"function passedCliff() view returns(bool)","title":"passedCliff"},{"location":"developers/contracts/LinearTokenTimelock/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#pendingbeneficiary","text":"function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary","title":"pendingBeneficiary"},{"location":"developers/contracts/LinearTokenTimelock/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#release_1","text":"function release(address,uint256) nonpayable releases amount unlocked tokens to address to","title":"release"},{"location":"developers/contracts/LinearTokenTimelock/#params_5","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/LinearTokenTimelock/#releasemax","text":"function releaseMax(address) nonpayable releases maximum unlocked tokens to address to","title":"releaseMax"},{"location":"developers/contracts/LinearTokenTimelock/#params_6","text":"Param Type Notes to address","title":"Params"},{"location":"developers/contracts/LinearTokenTimelock/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/LinearTokenTimelock/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#setpendingbeneficiary","text":"function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted","title":"setPendingBeneficiary"},{"location":"developers/contracts/LinearTokenTimelock/#params_7","text":"Param Type Notes _pendingBeneficiary address","title":"Params"},{"location":"developers/contracts/LinearTokenTimelock/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/LinearTokenTimelock/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/LinearTokenTimelock/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/LinearTokenTimelock/#totaltoken","text":"function totalToken() view returns(uint256) the total amount of tokens held by timelock","title":"totalToken"},{"location":"developers/contracts/LinearTokenTimelock/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/","text":"\u2b05\ufe0f Contracts OptimisticTimelock Events CallExecuted event CallExecuted(bytes32,uint256,address,uint256,bytes) Params Param Type Notes id indexed bytes32 index indexed uint256 target address value uint256 data bytes CallScheduled event CallScheduled(bytes32,uint256,address,uint256,bytes,bytes32,uint256) Params Param Type Notes id indexed bytes32 index indexed uint256 target address value uint256 data bytes predecessor bytes32 delay uint256 Cancelled event Cancelled(bytes32) Params Param Type Notes id indexed bytes32 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address MinDelayChange event MinDelayChange(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 Paused event Paused(address) Params Param Type Notes account address RoleAdminChanged event RoleAdminChanged(bytes32,bytes32,bytes32) Params Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32 RoleGranted event RoleGranted(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address RoleRevoked event RoleRevoked(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 DEFAULT_ADMIN_ROLE function DEFAULT_ADMIN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 EXECUTOR_ROLE function EXECUTOR_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 PROPOSER_ROLE function PROPOSER_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 TIMELOCK_ADMIN_ROLE function TIMELOCK_ADMIN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 becomeAdmin function becomeAdmin() nonpayable allow guardian or governor to assume timelock admin roles This more elegantly achieves optimistic timelock as follows: - veto: grant self PROPOSER_ROLE and cancel - pause proposals: revoke PROPOSER_ROLE from target - pause execution: revoke EXECUTOR_ROLE from target - set new proposer: revoke old proposer and add new one In addition it allows for much more granular and flexible access for multisig operators cancel function cancel(bytes32) nonpayable Cancel an operation. Requirements: - the caller must have the 'proposer' role. Params Param Type Notes id bytes32 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address execute function execute(address,uint256,bytes,bytes32,bytes32) payable Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role. Params Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32 executeBatch function executeBatch(address[],uint256[],bytes[],bytes32,bytes32) payable Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role. Params Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getMinDelay function getMinDelay() view returns(uint256) Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls updateDelay . Returns Param Type Notes duration uint256 getRoleAdmin function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}. Params Param Type Notes role bytes32 Returns Param Type Notes bytes32 getTimestamp function getTimestamp(bytes32) view returns(uint256) Returns the timestamp at with an operation becomes ready (0 for unset operations, 1 for done operations). Params Param Type Notes id bytes32 Returns Param Type Notes timestamp uint256 grantRole function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address hasRole function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role . Params Param Type Notes role bytes32 account address Returns Param Type Notes bool hashOperation function hashOperation(address,uint256,bytes,bytes32,bytes32) pure returns(bytes32) Returns the identifier of an operation containing a single transaction. Params Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32 Returns Param Type Notes hash bytes32 hashOperationBatch function hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32) pure returns(bytes32) Returns the identifier of an operation containing a batch of transactions. Params Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32 Returns Param Type Notes hash bytes32 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isOperation function isOperation(bytes32) view returns(bool) Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations. Params Param Type Notes id bytes32 Returns Param Type Notes pending bool isOperationDone function isOperationDone(bytes32) view returns(bool) Returns whether an operation is done or not. Params Param Type Notes id bytes32 Returns Param Type Notes done bool isOperationPending function isOperationPending(bytes32) view returns(bool) Returns whether an operation is pending or not. Params Param Type Notes id bytes32 Returns Param Type Notes pending bool isOperationReady function isOperationReady(bytes32) view returns(bool) Returns whether an operation is ready or not. Params Param Type Notes id bytes32 Returns Param Type Notes ready bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool renounceRole function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked role , emits a {RoleRevoked} event. Requirements: - the caller must be account . Params Param Type Notes role bytes32 account address revokeRole function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address schedule function schedule(address,uint256,bytes,bytes32,bytes32,uint256) nonpayable Schedule an operation containing a single transaction. Emits a {CallScheduled} event. Requirements: - the caller must have the 'proposer' role. Params Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32 delay uint256 scheduleBatch function scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256) nonpayable Schedule an operation containing a batch of transactions. Emits one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role. Params Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32 delay uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address supportsInterface function supportsInterface(bytes4) view returns(bool) See {IERC165-supportsInterface}. Params Param Type Notes interfaceId bytes4 Returns Param Type Notes bool tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused updateDelay function updateDelay(uint256) nonpayable Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function. Params Param Type Notes newDelay uint256 \u2b05\ufe0f Contracts","title":"OptimisticTimelock"},{"location":"developers/contracts/OptimisticTimelock/#optimistictimelock","text":"","title":"OptimisticTimelock"},{"location":"developers/contracts/OptimisticTimelock/#events","text":"","title":"Events"},{"location":"developers/contracts/OptimisticTimelock/#callexecuted","text":"event CallExecuted(bytes32,uint256,address,uint256,bytes)","title":"CallExecuted"},{"location":"developers/contracts/OptimisticTimelock/#params","text":"Param Type Notes id indexed bytes32 index indexed uint256 target address value uint256 data bytes","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#callscheduled","text":"event CallScheduled(bytes32,uint256,address,uint256,bytes,bytes32,uint256)","title":"CallScheduled"},{"location":"developers/contracts/OptimisticTimelock/#params_1","text":"Param Type Notes id indexed bytes32 index indexed uint256 target address value uint256 data bytes predecessor bytes32 delay uint256","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#cancelled","text":"event Cancelled(bytes32)","title":"Cancelled"},{"location":"developers/contracts/OptimisticTimelock/#params_2","text":"Param Type Notes id indexed bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/OptimisticTimelock/#params_3","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/OptimisticTimelock/#params_4","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#mindelaychange","text":"event MinDelayChange(uint256,uint256)","title":"MinDelayChange"},{"location":"developers/contracts/OptimisticTimelock/#params_5","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/OptimisticTimelock/#params_6","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#roleadminchanged","text":"event RoleAdminChanged(bytes32,bytes32,bytes32)","title":"RoleAdminChanged"},{"location":"developers/contracts/OptimisticTimelock/#params_7","text":"Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#rolegranted","text":"event RoleGranted(bytes32,address,address)","title":"RoleGranted"},{"location":"developers/contracts/OptimisticTimelock/#params_8","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#rolerevoked","text":"event RoleRevoked(bytes32,address,address)","title":"RoleRevoked"},{"location":"developers/contracts/OptimisticTimelock/#params_9","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/OptimisticTimelock/#params_10","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#methods","text":"","title":"Methods"},{"location":"developers/contracts/OptimisticTimelock/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/OptimisticTimelock/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#default_admin_role","text":"function DEFAULT_ADMIN_ROLE() view returns(bytes32)","title":"DEFAULT_ADMIN_ROLE"},{"location":"developers/contracts/OptimisticTimelock/#returns_1","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#executor_role","text":"function EXECUTOR_ROLE() view returns(bytes32)","title":"EXECUTOR_ROLE"},{"location":"developers/contracts/OptimisticTimelock/#returns_2","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#proposer_role","text":"function PROPOSER_ROLE() view returns(bytes32)","title":"PROPOSER_ROLE"},{"location":"developers/contracts/OptimisticTimelock/#returns_3","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#timelock_admin_role","text":"function TIMELOCK_ADMIN_ROLE() view returns(bytes32)","title":"TIMELOCK_ADMIN_ROLE"},{"location":"developers/contracts/OptimisticTimelock/#returns_4","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#becomeadmin","text":"function becomeAdmin() nonpayable allow guardian or governor to assume timelock admin roles This more elegantly achieves optimistic timelock as follows: - veto: grant self PROPOSER_ROLE and cancel - pause proposals: revoke PROPOSER_ROLE from target - pause execution: revoke EXECUTOR_ROLE from target - set new proposer: revoke old proposer and add new one In addition it allows for much more granular and flexible access for multisig operators","title":"becomeAdmin"},{"location":"developers/contracts/OptimisticTimelock/#cancel","text":"function cancel(bytes32) nonpayable Cancel an operation. Requirements: - the caller must have the 'proposer' role.","title":"cancel"},{"location":"developers/contracts/OptimisticTimelock/#params_11","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/OptimisticTimelock/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#execute","text":"function execute(address,uint256,bytes,bytes32,bytes32) payable Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role.","title":"execute"},{"location":"developers/contracts/OptimisticTimelock/#params_12","text":"Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#executebatch","text":"function executeBatch(address[],uint256[],bytes[],bytes32,bytes32) payable Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role.","title":"executeBatch"},{"location":"developers/contracts/OptimisticTimelock/#params_13","text":"Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/OptimisticTimelock/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/OptimisticTimelock/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#getmindelay","text":"function getMinDelay() view returns(uint256) Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls updateDelay .","title":"getMinDelay"},{"location":"developers/contracts/OptimisticTimelock/#returns_8","text":"Param Type Notes duration uint256","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#getroleadmin","text":"function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","title":"getRoleAdmin"},{"location":"developers/contracts/OptimisticTimelock/#params_14","text":"Param Type Notes role bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#returns_9","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#gettimestamp","text":"function getTimestamp(bytes32) view returns(uint256) Returns the timestamp at with an operation becomes ready (0 for unset operations, 1 for done operations).","title":"getTimestamp"},{"location":"developers/contracts/OptimisticTimelock/#params_15","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#returns_10","text":"Param Type Notes timestamp uint256","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#grantrole","text":"function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role.","title":"grantRole"},{"location":"developers/contracts/OptimisticTimelock/#params_16","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#hasrole","text":"function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role .","title":"hasRole"},{"location":"developers/contracts/OptimisticTimelock/#params_17","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#hashoperation","text":"function hashOperation(address,uint256,bytes,bytes32,bytes32) pure returns(bytes32) Returns the identifier of an operation containing a single transaction.","title":"hashOperation"},{"location":"developers/contracts/OptimisticTimelock/#params_18","text":"Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#returns_12","text":"Param Type Notes hash bytes32","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#hashoperationbatch","text":"function hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32) pure returns(bytes32) Returns the identifier of an operation containing a batch of transactions.","title":"hashOperationBatch"},{"location":"developers/contracts/OptimisticTimelock/#params_19","text":"Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#returns_13","text":"Param Type Notes hash bytes32","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/OptimisticTimelock/#params_20","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#returns_14","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#isoperation","text":"function isOperation(bytes32) view returns(bool) Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations.","title":"isOperation"},{"location":"developers/contracts/OptimisticTimelock/#params_21","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#returns_15","text":"Param Type Notes pending bool","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#isoperationdone","text":"function isOperationDone(bytes32) view returns(bool) Returns whether an operation is done or not.","title":"isOperationDone"},{"location":"developers/contracts/OptimisticTimelock/#params_22","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#returns_16","text":"Param Type Notes done bool","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#isoperationpending","text":"function isOperationPending(bytes32) view returns(bool) Returns whether an operation is pending or not.","title":"isOperationPending"},{"location":"developers/contracts/OptimisticTimelock/#params_23","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#returns_17","text":"Param Type Notes pending bool","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#isoperationready","text":"function isOperationReady(bytes32) view returns(bool) Returns whether an operation is ready or not.","title":"isOperationReady"},{"location":"developers/contracts/OptimisticTimelock/#params_24","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#returns_18","text":"Param Type Notes ready bool","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/OptimisticTimelock/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/OptimisticTimelock/#returns_19","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#renouncerole","text":"function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked role , emits a {RoleRevoked} event. Requirements: - the caller must be account .","title":"renounceRole"},{"location":"developers/contracts/OptimisticTimelock/#params_25","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#revokerole","text":"function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role.","title":"revokeRole"},{"location":"developers/contracts/OptimisticTimelock/#params_26","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#schedule","text":"function schedule(address,uint256,bytes,bytes32,bytes32,uint256) nonpayable Schedule an operation containing a single transaction. Emits a {CallScheduled} event. Requirements: - the caller must have the 'proposer' role.","title":"schedule"},{"location":"developers/contracts/OptimisticTimelock/#params_27","text":"Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32 delay uint256","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#schedulebatch","text":"function scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256) nonpayable Schedule an operation containing a batch of transactions. Emits one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role.","title":"scheduleBatch"},{"location":"developers/contracts/OptimisticTimelock/#params_28","text":"Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32 delay uint256","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/OptimisticTimelock/#params_29","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/OptimisticTimelock/#params_30","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#supportsinterface","text":"function supportsInterface(bytes4) view returns(bool) See {IERC165-supportsInterface}.","title":"supportsInterface"},{"location":"developers/contracts/OptimisticTimelock/#params_31","text":"Param Type Notes interfaceId bytes4","title":"Params"},{"location":"developers/contracts/OptimisticTimelock/#returns_20","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/OptimisticTimelock/#returns_21","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/OptimisticTimelock/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OptimisticTimelock/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/OptimisticTimelock/#updatedelay","text":"function updateDelay(uint256) nonpayable Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function.","title":"updateDelay"},{"location":"developers/contracts/OptimisticTimelock/#params_32","text":"Param Type Notes newDelay uint256 \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/","text":"\u2b05\ufe0f Contracts OwnableTimedMinter OwnableTimedMinter A FeiTimedMinter that mints only when called by an owner Events BufferCapUpdate event BufferCapUpdate(uint256,uint256) Params Param Type Notes oldBufferCap uint256 newBufferCap uint256 BufferUsed event BufferUsed(uint256,uint256) Params Param Type Notes amountUsed uint256 bufferRemaining uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 FeiMinting event FeiMinting(address,uint256) Params Param Type Notes caller indexed address feiAmount uint256 IncentiveUpdate event IncentiveUpdate(uint256,uint256) Params Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256 MintAmountUpdate event MintAmountUpdate(uint256,uint256) Params Param Type Notes oldMintAmount uint256 newMintAmount uint256 OwnershipTransferred event OwnershipTransferred(address,address) Params Param Type Notes previousOwner indexed address newOwner indexed address Paused event Paused(address) Params Param Type Notes account address RateLimitPerSecondUpdate event RateLimitPerSecondUpdate(uint256,uint256) Params Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256 TargetUpdate event TargetUpdate(address,address) Params Param Type Notes oldTarget address newTarget address TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 MAX_MINT_FREQUENCY function MAX_MINT_FREQUENCY() view returns(uint256) least frequent that mints can happen Returns Param Type Notes uint256 MAX_RATE_LIMIT_PER_SECOND function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract Returns Param Type Notes uint256 MIN_MINT_FREQUENCY function MIN_MINT_FREQUENCY() view returns(uint256) most frequent that mints can happen Returns Param Type Notes uint256 buffer function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap Returns Param Type Notes uint256 bufferCap function bufferCap() view returns(uint256) the cap of the buffer that can be used at once Returns Param Type Notes uint256 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address doPartialAction function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount Returns Param Type Notes bool duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 incentiveAmount function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool lastBufferUsedTime function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract Returns Param Type Notes uint256 mint function mint() nonpayable triggers a minting of FEI by owner mintAmount function mintAmount() view returns(uint256) Returns Param Type Notes uint256 owner function owner() view returns(address) Returns the address of the current owner. Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool rateLimitPerSecond function rateLimitPerSecond() view returns(uint256) the rate per second for this contract Returns Param Type Notes uint256 remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 renounceOwnership function renounceOwnership() nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner. setBufferCap function setBufferCap(uint256) nonpayable set the buffer cap Params Param Type Notes newBufferCap uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setFrequency function setFrequency(uint256) nonpayable set the mint frequency Params Param Type Notes newFrequency uint256 setIncentiveAmount function setIncentiveAmount(uint256) nonpayable set the incentiveAmount Params Param Type Notes newIncentiveAmount uint256 setMintAmount function setMintAmount(uint256) nonpayable Params Param Type Notes newMintAmount uint256 setRateLimitPerSecond function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second Params Param Type Notes newRateLimitPerSecond uint256 setTarget function setTarget(address) nonpayable set the new FEI target Params Param Type Notes newTarget address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 target function target() view returns(address) the target receiving minted FEI Returns Param Type Notes address timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 transferOwnership function transferOwnership(address) nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner. Params Param Type Notes newOwner address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"OwnableTimedMinter"},{"location":"developers/contracts/OwnableTimedMinter/#ownabletimedminter","text":"OwnableTimedMinter A FeiTimedMinter that mints only when called by an owner","title":"OwnableTimedMinter"},{"location":"developers/contracts/OwnableTimedMinter/#events","text":"","title":"Events"},{"location":"developers/contracts/OwnableTimedMinter/#buffercapupdate","text":"event BufferCapUpdate(uint256,uint256)","title":"BufferCapUpdate"},{"location":"developers/contracts/OwnableTimedMinter/#params","text":"Param Type Notes oldBufferCap uint256 newBufferCap uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#bufferused","text":"event BufferUsed(uint256,uint256)","title":"BufferUsed"},{"location":"developers/contracts/OwnableTimedMinter/#params_1","text":"Param Type Notes amountUsed uint256 bufferRemaining uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/OwnableTimedMinter/#params_2","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/OwnableTimedMinter/#params_3","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/OwnableTimedMinter/#params_4","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#feiminting","text":"event FeiMinting(address,uint256)","title":"FeiMinting"},{"location":"developers/contracts/OwnableTimedMinter/#params_5","text":"Param Type Notes caller indexed address feiAmount uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#incentiveupdate","text":"event IncentiveUpdate(uint256,uint256)","title":"IncentiveUpdate"},{"location":"developers/contracts/OwnableTimedMinter/#params_6","text":"Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#mintamountupdate","text":"event MintAmountUpdate(uint256,uint256)","title":"MintAmountUpdate"},{"location":"developers/contracts/OwnableTimedMinter/#params_7","text":"Param Type Notes oldMintAmount uint256 newMintAmount uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#ownershiptransferred","text":"event OwnershipTransferred(address,address)","title":"OwnershipTransferred"},{"location":"developers/contracts/OwnableTimedMinter/#params_8","text":"Param Type Notes previousOwner indexed address newOwner indexed address","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/OwnableTimedMinter/#params_9","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#ratelimitpersecondupdate","text":"event RateLimitPerSecondUpdate(uint256,uint256)","title":"RateLimitPerSecondUpdate"},{"location":"developers/contracts/OwnableTimedMinter/#params_10","text":"Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#targetupdate","text":"event TargetUpdate(address,address)","title":"TargetUpdate"},{"location":"developers/contracts/OwnableTimedMinter/#params_11","text":"Param Type Notes oldTarget address newTarget address","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/OwnableTimedMinter/#params_12","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/OwnableTimedMinter/#params_13","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#methods","text":"","title":"Methods"},{"location":"developers/contracts/OwnableTimedMinter/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/OwnableTimedMinter/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#max_mint_frequency","text":"function MAX_MINT_FREQUENCY() view returns(uint256) least frequent that mints can happen","title":"MAX_MINT_FREQUENCY"},{"location":"developers/contracts/OwnableTimedMinter/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#max_rate_limit_per_second","text":"function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract","title":"MAX_RATE_LIMIT_PER_SECOND"},{"location":"developers/contracts/OwnableTimedMinter/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#min_mint_frequency","text":"function MIN_MINT_FREQUENCY() view returns(uint256) most frequent that mints can happen","title":"MIN_MINT_FREQUENCY"},{"location":"developers/contracts/OwnableTimedMinter/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#buffer","text":"function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap","title":"buffer"},{"location":"developers/contracts/OwnableTimedMinter/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#buffercap","text":"function bufferCap() view returns(uint256) the cap of the buffer that can be used at once","title":"bufferCap"},{"location":"developers/contracts/OwnableTimedMinter/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/OwnableTimedMinter/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#dopartialaction","text":"function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount","title":"doPartialAction"},{"location":"developers/contracts/OwnableTimedMinter/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/OwnableTimedMinter/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/OwnableTimedMinter/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/OwnableTimedMinter/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#incentiveamount","text":"function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions","title":"incentiveAmount"},{"location":"developers/contracts/OwnableTimedMinter/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/OwnableTimedMinter/#params_14","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/OwnableTimedMinter/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/OwnableTimedMinter/#returns_14","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#lastbufferusedtime","text":"function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract","title":"lastBufferUsedTime"},{"location":"developers/contracts/OwnableTimedMinter/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#mint","text":"function mint() nonpayable triggers a minting of FEI by owner","title":"mint"},{"location":"developers/contracts/OwnableTimedMinter/#mintamount","text":"function mintAmount() view returns(uint256)","title":"mintAmount"},{"location":"developers/contracts/OwnableTimedMinter/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#owner","text":"function owner() view returns(address) Returns the address of the current owner.","title":"owner"},{"location":"developers/contracts/OwnableTimedMinter/#returns_17","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/OwnableTimedMinter/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/OwnableTimedMinter/#returns_18","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#ratelimitpersecond","text":"function rateLimitPerSecond() view returns(uint256) the rate per second for this contract","title":"rateLimitPerSecond"},{"location":"developers/contracts/OwnableTimedMinter/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/OwnableTimedMinter/#returns_20","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#renounceownership","text":"function renounceOwnership() nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","title":"renounceOwnership"},{"location":"developers/contracts/OwnableTimedMinter/#setbuffercap","text":"function setBufferCap(uint256) nonpayable set the buffer cap","title":"setBufferCap"},{"location":"developers/contracts/OwnableTimedMinter/#params_15","text":"Param Type Notes newBufferCap uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/OwnableTimedMinter/#params_16","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/OwnableTimedMinter/#params_17","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#setfrequency","text":"function setFrequency(uint256) nonpayable set the mint frequency","title":"setFrequency"},{"location":"developers/contracts/OwnableTimedMinter/#params_18","text":"Param Type Notes newFrequency uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#setincentiveamount","text":"function setIncentiveAmount(uint256) nonpayable set the incentiveAmount","title":"setIncentiveAmount"},{"location":"developers/contracts/OwnableTimedMinter/#params_19","text":"Param Type Notes newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#setmintamount","text":"function setMintAmount(uint256) nonpayable","title":"setMintAmount"},{"location":"developers/contracts/OwnableTimedMinter/#params_20","text":"Param Type Notes newMintAmount uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#setratelimitpersecond","text":"function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second","title":"setRateLimitPerSecond"},{"location":"developers/contracts/OwnableTimedMinter/#params_21","text":"Param Type Notes newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#settarget","text":"function setTarget(address) nonpayable set the new FEI target","title":"setTarget"},{"location":"developers/contracts/OwnableTimedMinter/#params_22","text":"Param Type Notes newTarget address","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/OwnableTimedMinter/#returns_21","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#target","text":"function target() view returns(address) the target receiving minted FEI","title":"target"},{"location":"developers/contracts/OwnableTimedMinter/#returns_22","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/OwnableTimedMinter/#returns_23","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#transferownership","text":"function transferOwnership(address) nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner.","title":"transferOwnership"},{"location":"developers/contracts/OwnableTimedMinter/#params_23","text":"Param Type Notes newOwner address","title":"Params"},{"location":"developers/contracts/OwnableTimedMinter/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/OwnableTimedMinter/#returns_24","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/OwnableTimedMinter/#returns_25","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/OwnableTimedMinter/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/PCVDepositWrapper/","text":"\u2b05\ufe0f Contracts PCVDepositWrapper a lightweight contract to wrap old PCV deposits to use the new interface Methods balance function balance() view returns(uint256) returns total balance of PCV in the Deposit Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address isProtocolFeiDeposit function isProtocolFeiDeposit() view returns(bool) a flag for whether to report the balance as protocol owned FEI Returns Param Type Notes bool pcvDeposit function pcvDeposit() view returns(address) the referenced PCV Deposit Returns Param Type Notes address resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) returns the resistant balance and FEI in the deposit Returns Param Type Notes uint256 uint256 token function token() view returns(address) the balance reported in token Returns Param Type Notes address \u2b05\ufe0f Contracts","title":"PCVDepositWrapper"},{"location":"developers/contracts/PCVDepositWrapper/#pcvdepositwrapper","text":"a lightweight contract to wrap old PCV deposits to use the new interface","title":"PCVDepositWrapper"},{"location":"developers/contracts/PCVDepositWrapper/#methods","text":"","title":"Methods"},{"location":"developers/contracts/PCVDepositWrapper/#balance","text":"function balance() view returns(uint256) returns total balance of PCV in the Deposit","title":"balance"},{"location":"developers/contracts/PCVDepositWrapper/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDepositWrapper/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/PCVDepositWrapper/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVDepositWrapper/#isprotocolfeideposit","text":"function isProtocolFeiDeposit() view returns(bool) a flag for whether to report the balance as protocol owned FEI","title":"isProtocolFeiDeposit"},{"location":"developers/contracts/PCVDepositWrapper/#returns_2","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVDepositWrapper/#pcvdeposit","text":"function pcvDeposit() view returns(address) the referenced PCV Deposit","title":"pcvDeposit"},{"location":"developers/contracts/PCVDepositWrapper/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVDepositWrapper/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) returns the resistant balance and FEI in the deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/PCVDepositWrapper/#returns_4","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/PCVDepositWrapper/#token","text":"function token() view returns(address) the balance reported in token","title":"token"},{"location":"developers/contracts/PCVDepositWrapper/#returns_5","text":"Param Type Notes address \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/PCVDripController/","text":"\u2b05\ufe0f Contracts PCVDripController a PCV dripping controller Author: Fei Protocol Events BufferCapUpdate event BufferCapUpdate(uint256,uint256) Params Param Type Notes oldBufferCap uint256 newBufferCap uint256 BufferUsed event BufferUsed(uint256,uint256) Params Param Type Notes amountUsed uint256 bufferRemaining uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DripAmountUpdate event DripAmountUpdate(uint256,uint256) Params Param Type Notes oldDripAmount uint256 newDripAmount uint256 Dripped event Dripped(address,address,uint256) Params Param Type Notes source indexed address target indexed address amount uint256 DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 IncentiveUpdate event IncentiveUpdate(uint256,uint256) Params Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256 Paused event Paused(address) Params Param Type Notes account address RateLimitPerSecondUpdate event RateLimitPerSecondUpdate(uint256,uint256) Params Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256 SourceUpdate event SourceUpdate(address,address) Params Param Type Notes oldSource indexed address newSource indexed address TargetUpdate event TargetUpdate(address,address) Params Param Type Notes oldTarget indexed address newTarget indexed address TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 MAX_RATE_LIMIT_PER_SECOND function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract Returns Param Type Notes uint256 buffer function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap Returns Param Type Notes uint256 bufferCap function bufferCap() view returns(uint256) the cap of the buffer that can be used at once Returns Param Type Notes uint256 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address doPartialAction function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount Returns Param Type Notes bool drip function drip() nonpayable drip PCV to target by withdrawing from source dripAmount function dripAmount() view returns(uint256) amount to drip after each window Returns Param Type Notes uint256 dripEligible function dripEligible() view returns(bool) checks whether the target balance is less than the drip amount Returns Param Type Notes bool duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 incentiveAmount function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool lastBufferUsedTime function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract Returns Param Type Notes uint256 pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool rateLimitPerSecond function rateLimitPerSecond() view returns(uint256) the rate per second for this contract Returns Param Type Notes uint256 remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setBufferCap function setBufferCap(uint256) nonpayable set the buffer cap Params Param Type Notes newBufferCap uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDripAmount function setDripAmount(uint256) nonpayable set the new drip amount Params Param Type Notes newDripAmount uint256 setIncentiveAmount function setIncentiveAmount(uint256) nonpayable set the incentiveAmount Params Param Type Notes newIncentiveAmount uint256 setRateLimitPerSecond function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second Params Param Type Notes newRateLimitPerSecond uint256 setSource function setSource(address) nonpayable set the new PCV Deposit source Params Param Type Notes newSource address setTarget function setTarget(address) nonpayable set the new PCV Deposit target Params Param Type Notes newTarget address source function source() view returns(address) source PCV deposit to withdraw from Returns Param Type Notes address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 target function target() view returns(address) target address to drip to Returns Param Type Notes address timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"PCVDripController"},{"location":"developers/contracts/PCVDripController/#pcvdripcontroller","text":"a PCV dripping controller Author: Fei Protocol","title":"PCVDripController"},{"location":"developers/contracts/PCVDripController/#events","text":"","title":"Events"},{"location":"developers/contracts/PCVDripController/#buffercapupdate","text":"event BufferCapUpdate(uint256,uint256)","title":"BufferCapUpdate"},{"location":"developers/contracts/PCVDripController/#params","text":"Param Type Notes oldBufferCap uint256 newBufferCap uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#bufferused","text":"event BufferUsed(uint256,uint256)","title":"BufferUsed"},{"location":"developers/contracts/PCVDripController/#params_1","text":"Param Type Notes amountUsed uint256 bufferRemaining uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/PCVDripController/#params_2","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/PCVDripController/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/PCVDripController/#params_3","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/PCVDripController/#dripamountupdate","text":"event DripAmountUpdate(uint256,uint256)","title":"DripAmountUpdate"},{"location":"developers/contracts/PCVDripController/#params_4","text":"Param Type Notes oldDripAmount uint256 newDripAmount uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#dripped","text":"event Dripped(address,address,uint256)","title":"Dripped"},{"location":"developers/contracts/PCVDripController/#params_5","text":"Param Type Notes source indexed address target indexed address amount uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/PCVDripController/#params_6","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#incentiveupdate","text":"event IncentiveUpdate(uint256,uint256)","title":"IncentiveUpdate"},{"location":"developers/contracts/PCVDripController/#params_7","text":"Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/PCVDripController/#params_8","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/PCVDripController/#ratelimitpersecondupdate","text":"event RateLimitPerSecondUpdate(uint256,uint256)","title":"RateLimitPerSecondUpdate"},{"location":"developers/contracts/PCVDripController/#params_9","text":"Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#sourceupdate","text":"event SourceUpdate(address,address)","title":"SourceUpdate"},{"location":"developers/contracts/PCVDripController/#params_10","text":"Param Type Notes oldSource indexed address newSource indexed address","title":"Params"},{"location":"developers/contracts/PCVDripController/#targetupdate","text":"event TargetUpdate(address,address)","title":"TargetUpdate"},{"location":"developers/contracts/PCVDripController/#params_11","text":"Param Type Notes oldTarget indexed address newTarget indexed address","title":"Params"},{"location":"developers/contracts/PCVDripController/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/PCVDripController/#params_12","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/PCVDripController/#params_13","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/PCVDripController/#methods","text":"","title":"Methods"},{"location":"developers/contracts/PCVDripController/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/PCVDripController/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/PCVDripController/#max_rate_limit_per_second","text":"function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract","title":"MAX_RATE_LIMIT_PER_SECOND"},{"location":"developers/contracts/PCVDripController/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#buffer","text":"function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap","title":"buffer"},{"location":"developers/contracts/PCVDripController/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#buffercap","text":"function bufferCap() view returns(uint256) the cap of the buffer that can be used at once","title":"bufferCap"},{"location":"developers/contracts/PCVDripController/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/PCVDripController/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVDripController/#dopartialaction","text":"function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount","title":"doPartialAction"},{"location":"developers/contracts/PCVDripController/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVDripController/#drip","text":"function drip() nonpayable drip PCV to target by withdrawing from source","title":"drip"},{"location":"developers/contracts/PCVDripController/#dripamount","text":"function dripAmount() view returns(uint256) amount to drip after each window","title":"dripAmount"},{"location":"developers/contracts/PCVDripController/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#dripeligible","text":"function dripEligible() view returns(bool) checks whether the target balance is less than the drip amount","title":"dripEligible"},{"location":"developers/contracts/PCVDripController/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVDripController/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/PCVDripController/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/PCVDripController/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVDripController/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/PCVDripController/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#incentiveamount","text":"function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions","title":"incentiveAmount"},{"location":"developers/contracts/PCVDripController/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/PCVDripController/#params_14","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/PCVDripController/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVDripController/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/PCVDripController/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVDripController/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/PCVDripController/#returns_14","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVDripController/#lastbufferusedtime","text":"function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract","title":"lastBufferUsedTime"},{"location":"developers/contracts/PCVDripController/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/PCVDripController/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/PCVDripController/#returns_16","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVDripController/#ratelimitpersecond","text":"function rateLimitPerSecond() view returns(uint256) the rate per second for this contract","title":"rateLimitPerSecond"},{"location":"developers/contracts/PCVDripController/#returns_17","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/PCVDripController/#returns_18","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#setbuffercap","text":"function setBufferCap(uint256) nonpayable set the buffer cap","title":"setBufferCap"},{"location":"developers/contracts/PCVDripController/#params_15","text":"Param Type Notes newBufferCap uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/PCVDripController/#params_16","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/PCVDripController/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/PCVDripController/#params_17","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/PCVDripController/#setdripamount","text":"function setDripAmount(uint256) nonpayable set the new drip amount","title":"setDripAmount"},{"location":"developers/contracts/PCVDripController/#params_18","text":"Param Type Notes newDripAmount uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#setincentiveamount","text":"function setIncentiveAmount(uint256) nonpayable set the incentiveAmount","title":"setIncentiveAmount"},{"location":"developers/contracts/PCVDripController/#params_19","text":"Param Type Notes newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#setratelimitpersecond","text":"function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second","title":"setRateLimitPerSecond"},{"location":"developers/contracts/PCVDripController/#params_20","text":"Param Type Notes newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/PCVDripController/#setsource","text":"function setSource(address) nonpayable set the new PCV Deposit source","title":"setSource"},{"location":"developers/contracts/PCVDripController/#params_21","text":"Param Type Notes newSource address","title":"Params"},{"location":"developers/contracts/PCVDripController/#settarget","text":"function setTarget(address) nonpayable set the new PCV Deposit target","title":"setTarget"},{"location":"developers/contracts/PCVDripController/#params_22","text":"Param Type Notes newTarget address","title":"Params"},{"location":"developers/contracts/PCVDripController/#source","text":"function source() view returns(address) source PCV deposit to withdraw from","title":"source"},{"location":"developers/contracts/PCVDripController/#returns_19","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVDripController/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/PCVDripController/#returns_20","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#target","text":"function target() view returns(address) target address to drip to","title":"target"},{"location":"developers/contracts/PCVDripController/#returns_21","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVDripController/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/PCVDripController/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/PCVDripController/#returns_23","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVDripController/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/PCVDripController/#returns_24","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVDripController/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/PCVEquityMinter/","text":"\u2b05\ufe0f Contracts PCVEquityMinter PCVEquityMinter A FeiTimedMinter that mints based on a percentage of PCV equity Events APRUpdate event APRUpdate(uint256,uint256) Params Param Type Notes oldAprBasisPoints uint256 newAprBasisPoints uint256 BufferCapUpdate event BufferCapUpdate(uint256,uint256) Params Param Type Notes oldBufferCap uint256 newBufferCap uint256 BufferUsed event BufferUsed(uint256,uint256) Params Param Type Notes amountUsed uint256 bufferRemaining uint256 CollateralizationOracleUpdate event CollateralizationOracleUpdate(address,address) Params Param Type Notes oldCollateralizationOracle address newCollateralizationOracle address ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 FeiMinting event FeiMinting(address,uint256) Params Param Type Notes caller indexed address feiAmount uint256 IncentiveUpdate event IncentiveUpdate(uint256,uint256) Params Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256 MintAmountUpdate event MintAmountUpdate(uint256,uint256) Params Param Type Notes oldMintAmount uint256 newMintAmount uint256 Paused event Paused(address) Params Param Type Notes account address RateLimitPerSecondUpdate event RateLimitPerSecondUpdate(uint256,uint256) Params Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256 TargetUpdate event TargetUpdate(address,address) Params Param Type Notes oldTarget address newTarget address TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 MAX_APR_BASIS_POINTS function MAX_APR_BASIS_POINTS() view returns(uint256) The maximum percentage of PCV equity to be minted per year, in basis points Returns Param Type Notes uint256 MAX_MINT_FREQUENCY function MAX_MINT_FREQUENCY() view returns(uint256) least frequent that mints can happen Returns Param Type Notes uint256 MAX_RATE_LIMIT_PER_SECOND function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract Returns Param Type Notes uint256 MIN_MINT_FREQUENCY function MIN_MINT_FREQUENCY() view returns(uint256) most frequent that mints can happen Returns Param Type Notes uint256 aprBasisPoints function aprBasisPoints() view returns(uint256) the APR paid out from pcv equity per year expressed in basis points Returns Param Type Notes uint256 buffer function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap Returns Param Type Notes uint256 bufferCap function bufferCap() view returns(uint256) the cap of the buffer that can be used at once Returns Param Type Notes uint256 collateralizationOracle function collateralizationOracle() view returns(address) the collateralization oracle used to determine PCV equity Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address doPartialAction function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount Returns Param Type Notes bool duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 incentiveAmount function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool lastBufferUsedTime function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract Returns Param Type Notes uint256 mint function mint() nonpayable triggers a minting of FEI based on the PCV equity mintAmount function mintAmount() view returns(uint256) Returns Param Type Notes uint256 pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool rateLimitPerSecond function rateLimitPerSecond() view returns(uint256) the rate per second for this contract Returns Param Type Notes uint256 remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setAPRBasisPoints function setAPRBasisPoints(uint256) nonpayable sets the new APR for determining buyback size from PCV equity Params Param Type Notes newAprBasisPoints uint256 setBufferCap function setBufferCap(uint256) nonpayable set the buffer cap Params Param Type Notes newBufferCap uint256 setCollateralizationOracle function setCollateralizationOracle(address) nonpayable set the collateralization oracle Params Param Type Notes newCollateralizationOracle address setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setFrequency function setFrequency(uint256) nonpayable set the mint frequency Params Param Type Notes newFrequency uint256 setIncentiveAmount function setIncentiveAmount(uint256) nonpayable set the incentiveAmount Params Param Type Notes newIncentiveAmount uint256 setMintAmount function setMintAmount(uint256) nonpayable Params Param Type Notes newMintAmount uint256 setRateLimitPerSecond function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second Params Param Type Notes newRateLimitPerSecond uint256 setTarget function setTarget(address) nonpayable set the new FEI target Params Param Type Notes newTarget address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 target function target() view returns(address) the target receiving minted FEI Returns Param Type Notes address timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"PCVEquityMinter"},{"location":"developers/contracts/PCVEquityMinter/#pcvequityminter","text":"PCVEquityMinter A FeiTimedMinter that mints based on a percentage of PCV equity","title":"PCVEquityMinter"},{"location":"developers/contracts/PCVEquityMinter/#events","text":"","title":"Events"},{"location":"developers/contracts/PCVEquityMinter/#aprupdate","text":"event APRUpdate(uint256,uint256)","title":"APRUpdate"},{"location":"developers/contracts/PCVEquityMinter/#params","text":"Param Type Notes oldAprBasisPoints uint256 newAprBasisPoints uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#buffercapupdate","text":"event BufferCapUpdate(uint256,uint256)","title":"BufferCapUpdate"},{"location":"developers/contracts/PCVEquityMinter/#params_1","text":"Param Type Notes oldBufferCap uint256 newBufferCap uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#bufferused","text":"event BufferUsed(uint256,uint256)","title":"BufferUsed"},{"location":"developers/contracts/PCVEquityMinter/#params_2","text":"Param Type Notes amountUsed uint256 bufferRemaining uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#collateralizationoracleupdate","text":"event CollateralizationOracleUpdate(address,address)","title":"CollateralizationOracleUpdate"},{"location":"developers/contracts/PCVEquityMinter/#params_3","text":"Param Type Notes oldCollateralizationOracle address newCollateralizationOracle address","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/PCVEquityMinter/#params_4","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/PCVEquityMinter/#params_5","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/PCVEquityMinter/#params_6","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#feiminting","text":"event FeiMinting(address,uint256)","title":"FeiMinting"},{"location":"developers/contracts/PCVEquityMinter/#params_7","text":"Param Type Notes caller indexed address feiAmount uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#incentiveupdate","text":"event IncentiveUpdate(uint256,uint256)","title":"IncentiveUpdate"},{"location":"developers/contracts/PCVEquityMinter/#params_8","text":"Param Type Notes oldIncentiveAmount uint256 newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#mintamountupdate","text":"event MintAmountUpdate(uint256,uint256)","title":"MintAmountUpdate"},{"location":"developers/contracts/PCVEquityMinter/#params_9","text":"Param Type Notes oldMintAmount uint256 newMintAmount uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/PCVEquityMinter/#params_10","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#ratelimitpersecondupdate","text":"event RateLimitPerSecondUpdate(uint256,uint256)","title":"RateLimitPerSecondUpdate"},{"location":"developers/contracts/PCVEquityMinter/#params_11","text":"Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#targetupdate","text":"event TargetUpdate(address,address)","title":"TargetUpdate"},{"location":"developers/contracts/PCVEquityMinter/#params_12","text":"Param Type Notes oldTarget address newTarget address","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/PCVEquityMinter/#params_13","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/PCVEquityMinter/#params_14","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#methods","text":"","title":"Methods"},{"location":"developers/contracts/PCVEquityMinter/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/PCVEquityMinter/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#max_apr_basis_points","text":"function MAX_APR_BASIS_POINTS() view returns(uint256) The maximum percentage of PCV equity to be minted per year, in basis points","title":"MAX_APR_BASIS_POINTS"},{"location":"developers/contracts/PCVEquityMinter/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#max_mint_frequency","text":"function MAX_MINT_FREQUENCY() view returns(uint256) least frequent that mints can happen","title":"MAX_MINT_FREQUENCY"},{"location":"developers/contracts/PCVEquityMinter/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#max_rate_limit_per_second","text":"function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract","title":"MAX_RATE_LIMIT_PER_SECOND"},{"location":"developers/contracts/PCVEquityMinter/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#min_mint_frequency","text":"function MIN_MINT_FREQUENCY() view returns(uint256) most frequent that mints can happen","title":"MIN_MINT_FREQUENCY"},{"location":"developers/contracts/PCVEquityMinter/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#aprbasispoints","text":"function aprBasisPoints() view returns(uint256) the APR paid out from pcv equity per year expressed in basis points","title":"aprBasisPoints"},{"location":"developers/contracts/PCVEquityMinter/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#buffer","text":"function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap","title":"buffer"},{"location":"developers/contracts/PCVEquityMinter/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#buffercap","text":"function bufferCap() view returns(uint256) the cap of the buffer that can be used at once","title":"bufferCap"},{"location":"developers/contracts/PCVEquityMinter/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#collateralizationoracle","text":"function collateralizationOracle() view returns(address) the collateralization oracle used to determine PCV equity","title":"collateralizationOracle"},{"location":"developers/contracts/PCVEquityMinter/#returns_8","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/PCVEquityMinter/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#dopartialaction","text":"function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount","title":"doPartialAction"},{"location":"developers/contracts/PCVEquityMinter/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/PCVEquityMinter/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/PCVEquityMinter/#returns_12","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/PCVEquityMinter/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#incentiveamount","text":"function incentiveAmount() view returns(uint256) FEI incentive for calling keeper functions","title":"incentiveAmount"},{"location":"developers/contracts/PCVEquityMinter/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/PCVEquityMinter/#params_15","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#returns_15","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/PCVEquityMinter/#returns_16","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/PCVEquityMinter/#returns_17","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#lastbufferusedtime","text":"function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract","title":"lastBufferUsedTime"},{"location":"developers/contracts/PCVEquityMinter/#returns_18","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#mint","text":"function mint() nonpayable triggers a minting of FEI based on the PCV equity","title":"mint"},{"location":"developers/contracts/PCVEquityMinter/#mintamount","text":"function mintAmount() view returns(uint256)","title":"mintAmount"},{"location":"developers/contracts/PCVEquityMinter/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/PCVEquityMinter/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/PCVEquityMinter/#returns_20","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#ratelimitpersecond","text":"function rateLimitPerSecond() view returns(uint256) the rate per second for this contract","title":"rateLimitPerSecond"},{"location":"developers/contracts/PCVEquityMinter/#returns_21","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/PCVEquityMinter/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#setaprbasispoints","text":"function setAPRBasisPoints(uint256) nonpayable sets the new APR for determining buyback size from PCV equity","title":"setAPRBasisPoints"},{"location":"developers/contracts/PCVEquityMinter/#params_16","text":"Param Type Notes newAprBasisPoints uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#setbuffercap","text":"function setBufferCap(uint256) nonpayable set the buffer cap","title":"setBufferCap"},{"location":"developers/contracts/PCVEquityMinter/#params_17","text":"Param Type Notes newBufferCap uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#setcollateralizationoracle","text":"function setCollateralizationOracle(address) nonpayable set the collateralization oracle","title":"setCollateralizationOracle"},{"location":"developers/contracts/PCVEquityMinter/#params_18","text":"Param Type Notes newCollateralizationOracle address","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/PCVEquityMinter/#params_19","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/PCVEquityMinter/#params_20","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#setfrequency","text":"function setFrequency(uint256) nonpayable set the mint frequency","title":"setFrequency"},{"location":"developers/contracts/PCVEquityMinter/#params_21","text":"Param Type Notes newFrequency uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#setincentiveamount","text":"function setIncentiveAmount(uint256) nonpayable set the incentiveAmount","title":"setIncentiveAmount"},{"location":"developers/contracts/PCVEquityMinter/#params_22","text":"Param Type Notes newIncentiveAmount uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#setmintamount","text":"function setMintAmount(uint256) nonpayable","title":"setMintAmount"},{"location":"developers/contracts/PCVEquityMinter/#params_23","text":"Param Type Notes newMintAmount uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#setratelimitpersecond","text":"function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second","title":"setRateLimitPerSecond"},{"location":"developers/contracts/PCVEquityMinter/#params_24","text":"Param Type Notes newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#settarget","text":"function setTarget(address) nonpayable set the new FEI target","title":"setTarget"},{"location":"developers/contracts/PCVEquityMinter/#params_25","text":"Param Type Notes newTarget address","title":"Params"},{"location":"developers/contracts/PCVEquityMinter/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/PCVEquityMinter/#returns_23","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#target","text":"function target() view returns(address) the target receiving minted FEI","title":"target"},{"location":"developers/contracts/PCVEquityMinter/#returns_24","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/PCVEquityMinter/#returns_25","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/PCVEquityMinter/#returns_26","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/PCVEquityMinter/#returns_27","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVEquityMinter/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/PCVGuardian/","text":"\u2b05\ufe0f Contracts PCVGuardian Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address PCVGuardianERC20Withdrawal event PCVGuardianERC20Withdrawal(address,address,address,uint256) Params Param Type Notes pcvDeposit indexed address destination indexed address token indexed address amount uint256 PCVGuardianETHWithdrawal event PCVGuardianETHWithdrawal(address,address,uint256) Params Param Type Notes pcvDeposit indexed address destination indexed address amount uint256 PCVGuardianWithdrawal event PCVGuardianWithdrawal(address,address,uint256) Params Param Type Notes pcvDeposit indexed address destination indexed address amount uint256 Paused event Paused(address) Params Param Type Notes account address SafeAddressAdded event SafeAddressAdded(address) Params Param Type Notes safeAddress indexed address SafeAddressRemoved event SafeAddressRemoved(address) Params Param Type Notes safeAddress indexed address Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getSafeAddresses function getSafeAddresses() view returns(address[]) returns all safe addresses Returns Param Type Notes address[] isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isSafeAddress function isSafeAddress(address) view returns(bool) returns true if the the provided address is a valid destination to withdraw funds to Params Param Type Notes pcvDeposit address the address to check Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setSafeAddress function setSafeAddress(address) nonpayable governor-only method to set an address as \"safe\" to withdraw funds to Params Param Type Notes pcvDeposit address the address to set as safe setSafeAddresses function setSafeAddresses(address[]) nonpayable batch version of setSafeAddress Params Param Type Notes _safeAddresses address[] the addresses to set as safe, as calldata tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused unsetSafeAddress function unsetSafeAddress(address) nonpayable governor-or-guardian-only method to un-set an address as \"safe\" to withdraw funds to Params Param Type Notes pcvDeposit address the address to un-set as safe unsetSafeAddresses function unsetSafeAddresses(address[]) nonpayable batch version of unsetSafeAddresses Params Param Type Notes _safeAddresses address[] the addresses to un-set as safe withdrawERC20ToSafeAddress function withdrawERC20ToSafeAddress(address,address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it Params Param Type Notes pcvDeposit address the deposit to pull funds from safeAddress address the destination address to withdraw to token address amount uint256 the amount of funds to withdraw pauseAfter bool whether to pause the pcv after withdrawing depositAfter bool if true, attempts to deposit to the target PCV deposit withdrawETHToSafeAddress function withdrawETHToSafeAddress(address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it Params Param Type Notes pcvDeposit address the address of the pcv deposit contract safeAddress address the destination address to withdraw to amount uint256 the amount of tokens to withdraw pauseAfter bool if true, the pcv contract will be paused after the withdraw depositAfter bool if true, attempts to deposit to the target PCV deposit withdrawToSafeAddress function withdrawToSafeAddress(address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it Params Param Type Notes pcvDeposit address the address of the pcv deposit contract safeAddress address the destination address to withdraw to amount uint256 the amount to withdraw pauseAfter bool if true, the pcv contract will be paused after the withdraw depositAfter bool if true, attempts to deposit to the target PCV deposit \u2b05\ufe0f Contracts","title":"PCVGuardian"},{"location":"developers/contracts/PCVGuardian/#pcvguardian","text":"","title":"PCVGuardian"},{"location":"developers/contracts/PCVGuardian/#events","text":"","title":"Events"},{"location":"developers/contracts/PCVGuardian/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/PCVGuardian/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/PCVGuardian/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/PCVGuardian/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/PCVGuardian/#pcvguardianerc20withdrawal","text":"event PCVGuardianERC20Withdrawal(address,address,address,uint256)","title":"PCVGuardianERC20Withdrawal"},{"location":"developers/contracts/PCVGuardian/#params_2","text":"Param Type Notes pcvDeposit indexed address destination indexed address token indexed address amount uint256","title":"Params"},{"location":"developers/contracts/PCVGuardian/#pcvguardianethwithdrawal","text":"event PCVGuardianETHWithdrawal(address,address,uint256)","title":"PCVGuardianETHWithdrawal"},{"location":"developers/contracts/PCVGuardian/#params_3","text":"Param Type Notes pcvDeposit indexed address destination indexed address amount uint256","title":"Params"},{"location":"developers/contracts/PCVGuardian/#pcvguardianwithdrawal","text":"event PCVGuardianWithdrawal(address,address,uint256)","title":"PCVGuardianWithdrawal"},{"location":"developers/contracts/PCVGuardian/#params_4","text":"Param Type Notes pcvDeposit indexed address destination indexed address amount uint256","title":"Params"},{"location":"developers/contracts/PCVGuardian/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/PCVGuardian/#params_5","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/PCVGuardian/#safeaddressadded","text":"event SafeAddressAdded(address)","title":"SafeAddressAdded"},{"location":"developers/contracts/PCVGuardian/#params_6","text":"Param Type Notes safeAddress indexed address","title":"Params"},{"location":"developers/contracts/PCVGuardian/#safeaddressremoved","text":"event SafeAddressRemoved(address)","title":"SafeAddressRemoved"},{"location":"developers/contracts/PCVGuardian/#params_7","text":"Param Type Notes safeAddress indexed address","title":"Params"},{"location":"developers/contracts/PCVGuardian/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/PCVGuardian/#params_8","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/PCVGuardian/#methods","text":"","title":"Methods"},{"location":"developers/contracts/PCVGuardian/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/PCVGuardian/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/PCVGuardian/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/PCVGuardian/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVGuardian/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/PCVGuardian/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVGuardian/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/PCVGuardian/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVGuardian/#getsafeaddresses","text":"function getSafeAddresses() view returns(address[]) returns all safe addresses","title":"getSafeAddresses"},{"location":"developers/contracts/PCVGuardian/#returns_4","text":"Param Type Notes address[]","title":"Returns"},{"location":"developers/contracts/PCVGuardian/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/PCVGuardian/#params_9","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/PCVGuardian/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVGuardian/#issafeaddress","text":"function isSafeAddress(address) view returns(bool) returns true if the the provided address is a valid destination to withdraw funds to","title":"isSafeAddress"},{"location":"developers/contracts/PCVGuardian/#params_10","text":"Param Type Notes pcvDeposit address the address to check","title":"Params"},{"location":"developers/contracts/PCVGuardian/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVGuardian/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/PCVGuardian/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/PCVGuardian/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PCVGuardian/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/PCVGuardian/#params_11","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/PCVGuardian/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/PCVGuardian/#params_12","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/PCVGuardian/#setsafeaddress","text":"function setSafeAddress(address) nonpayable governor-only method to set an address as \"safe\" to withdraw funds to","title":"setSafeAddress"},{"location":"developers/contracts/PCVGuardian/#params_13","text":"Param Type Notes pcvDeposit address the address to set as safe","title":"Params"},{"location":"developers/contracts/PCVGuardian/#setsafeaddresses","text":"function setSafeAddresses(address[]) nonpayable batch version of setSafeAddress","title":"setSafeAddresses"},{"location":"developers/contracts/PCVGuardian/#params_14","text":"Param Type Notes _safeAddresses address[] the addresses to set as safe, as calldata","title":"Params"},{"location":"developers/contracts/PCVGuardian/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/PCVGuardian/#returns_8","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PCVGuardian/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/PCVGuardian/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PCVGuardian/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/PCVGuardian/#unsetsafeaddress","text":"function unsetSafeAddress(address) nonpayable governor-or-guardian-only method to un-set an address as \"safe\" to withdraw funds to","title":"unsetSafeAddress"},{"location":"developers/contracts/PCVGuardian/#params_15","text":"Param Type Notes pcvDeposit address the address to un-set as safe","title":"Params"},{"location":"developers/contracts/PCVGuardian/#unsetsafeaddresses","text":"function unsetSafeAddresses(address[]) nonpayable batch version of unsetSafeAddresses","title":"unsetSafeAddresses"},{"location":"developers/contracts/PCVGuardian/#params_16","text":"Param Type Notes _safeAddresses address[] the addresses to un-set as safe","title":"Params"},{"location":"developers/contracts/PCVGuardian/#withdrawerc20tosafeaddress","text":"function withdrawERC20ToSafeAddress(address,address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it","title":"withdrawERC20ToSafeAddress"},{"location":"developers/contracts/PCVGuardian/#params_17","text":"Param Type Notes pcvDeposit address the deposit to pull funds from safeAddress address the destination address to withdraw to token address amount uint256 the amount of funds to withdraw pauseAfter bool whether to pause the pcv after withdrawing depositAfter bool if true, attempts to deposit to the target PCV deposit","title":"Params"},{"location":"developers/contracts/PCVGuardian/#withdrawethtosafeaddress","text":"function withdrawETHToSafeAddress(address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it","title":"withdrawETHToSafeAddress"},{"location":"developers/contracts/PCVGuardian/#params_18","text":"Param Type Notes pcvDeposit address the address of the pcv deposit contract safeAddress address the destination address to withdraw to amount uint256 the amount of tokens to withdraw pauseAfter bool if true, the pcv contract will be paused after the withdraw depositAfter bool if true, attempts to deposit to the target PCV deposit","title":"Params"},{"location":"developers/contracts/PCVGuardian/#withdrawtosafeaddress","text":"function withdrawToSafeAddress(address,address,uint256,bool,bool) nonpayable governor-or-guardian-only method to withdraw funds from a pcv deposit, by calling the withdraw() method on it","title":"withdrawToSafeAddress"},{"location":"developers/contracts/PCVGuardian/#params_19","text":"Param Type Notes pcvDeposit address the address of the pcv deposit contract safeAddress address the destination address to withdraw to amount uint256 the amount to withdraw pauseAfter bool if true, the pcv contract will be paused after the withdraw depositAfter bool if true, attempts to deposit to the target PCV deposit \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/","text":"\u2b05\ufe0f Contracts PriceBoundPSM contract to create a price bound DAI PSM This contract will allow swaps when the price of DAI is between 98 cents and 1.02 by default These defaults are changeable by the admin and governance by calling floor and ceiling setters setOracleFloor and setOracleCeiling Events AllocateSurplus event AllocateSurplus(address,uint256) Params Param Type Notes caller indexed address amount uint256 BackupOracleUpdate event BackupOracleUpdate(address,address) Params Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address BufferCapUpdate event BufferCapUpdate(uint256,uint256) Params Param Type Notes oldBufferCap uint256 newBufferCap uint256 BufferUsed event BufferUsed(uint256,uint256) Params Param Type Notes amountUsed uint256 bufferRemaining uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DecimalsNormalizerUpdate event DecimalsNormalizerUpdate(int256,int256) Params Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256 Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 InvertUpdate event InvertUpdate(bool,bool) Params Param Type Notes oldDoInvert bool newDoInvert bool MaxFeeUpdate event MaxFeeUpdate(uint256,uint256) Params Param Type Notes oldMaxFee uint256 newMaxFee uint256 Mint event Mint(address,uint256) Params Param Type Notes to address amountIn uint256 MintFeeUpdate event MintFeeUpdate(uint256,uint256) Params Param Type Notes oldMintFee uint256 newMintFee uint256 OracleCeilingUpdate event OracleCeilingUpdate(uint256,uint256) Params Param Type Notes oldCeiling uint256 newCeiling uint256 OracleFloorUpdate event OracleFloorUpdate(uint256,uint256) Params Param Type Notes oldFloor uint256 newFloor uint256 OracleUpdate event OracleUpdate(address,address) Params Param Type Notes oldOracle indexed address newOracle indexed address Paused event Paused(address) Params Param Type Notes account address RateLimitPerSecondUpdate event RateLimitPerSecondUpdate(uint256,uint256) Params Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256 Redeem event Redeem(address,uint256) Params Param Type Notes to address amountFeiIn uint256 RedeemFeeUpdate event RedeemFeeUpdate(uint256,uint256) Params Param Type Notes oldRedeemFee uint256 newRedeemFee uint256 ReservesThresholdUpdate event ReservesThresholdUpdate(uint256,uint256) Params Param Type Notes oldReservesThreshold uint256 newReservesThreshold uint256 SurplusTargetUpdate event SurplusTargetUpdate(address,address) Params Param Type Notes oldTarget address newTarget address Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 MAX_FEE function MAX_FEE() view returns(uint256) the max mint and redeem fee in basis points Governance can change this fee Returns Param Type Notes uint256 MAX_RATE_LIMIT_PER_SECOND function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract Returns Param Type Notes uint256 allocateSurplus function allocateSurplus() nonpayable send any surplus reserves to the PCV allocation backupOracle function backupOracle() view returns(address) the backup oracle reference by the contract Returns Param Type Notes address balance function balance() view returns(uint256) function from PCVDeposit that must be overriden Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) returns address of token this contracts balance is reported in Returns Param Type Notes address buffer function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap Returns Param Type Notes uint256 bufferCap function bufferCap() view returns(uint256) the cap of the buffer that can be used at once Returns Param Type Notes uint256 ceiling function ceiling() view returns(uint256) the default maximum acceptable oracle price ceiling is $1.02 Returns Param Type Notes uint256 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address decimalsNormalizer function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer) Returns Param Type Notes int256 deposit function deposit() nonpayable function to receive ERC20 tokens from external contracts doInvert function doInvert() view returns(bool) Returns Param Type Notes bool doPartialAction function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount Returns Param Type Notes bool fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 floor function floor() view returns(uint256) the default minimum acceptable oracle price floor is 98 cents Returns Param Type Notes uint256 getMaxMintAmountOut function getMaxMintAmountOut() view returns(uint256) the maximum mint amount out Returns Param Type Notes uint256 getMintAmountOut function getMintAmountOut(uint256) view returns(uint256) calculate the amount of FEI out for a given amountIn of underlying First get oracle price of token Then figure out how many dollars that amount in is worth by multiplying price * amount. ensure decimals are normalized if on underlying they are not 18 Params Param Type Notes amountIn uint256 Returns Param Type Notes amountFeiOut uint256 getRedeemAmountOut function getRedeemAmountOut(uint256) view returns(uint256) calculate the amount of underlying out for a given amountFeiIn of FEI First get oracle price of token Then figure out how many dollars that amount in is worth by multiplying price * amount. ensure decimals are normalized if on underlying they are not 18 Params Param Type Notes amountFeiIn uint256 Returns Param Type Notes amountTokenOut uint256 hasSurplus function hasSurplus() view returns(bool) a flag for whether the current balance is above (true) or below (false) the reservesThreshold Returns Param Type Notes bool invert function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI Params Param Type Notes price tuple the peg price to invert Returns Param Type Notes tuple isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isPriceValid function isPriceValid() view returns(bool) return wether the current oracle price is valid or not Returns Param Type Notes bool lastBufferUsedTime function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract Returns Param Type Notes uint256 mint function mint(address,uint256,uint256) nonpayable returns(uint256) function to buy FEI for an underlying asset We first transfer any contract-owned fei, then mint the remaining if necessary Params Param Type Notes to address amountIn uint256 minAmountOut uint256 Returns Param Type Notes amountFeiOut uint256 mintFeeBasisPoints function mintFeeBasisPoints() view returns(uint256) the fee in basis points for selling asset into FEI Returns Param Type Notes uint256 oracle function oracle() view returns(address) the oracle reference by the contract Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool rateLimitPerSecond function rateLimitPerSecond() view returns(uint256) the rate per second for this contract Returns Param Type Notes uint256 readOracle function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc Returns Param Type Notes tuple redeem function redeem(address,uint256,uint256) nonpayable returns(uint256) function to redeem FEI for an underlying asset We do not burn Fei; this allows the contract's balance of Fei to be used before the buffer is used In practice, this helps prevent artificial cycling of mint-burn cycles and prevents a griefing vector. Params Param Type Notes to address amountFeiIn uint256 minAmountOut uint256 Returns Param Type Notes amountOut uint256 redeemFeeBasisPoints function redeemFeeBasisPoints() view returns(uint256) the fee in basis points for buying the asset for FEI Returns Param Type Notes uint256 reservesSurplus function reservesSurplus() view returns(int256) an integer representing the positive surplus or negative deficit of contract balance vs reservesThreshold Returns Param Type Notes int256 reservesThreshold function reservesThreshold() view returns(uint256) the amount of reserves to be held for redemptions Returns Param Type Notes uint256 resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) override default behavior of not checking fei balance Returns Param Type Notes uint256 uint256 setBackupOracle function setBackupOracle(address) nonpayable sets the referenced backup oracle Params Param Type Notes newBackupOracle address the new backup oracle to reference setBufferCap function setBufferCap(uint256) nonpayable set the buffer cap Params Param Type Notes newBufferCap uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDecimalsNormalizer function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer Params Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer setDoInvert function setDoInvert(bool) nonpayable sets the flag for whether to invert or not Params Param Type Notes newDoInvert bool the new flag for whether to invert setMintFee function setMintFee(uint256) nonpayable set the mint fee vs oracle price in basis point terms Params Param Type Notes newMintFeeBasisPoints uint256 setOracle function setOracle(address) nonpayable sets the referenced oracle Params Param Type Notes newOracle address the new oracle to reference setOracleCeilingBasisPoints function setOracleCeilingBasisPoints(uint256) nonpayable sets the ceiling price in BP Params Param Type Notes newCeilingBasisPoints uint256 setOracleFloorBasisPoints function setOracleFloorBasisPoints(uint256) nonpayable sets the floor price in BP Params Param Type Notes newFloorBasisPoints uint256 setRateLimitPerSecond function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second Params Param Type Notes newRateLimitPerSecond uint256 setRedeemFee function setRedeemFee(uint256) nonpayable set the redemption fee vs oracle price in basis point terms Params Param Type Notes newRedeemFeeBasisPoints uint256 setReservesThreshold function setReservesThreshold(uint256) nonpayable set the ideal amount of reserves for the contract to hold for redemptions Params Param Type Notes newReservesThreshold uint256 setSurplusTarget function setSurplusTarget(address) nonpayable set the target for sending surplus reserves Params Param Type Notes newTarget address surplusTarget function surplusTarget() view returns(address) the PCV deposit target Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 underlyingToken function underlyingToken() view returns(address) the token this PSM will exchange for FEI This token will be set to WETH9 if the bonding curve accepts eth Returns Param Type Notes address unpause function unpause() nonpayable set pausable methods to unpaused updateOracle function updateOracle() nonpayable updates the referenced oracle withdraw function withdraw(address,uint256) nonpayable withdraw assets from PSM to an external address Params Param Type Notes to address amount uint256 withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"PriceBoundPSM"},{"location":"developers/contracts/PriceBoundPSM/#priceboundpsm","text":"contract to create a price bound DAI PSM This contract will allow swaps when the price of DAI is between 98 cents and 1.02 by default These defaults are changeable by the admin and governance by calling floor and ceiling setters setOracleFloor and setOracleCeiling","title":"PriceBoundPSM"},{"location":"developers/contracts/PriceBoundPSM/#events","text":"","title":"Events"},{"location":"developers/contracts/PriceBoundPSM/#allocatesurplus","text":"event AllocateSurplus(address,uint256)","title":"AllocateSurplus"},{"location":"developers/contracts/PriceBoundPSM/#params","text":"Param Type Notes caller indexed address amount uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#backuporacleupdate","text":"event BackupOracleUpdate(address,address)","title":"BackupOracleUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_1","text":"Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#buffercapupdate","text":"event BufferCapUpdate(uint256,uint256)","title":"BufferCapUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_2","text":"Param Type Notes oldBufferCap uint256 newBufferCap uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#bufferused","text":"event BufferUsed(uint256,uint256)","title":"BufferUsed"},{"location":"developers/contracts/PriceBoundPSM/#params_3","text":"Param Type Notes amountUsed uint256 bufferRemaining uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_4","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_5","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#decimalsnormalizerupdate","text":"event DecimalsNormalizerUpdate(int256,int256)","title":"DecimalsNormalizerUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_6","text":"Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/PriceBoundPSM/#params_7","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#invertupdate","text":"event InvertUpdate(bool,bool)","title":"InvertUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_8","text":"Param Type Notes oldDoInvert bool newDoInvert bool","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#maxfeeupdate","text":"event MaxFeeUpdate(uint256,uint256)","title":"MaxFeeUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_9","text":"Param Type Notes oldMaxFee uint256 newMaxFee uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#mint","text":"event Mint(address,uint256)","title":"Mint"},{"location":"developers/contracts/PriceBoundPSM/#params_10","text":"Param Type Notes to address amountIn uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#mintfeeupdate","text":"event MintFeeUpdate(uint256,uint256)","title":"MintFeeUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_11","text":"Param Type Notes oldMintFee uint256 newMintFee uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#oracleceilingupdate","text":"event OracleCeilingUpdate(uint256,uint256)","title":"OracleCeilingUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_12","text":"Param Type Notes oldCeiling uint256 newCeiling uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#oraclefloorupdate","text":"event OracleFloorUpdate(uint256,uint256)","title":"OracleFloorUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_13","text":"Param Type Notes oldFloor uint256 newFloor uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#oracleupdate","text":"event OracleUpdate(address,address)","title":"OracleUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_14","text":"Param Type Notes oldOracle indexed address newOracle indexed address","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/PriceBoundPSM/#params_15","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#ratelimitpersecondupdate","text":"event RateLimitPerSecondUpdate(uint256,uint256)","title":"RateLimitPerSecondUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_16","text":"Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#redeem","text":"event Redeem(address,uint256)","title":"Redeem"},{"location":"developers/contracts/PriceBoundPSM/#params_17","text":"Param Type Notes to address amountFeiIn uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#redeemfeeupdate","text":"event RedeemFeeUpdate(uint256,uint256)","title":"RedeemFeeUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_18","text":"Param Type Notes oldRedeemFee uint256 newRedeemFee uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#reservesthresholdupdate","text":"event ReservesThresholdUpdate(uint256,uint256)","title":"ReservesThresholdUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_19","text":"Param Type Notes oldReservesThreshold uint256 newReservesThreshold uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#surplustargetupdate","text":"event SurplusTargetUpdate(address,address)","title":"SurplusTargetUpdate"},{"location":"developers/contracts/PriceBoundPSM/#params_20","text":"Param Type Notes oldTarget address newTarget address","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/PriceBoundPSM/#params_21","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/PriceBoundPSM/#params_22","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/PriceBoundPSM/#params_23","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/PriceBoundPSM/#params_24","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#methods","text":"","title":"Methods"},{"location":"developers/contracts/PriceBoundPSM/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/PriceBoundPSM/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#max_fee","text":"function MAX_FEE() view returns(uint256) the max mint and redeem fee in basis points Governance can change this fee","title":"MAX_FEE"},{"location":"developers/contracts/PriceBoundPSM/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#max_rate_limit_per_second","text":"function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract","title":"MAX_RATE_LIMIT_PER_SECOND"},{"location":"developers/contracts/PriceBoundPSM/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#allocatesurplus_1","text":"function allocateSurplus() nonpayable send any surplus reserves to the PCV allocation","title":"allocateSurplus"},{"location":"developers/contracts/PriceBoundPSM/#backuporacle","text":"function backupOracle() view returns(address) the backup oracle reference by the contract","title":"backupOracle"},{"location":"developers/contracts/PriceBoundPSM/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#balance","text":"function balance() view returns(uint256) function from PCVDeposit that must be overriden","title":"balance"},{"location":"developers/contracts/PriceBoundPSM/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#balancereportedin","text":"function balanceReportedIn() view returns(address) returns address of token this contracts balance is reported in","title":"balanceReportedIn"},{"location":"developers/contracts/PriceBoundPSM/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#buffer","text":"function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap","title":"buffer"},{"location":"developers/contracts/PriceBoundPSM/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#buffercap","text":"function bufferCap() view returns(uint256) the cap of the buffer that can be used at once","title":"bufferCap"},{"location":"developers/contracts/PriceBoundPSM/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#ceiling","text":"function ceiling() view returns(uint256) the default maximum acceptable oracle price ceiling is $1.02","title":"ceiling"},{"location":"developers/contracts/PriceBoundPSM/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/PriceBoundPSM/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#decimalsnormalizer","text":"function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer)","title":"decimalsNormalizer"},{"location":"developers/contracts/PriceBoundPSM/#returns_10","text":"Param Type Notes int256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#deposit_1","text":"function deposit() nonpayable function to receive ERC20 tokens from external contracts","title":"deposit"},{"location":"developers/contracts/PriceBoundPSM/#doinvert","text":"function doInvert() view returns(bool)","title":"doInvert"},{"location":"developers/contracts/PriceBoundPSM/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#dopartialaction","text":"function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount","title":"doPartialAction"},{"location":"developers/contracts/PriceBoundPSM/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/PriceBoundPSM/#returns_13","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/PriceBoundPSM/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#floor","text":"function floor() view returns(uint256) the default minimum acceptable oracle price floor is 98 cents","title":"floor"},{"location":"developers/contracts/PriceBoundPSM/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#getmaxmintamountout","text":"function getMaxMintAmountOut() view returns(uint256) the maximum mint amount out","title":"getMaxMintAmountOut"},{"location":"developers/contracts/PriceBoundPSM/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#getmintamountout","text":"function getMintAmountOut(uint256) view returns(uint256) calculate the amount of FEI out for a given amountIn of underlying First get oracle price of token Then figure out how many dollars that amount in is worth by multiplying price * amount. ensure decimals are normalized if on underlying they are not 18","title":"getMintAmountOut"},{"location":"developers/contracts/PriceBoundPSM/#params_25","text":"Param Type Notes amountIn uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#returns_17","text":"Param Type Notes amountFeiOut uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#getredeemamountout","text":"function getRedeemAmountOut(uint256) view returns(uint256) calculate the amount of underlying out for a given amountFeiIn of FEI First get oracle price of token Then figure out how many dollars that amount in is worth by multiplying price * amount. ensure decimals are normalized if on underlying they are not 18","title":"getRedeemAmountOut"},{"location":"developers/contracts/PriceBoundPSM/#params_26","text":"Param Type Notes amountFeiIn uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#returns_18","text":"Param Type Notes amountTokenOut uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#hassurplus","text":"function hasSurplus() view returns(bool) a flag for whether the current balance is above (true) or below (false) the reservesThreshold","title":"hasSurplus"},{"location":"developers/contracts/PriceBoundPSM/#returns_19","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#invert","text":"function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI","title":"invert"},{"location":"developers/contracts/PriceBoundPSM/#params_27","text":"Param Type Notes price tuple the peg price to invert","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#returns_20","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/PriceBoundPSM/#params_28","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#returns_21","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#ispricevalid","text":"function isPriceValid() view returns(bool) return wether the current oracle price is valid or not","title":"isPriceValid"},{"location":"developers/contracts/PriceBoundPSM/#returns_22","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#lastbufferusedtime","text":"function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract","title":"lastBufferUsedTime"},{"location":"developers/contracts/PriceBoundPSM/#returns_23","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#mint_1","text":"function mint(address,uint256,uint256) nonpayable returns(uint256) function to buy FEI for an underlying asset We first transfer any contract-owned fei, then mint the remaining if necessary","title":"mint"},{"location":"developers/contracts/PriceBoundPSM/#params_29","text":"Param Type Notes to address amountIn uint256 minAmountOut uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#returns_24","text":"Param Type Notes amountFeiOut uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#mintfeebasispoints","text":"function mintFeeBasisPoints() view returns(uint256) the fee in basis points for selling asset into FEI","title":"mintFeeBasisPoints"},{"location":"developers/contracts/PriceBoundPSM/#returns_25","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#oracle","text":"function oracle() view returns(address) the oracle reference by the contract","title":"oracle"},{"location":"developers/contracts/PriceBoundPSM/#returns_26","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/PriceBoundPSM/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/PriceBoundPSM/#returns_27","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#ratelimitpersecond","text":"function rateLimitPerSecond() view returns(uint256) the rate per second for this contract","title":"rateLimitPerSecond"},{"location":"developers/contracts/PriceBoundPSM/#returns_28","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#readoracle","text":"function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc","title":"readOracle"},{"location":"developers/contracts/PriceBoundPSM/#returns_29","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#redeem_1","text":"function redeem(address,uint256,uint256) nonpayable returns(uint256) function to redeem FEI for an underlying asset We do not burn Fei; this allows the contract's balance of Fei to be used before the buffer is used In practice, this helps prevent artificial cycling of mint-burn cycles and prevents a griefing vector.","title":"redeem"},{"location":"developers/contracts/PriceBoundPSM/#params_30","text":"Param Type Notes to address amountFeiIn uint256 minAmountOut uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#returns_30","text":"Param Type Notes amountOut uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#redeemfeebasispoints","text":"function redeemFeeBasisPoints() view returns(uint256) the fee in basis points for buying the asset for FEI","title":"redeemFeeBasisPoints"},{"location":"developers/contracts/PriceBoundPSM/#returns_31","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#reservessurplus","text":"function reservesSurplus() view returns(int256) an integer representing the positive surplus or negative deficit of contract balance vs reservesThreshold","title":"reservesSurplus"},{"location":"developers/contracts/PriceBoundPSM/#returns_32","text":"Param Type Notes int256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#reservesthreshold","text":"function reservesThreshold() view returns(uint256) the amount of reserves to be held for redemptions","title":"reservesThreshold"},{"location":"developers/contracts/PriceBoundPSM/#returns_33","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) override default behavior of not checking fei balance","title":"resistantBalanceAndFei"},{"location":"developers/contracts/PriceBoundPSM/#returns_34","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#setbackuporacle","text":"function setBackupOracle(address) nonpayable sets the referenced backup oracle","title":"setBackupOracle"},{"location":"developers/contracts/PriceBoundPSM/#params_31","text":"Param Type Notes newBackupOracle address the new backup oracle to reference","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setbuffercap","text":"function setBufferCap(uint256) nonpayable set the buffer cap","title":"setBufferCap"},{"location":"developers/contracts/PriceBoundPSM/#params_32","text":"Param Type Notes newBufferCap uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/PriceBoundPSM/#params_33","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/PriceBoundPSM/#params_34","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setdecimalsnormalizer","text":"function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer","title":"setDecimalsNormalizer"},{"location":"developers/contracts/PriceBoundPSM/#params_35","text":"Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setdoinvert","text":"function setDoInvert(bool) nonpayable sets the flag for whether to invert or not","title":"setDoInvert"},{"location":"developers/contracts/PriceBoundPSM/#params_36","text":"Param Type Notes newDoInvert bool the new flag for whether to invert","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setmintfee","text":"function setMintFee(uint256) nonpayable set the mint fee vs oracle price in basis point terms","title":"setMintFee"},{"location":"developers/contracts/PriceBoundPSM/#params_37","text":"Param Type Notes newMintFeeBasisPoints uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setoracle","text":"function setOracle(address) nonpayable sets the referenced oracle","title":"setOracle"},{"location":"developers/contracts/PriceBoundPSM/#params_38","text":"Param Type Notes newOracle address the new oracle to reference","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setoracleceilingbasispoints","text":"function setOracleCeilingBasisPoints(uint256) nonpayable sets the ceiling price in BP","title":"setOracleCeilingBasisPoints"},{"location":"developers/contracts/PriceBoundPSM/#params_39","text":"Param Type Notes newCeilingBasisPoints uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setoraclefloorbasispoints","text":"function setOracleFloorBasisPoints(uint256) nonpayable sets the floor price in BP","title":"setOracleFloorBasisPoints"},{"location":"developers/contracts/PriceBoundPSM/#params_40","text":"Param Type Notes newFloorBasisPoints uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setratelimitpersecond","text":"function setRateLimitPerSecond(uint256) nonpayable set the rate limit per second","title":"setRateLimitPerSecond"},{"location":"developers/contracts/PriceBoundPSM/#params_41","text":"Param Type Notes newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setredeemfee","text":"function setRedeemFee(uint256) nonpayable set the redemption fee vs oracle price in basis point terms","title":"setRedeemFee"},{"location":"developers/contracts/PriceBoundPSM/#params_42","text":"Param Type Notes newRedeemFeeBasisPoints uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setreservesthreshold","text":"function setReservesThreshold(uint256) nonpayable set the ideal amount of reserves for the contract to hold for redemptions","title":"setReservesThreshold"},{"location":"developers/contracts/PriceBoundPSM/#params_43","text":"Param Type Notes newReservesThreshold uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#setsurplustarget","text":"function setSurplusTarget(address) nonpayable set the target for sending surplus reserves","title":"setSurplusTarget"},{"location":"developers/contracts/PriceBoundPSM/#params_44","text":"Param Type Notes newTarget address","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#surplustarget","text":"function surplusTarget() view returns(address) the PCV deposit target","title":"surplusTarget"},{"location":"developers/contracts/PriceBoundPSM/#returns_35","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/PriceBoundPSM/#returns_36","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/PriceBoundPSM/#returns_37","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#underlyingtoken","text":"function underlyingToken() view returns(address) the token this PSM will exchange for FEI This token will be set to WETH9 if the bonding curve accepts eth","title":"underlyingToken"},{"location":"developers/contracts/PriceBoundPSM/#returns_38","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/PriceBoundPSM/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/PriceBoundPSM/#updateoracle","text":"function updateOracle() nonpayable updates the referenced oracle","title":"updateOracle"},{"location":"developers/contracts/PriceBoundPSM/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw assets from PSM to an external address","title":"withdraw"},{"location":"developers/contracts/PriceBoundPSM/#params_45","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/PriceBoundPSM/#params_46","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/PriceBoundPSM/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/PriceBoundPSM/#params_47","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/ProxyAdmin/","text":"\u2b05\ufe0f Contracts ProxyAdmin DEV NOTE: This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}. Events OwnershipTransferred event OwnershipTransferred(address,address) Params Param Type Notes previousOwner indexed address newOwner indexed address Methods changeProxyAdmin function changeProxyAdmin(address,address) nonpayable Changes the admin of proxy to newAdmin . Requirements: - This contract must be the current admin of proxy . Params Param Type Notes proxy address newAdmin address getProxyAdmin function getProxyAdmin(address) view returns(address) Returns the current admin of proxy . Requirements: - This contract must be the admin of proxy . Params Param Type Notes proxy address Returns Param Type Notes address getProxyImplementation function getProxyImplementation(address) view returns(address) Returns the current implementation of proxy . Requirements: - This contract must be the admin of proxy . Params Param Type Notes proxy address Returns Param Type Notes address owner function owner() view returns(address) Returns the address of the current owner. Returns Param Type Notes address renounceOwnership function renounceOwnership() nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner. transferOwnership function transferOwnership(address) nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner. Params Param Type Notes newOwner address upgrade function upgrade(address,address) nonpayable Upgrades proxy to implementation . See {TransparentUpgradeableProxy-upgradeTo}. Requirements: - This contract must be the admin of proxy . Params Param Type Notes proxy address implementation address upgradeAndCall function upgradeAndCall(address,address,bytes) payable Upgrades proxy to implementation and calls a function on the new implementation. See {TransparentUpgradeableProxy-upgradeToAndCall}. Requirements: - This contract must be the admin of proxy . Params Param Type Notes proxy address implementation address data bytes \u2b05\ufe0f Contracts","title":"ProxyAdmin"},{"location":"developers/contracts/ProxyAdmin/#proxyadmin","text":"DEV NOTE: This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.","title":"ProxyAdmin"},{"location":"developers/contracts/ProxyAdmin/#events","text":"","title":"Events"},{"location":"developers/contracts/ProxyAdmin/#ownershiptransferred","text":"event OwnershipTransferred(address,address)","title":"OwnershipTransferred"},{"location":"developers/contracts/ProxyAdmin/#params","text":"Param Type Notes previousOwner indexed address newOwner indexed address","title":"Params"},{"location":"developers/contracts/ProxyAdmin/#methods","text":"","title":"Methods"},{"location":"developers/contracts/ProxyAdmin/#changeproxyadmin","text":"function changeProxyAdmin(address,address) nonpayable Changes the admin of proxy to newAdmin . Requirements: - This contract must be the current admin of proxy .","title":"changeProxyAdmin"},{"location":"developers/contracts/ProxyAdmin/#params_1","text":"Param Type Notes proxy address newAdmin address","title":"Params"},{"location":"developers/contracts/ProxyAdmin/#getproxyadmin","text":"function getProxyAdmin(address) view returns(address) Returns the current admin of proxy . Requirements: - This contract must be the admin of proxy .","title":"getProxyAdmin"},{"location":"developers/contracts/ProxyAdmin/#params_2","text":"Param Type Notes proxy address","title":"Params"},{"location":"developers/contracts/ProxyAdmin/#returns","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ProxyAdmin/#getproxyimplementation","text":"function getProxyImplementation(address) view returns(address) Returns the current implementation of proxy . Requirements: - This contract must be the admin of proxy .","title":"getProxyImplementation"},{"location":"developers/contracts/ProxyAdmin/#params_3","text":"Param Type Notes proxy address","title":"Params"},{"location":"developers/contracts/ProxyAdmin/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ProxyAdmin/#owner","text":"function owner() view returns(address) Returns the address of the current owner.","title":"owner"},{"location":"developers/contracts/ProxyAdmin/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/ProxyAdmin/#renounceownership","text":"function renounceOwnership() nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","title":"renounceOwnership"},{"location":"developers/contracts/ProxyAdmin/#transferownership","text":"function transferOwnership(address) nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner.","title":"transferOwnership"},{"location":"developers/contracts/ProxyAdmin/#params_4","text":"Param Type Notes newOwner address","title":"Params"},{"location":"developers/contracts/ProxyAdmin/#upgrade","text":"function upgrade(address,address) nonpayable Upgrades proxy to implementation . See {TransparentUpgradeableProxy-upgradeTo}. Requirements: - This contract must be the admin of proxy .","title":"upgrade"},{"location":"developers/contracts/ProxyAdmin/#params_5","text":"Param Type Notes proxy address implementation address","title":"Params"},{"location":"developers/contracts/ProxyAdmin/#upgradeandcall","text":"function upgradeAndCall(address,address,bytes) payable Upgrades proxy to implementation and calls a function on the new implementation. See {TransparentUpgradeableProxy-upgradeToAndCall}. Requirements: - This contract must be the admin of proxy .","title":"upgradeAndCall"},{"location":"developers/contracts/ProxyAdmin/#params_6","text":"Param Type Notes proxy address implementation address data bytes \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/QuadraticTimelockedDelegator/","text":"QuadraticTimelockedDelegator a timelock for tokens allowing for bulk delegation Author: Fei Protocol allows the timelocked tokens to be delegated by the beneficiary while locked Events BeneficiaryUpdate event BeneficiaryUpdate(address) Params Param Type Notes _beneficiary indexed address DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 PendingBeneficiaryUpdate event PendingBeneficiaryUpdate(address) Params Param Type Notes _pendingBeneficiary indexed address Release event Release(address,address,uint256) Params Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256 TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Methods acceptBeneficiary function acceptBeneficiary() nonpayable accept beneficiary role over timelocked TRIBE alreadyReleasedAmount function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary Returns Param Type Notes uint256 availableForRelease function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release Returns Param Type Notes uint256 beneficiary function beneficiary() view returns(address) beneficiary of tokens after they are released Returns Param Type Notes address clawback function clawback() nonpayable clawbackAdmin function clawbackAdmin() view returns(address) Returns Param Type Notes address cliffSeconds function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed Returns Param Type Notes uint256 delegate function delegate(address) nonpayable delegate all held TRIBE to the to address Params Param Type Notes to address duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 initialBalance function initialBalance() view returns(uint256) initial balance of lockedToken Returns Param Type Notes uint256 isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool lockedToken function lockedToken() view returns(address) ERC20 basic token contract being held in timelock Returns Param Type Notes address passedCliff function passedCliff() view returns(bool) Returns Param Type Notes bool pendingBeneficiary function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary Returns Param Type Notes address release function release(address,uint256) nonpayable releases amount unlocked tokens to address to Params Param Type Notes to address amount uint256 releaseMax function releaseMax(address) nonpayable releases maximum unlocked tokens to address to Params Param Type Notes to address remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setPendingBeneficiary function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted Params Param Type Notes _pendingBeneficiary address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 totalToken function totalToken() view returns(uint256) the total amount of tokens held by timelock Returns Param Type Notes uint256","title":"QuadraticTimelockedDelegator"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#quadratictimelockeddelegator","text":"a timelock for tokens allowing for bulk delegation Author: Fei Protocol allows the timelocked tokens to be delegated by the beneficiary while locked","title":"QuadraticTimelockedDelegator"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#events","text":"","title":"Events"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#beneficiaryupdate","text":"event BeneficiaryUpdate(address)","title":"BeneficiaryUpdate"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#params","text":"Param Type Notes _beneficiary indexed address","title":"Params"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#params_1","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#pendingbeneficiaryupdate","text":"event PendingBeneficiaryUpdate(address)","title":"PendingBeneficiaryUpdate"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#params_2","text":"Param Type Notes _pendingBeneficiary indexed address","title":"Params"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#release","text":"event Release(address,address,uint256)","title":"Release"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#params_3","text":"Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#params_4","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#methods","text":"","title":"Methods"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#acceptbeneficiary","text":"function acceptBeneficiary() nonpayable accept beneficiary role over timelocked TRIBE","title":"acceptBeneficiary"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#alreadyreleasedamount","text":"function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary","title":"alreadyReleasedAmount"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#availableforrelease","text":"function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release","title":"availableForRelease"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#beneficiary","text":"function beneficiary() view returns(address) beneficiary of tokens after they are released","title":"beneficiary"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#clawback","text":"function clawback() nonpayable","title":"clawback"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#clawbackadmin","text":"function clawbackAdmin() view returns(address)","title":"clawbackAdmin"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#cliffseconds","text":"function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed","title":"cliffSeconds"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#delegate","text":"function delegate(address) nonpayable delegate all held TRIBE to the to address","title":"delegate"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#params_5","text":"Param Type Notes to address","title":"Params"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#initialbalance","text":"function initialBalance() view returns(uint256) initial balance of lockedToken","title":"initialBalance"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#lockedtoken","text":"function lockedToken() view returns(address) ERC20 basic token contract being held in timelock","title":"lockedToken"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#passedcliff","text":"function passedCliff() view returns(bool)","title":"passedCliff"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#pendingbeneficiary","text":"function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary","title":"pendingBeneficiary"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#release_1","text":"function release(address,uint256) nonpayable releases amount unlocked tokens to address to","title":"release"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#params_6","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#releasemax","text":"function releaseMax(address) nonpayable releases maximum unlocked tokens to address to","title":"releaseMax"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#params_7","text":"Param Type Notes to address","title":"Params"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#setpendingbeneficiary","text":"function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted","title":"setPendingBeneficiary"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#params_8","text":"Param Type Notes _pendingBeneficiary address","title":"Params"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#totaltoken","text":"function totalToken() view returns(uint256) the total amount of tokens held by timelock","title":"totalToken"},{"location":"developers/contracts/QuadraticTimelockedDelegator/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/","text":"QuadraticTokenTimelock Events BeneficiaryUpdate event BeneficiaryUpdate(address) Params Param Type Notes _beneficiary indexed address DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 PendingBeneficiaryUpdate event PendingBeneficiaryUpdate(address) Params Param Type Notes _pendingBeneficiary indexed address Release event Release(address,address,uint256) Params Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256 TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Methods acceptBeneficiary function acceptBeneficiary() nonpayable pending beneficiary accepts new beneficiary alreadyReleasedAmount function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary Returns Param Type Notes uint256 availableForRelease function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release Returns Param Type Notes uint256 beneficiary function beneficiary() view returns(address) beneficiary of tokens after they are released Returns Param Type Notes address clawback function clawback() nonpayable clawbackAdmin function clawbackAdmin() view returns(address) Returns Param Type Notes address cliffSeconds function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed Returns Param Type Notes uint256 duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 initialBalance function initialBalance() view returns(uint256) initial balance of lockedToken Returns Param Type Notes uint256 isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool lockedToken function lockedToken() view returns(address) ERC20 basic token contract being held in timelock Returns Param Type Notes address passedCliff function passedCliff() view returns(bool) Returns Param Type Notes bool pendingBeneficiary function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary Returns Param Type Notes address release function release(address,uint256) nonpayable releases amount unlocked tokens to address to Params Param Type Notes to address amount uint256 releaseMax function releaseMax(address) nonpayable releases maximum unlocked tokens to address to Params Param Type Notes to address remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setPendingBeneficiary function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted Params Param Type Notes _pendingBeneficiary address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 totalToken function totalToken() view returns(uint256) the total amount of tokens held by timelock Returns Param Type Notes uint256","title":"QuadraticTokenTimelock"},{"location":"developers/contracts/QuadraticTokenTimelock/#quadratictokentimelock","text":"","title":"QuadraticTokenTimelock"},{"location":"developers/contracts/QuadraticTokenTimelock/#events","text":"","title":"Events"},{"location":"developers/contracts/QuadraticTokenTimelock/#beneficiaryupdate","text":"event BeneficiaryUpdate(address)","title":"BeneficiaryUpdate"},{"location":"developers/contracts/QuadraticTokenTimelock/#params","text":"Param Type Notes _beneficiary indexed address","title":"Params"},{"location":"developers/contracts/QuadraticTokenTimelock/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/QuadraticTokenTimelock/#params_1","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/QuadraticTokenTimelock/#pendingbeneficiaryupdate","text":"event PendingBeneficiaryUpdate(address)","title":"PendingBeneficiaryUpdate"},{"location":"developers/contracts/QuadraticTokenTimelock/#params_2","text":"Param Type Notes _pendingBeneficiary indexed address","title":"Params"},{"location":"developers/contracts/QuadraticTokenTimelock/#release","text":"event Release(address,address,uint256)","title":"Release"},{"location":"developers/contracts/QuadraticTokenTimelock/#params_3","text":"Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/QuadraticTokenTimelock/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/QuadraticTokenTimelock/#params_4","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/QuadraticTokenTimelock/#methods","text":"","title":"Methods"},{"location":"developers/contracts/QuadraticTokenTimelock/#acceptbeneficiary","text":"function acceptBeneficiary() nonpayable pending beneficiary accepts new beneficiary","title":"acceptBeneficiary"},{"location":"developers/contracts/QuadraticTokenTimelock/#alreadyreleasedamount","text":"function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary","title":"alreadyReleasedAmount"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#availableforrelease","text":"function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release","title":"availableForRelease"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#beneficiary","text":"function beneficiary() view returns(address) beneficiary of tokens after they are released","title":"beneficiary"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#clawback","text":"function clawback() nonpayable","title":"clawback"},{"location":"developers/contracts/QuadraticTokenTimelock/#clawbackadmin","text":"function clawbackAdmin() view returns(address)","title":"clawbackAdmin"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#cliffseconds","text":"function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed","title":"cliffSeconds"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#initialbalance","text":"function initialBalance() view returns(uint256) initial balance of lockedToken","title":"initialBalance"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#lockedtoken","text":"function lockedToken() view returns(address) ERC20 basic token contract being held in timelock","title":"lockedToken"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#passedcliff","text":"function passedCliff() view returns(bool)","title":"passedCliff"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#pendingbeneficiary","text":"function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary","title":"pendingBeneficiary"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#release_1","text":"function release(address,uint256) nonpayable releases amount unlocked tokens to address to","title":"release"},{"location":"developers/contracts/QuadraticTokenTimelock/#params_5","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/QuadraticTokenTimelock/#releasemax","text":"function releaseMax(address) nonpayable releases maximum unlocked tokens to address to","title":"releaseMax"},{"location":"developers/contracts/QuadraticTokenTimelock/#params_6","text":"Param Type Notes to address","title":"Params"},{"location":"developers/contracts/QuadraticTokenTimelock/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#setpendingbeneficiary","text":"function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted","title":"setPendingBeneficiary"},{"location":"developers/contracts/QuadraticTokenTimelock/#params_7","text":"Param Type Notes _pendingBeneficiary address","title":"Params"},{"location":"developers/contracts/QuadraticTokenTimelock/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadraticTokenTimelock/#totaltoken","text":"function totalToken() view returns(uint256) the total amount of tokens held by timelock","title":"totalToken"},{"location":"developers/contracts/QuadraticTokenTimelock/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/","text":"QuadtraticTimelockedSubdelegator a timelock for TRIBE allowing for sub-delegation Author: Fei Protocol allows the timelocked TRIBE to be delegated by the beneficiary while locked Events BeneficiaryUpdate event BeneficiaryUpdate(address) Params Param Type Notes _beneficiary indexed address Delegate event Delegate(address,uint256) Params Param Type Notes _delegatee indexed address _amount uint256 DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 PendingBeneficiaryUpdate event PendingBeneficiaryUpdate(address) Params Param Type Notes _pendingBeneficiary indexed address Release event Release(address,address,uint256) Params Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256 TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Undelegate event Undelegate(address,uint256) Params Param Type Notes _delegatee indexed address _amount uint256 Methods acceptBeneficiary function acceptBeneficiary() nonpayable accept beneficiary role over timelocked TRIBE. Delegates all held (non-subdelegated) tribe to beneficiary alreadyReleasedAmount function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary Returns Param Type Notes uint256 availableForRelease function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release Returns Param Type Notes uint256 beneficiary function beneficiary() view returns(address) beneficiary of tokens after they are released Returns Param Type Notes address clawback function clawback() nonpayable clawbackAdmin function clawbackAdmin() view returns(address) Returns Param Type Notes address cliffSeconds function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed Returns Param Type Notes uint256 delegate function delegate(address,uint256) nonpayable delegate locked TRIBE to a delegatee Params Param Type Notes delegatee address the target address to delegate to amount uint256 the amount of TRIBE to delegate. Will increment existing delegated TRIBE delegateAmount function delegateAmount(address) view returns(uint256) associated delegated amount of TRIBE for a delegatee Params Param Type Notes address Returns Param Type Notes uint256 delegateContract function delegateContract(address) view returns(address) associated delegate proxy contract for a delegatee Params Param Type Notes address Returns Param Type Notes address duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 initialBalance function initialBalance() view returns(uint256) initial balance of lockedToken Returns Param Type Notes uint256 isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool lockedToken function lockedToken() view returns(address) ERC20 basic token contract being held in timelock Returns Param Type Notes address passedCliff function passedCliff() view returns(bool) Returns Param Type Notes bool pendingBeneficiary function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary Returns Param Type Notes address release function release(address,uint256) nonpayable releases amount unlocked tokens to address to Params Param Type Notes to address amount uint256 releaseMax function releaseMax(address) nonpayable releases maximum unlocked tokens to address to Params Param Type Notes to address remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setPendingBeneficiary function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted Params Param Type Notes _pendingBeneficiary address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 totalDelegated function totalDelegated() view returns(uint256) the total delegated amount of TRIBE Returns Param Type Notes uint256 totalToken function totalToken() view returns(uint256) calculate total TRIBE held plus delegated used by LinearTokenTimelock to determine the released amount Returns Param Type Notes uint256 tribe function tribe() view returns(address) the TRIBE token contract Returns Param Type Notes address undelegate function undelegate(address) nonpayable returns(uint256) return delegated TRIBE to the timelock Params Param Type Notes delegatee address the target address to undelegate from Returns Param Type Notes uint256","title":"QuadtraticTimelockedSubdelegator"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#quadtratictimelockedsubdelegator","text":"a timelock for TRIBE allowing for sub-delegation Author: Fei Protocol allows the timelocked TRIBE to be delegated by the beneficiary while locked","title":"QuadtraticTimelockedSubdelegator"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#events","text":"","title":"Events"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#beneficiaryupdate","text":"event BeneficiaryUpdate(address)","title":"BeneficiaryUpdate"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params","text":"Param Type Notes _beneficiary indexed address","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#delegate","text":"event Delegate(address,uint256)","title":"Delegate"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_1","text":"Param Type Notes _delegatee indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_2","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#pendingbeneficiaryupdate","text":"event PendingBeneficiaryUpdate(address)","title":"PendingBeneficiaryUpdate"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_3","text":"Param Type Notes _pendingBeneficiary indexed address","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#release","text":"event Release(address,address,uint256)","title":"Release"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_4","text":"Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_5","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#undelegate","text":"event Undelegate(address,uint256)","title":"Undelegate"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_6","text":"Param Type Notes _delegatee indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#methods","text":"","title":"Methods"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#acceptbeneficiary","text":"function acceptBeneficiary() nonpayable accept beneficiary role over timelocked TRIBE. Delegates all held (non-subdelegated) tribe to beneficiary","title":"acceptBeneficiary"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#alreadyreleasedamount","text":"function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary","title":"alreadyReleasedAmount"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#availableforrelease","text":"function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release","title":"availableForRelease"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#beneficiary","text":"function beneficiary() view returns(address) beneficiary of tokens after they are released","title":"beneficiary"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#clawback","text":"function clawback() nonpayable","title":"clawback"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#clawbackadmin","text":"function clawbackAdmin() view returns(address)","title":"clawbackAdmin"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#cliffseconds","text":"function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed","title":"cliffSeconds"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#delegate_1","text":"function delegate(address,uint256) nonpayable delegate locked TRIBE to a delegatee","title":"delegate"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_7","text":"Param Type Notes delegatee address the target address to delegate to amount uint256 the amount of TRIBE to delegate. Will increment existing delegated TRIBE","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#delegateamount","text":"function delegateAmount(address) view returns(uint256) associated delegated amount of TRIBE for a delegatee","title":"delegateAmount"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_8","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#delegatecontract","text":"function delegateContract(address) view returns(address) associated delegate proxy contract for a delegatee","title":"delegateContract"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_9","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#initialbalance","text":"function initialBalance() view returns(uint256) initial balance of lockedToken","title":"initialBalance"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_9","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#lockedtoken","text":"function lockedToken() view returns(address) ERC20 basic token contract being held in timelock","title":"lockedToken"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#passedcliff","text":"function passedCliff() view returns(bool)","title":"passedCliff"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#pendingbeneficiary","text":"function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary","title":"pendingBeneficiary"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_13","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#release_1","text":"function release(address,uint256) nonpayable releases amount unlocked tokens to address to","title":"release"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_10","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#releasemax","text":"function releaseMax(address) nonpayable releases maximum unlocked tokens to address to","title":"releaseMax"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_11","text":"Param Type Notes to address","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#setpendingbeneficiary","text":"function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted","title":"setPendingBeneficiary"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_12","text":"Param Type Notes _pendingBeneficiary address","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#totaldelegated","text":"function totalDelegated() view returns(uint256) the total delegated amount of TRIBE","title":"totalDelegated"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_17","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#totaltoken","text":"function totalToken() view returns(uint256) calculate total TRIBE held plus delegated used by LinearTokenTimelock to determine the released amount","title":"totalToken"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_18","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#tribe","text":"function tribe() view returns(address) the TRIBE token contract","title":"tribe"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_19","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#undelegate_1","text":"function undelegate(address) nonpayable returns(uint256) return delegated TRIBE to the timelock","title":"undelegate"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#params_13","text":"Param Type Notes delegatee address the target address to undelegate from","title":"Params"},{"location":"developers/contracts/QuadtraticTimelockedSubdelegator/#returns_20","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/RatioPCVController/","text":"\u2b05\ufe0f Contracts RatioPCVController a PCV controller for moving a ratio of the total value in the PCV deposit Author: Fei Protocol Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused withdrawRatio function withdrawRatio(address,address,uint256) nonpayable withdraw tokens from the input PCV deposit in basis points terms Params Param Type Notes pcvDeposit address PCV deposit to withdraw from to address the address to send PCV to basisPoints uint256 ratio of PCV to withdraw in basis points terms (1/10000) withdrawRatioERC20 function withdrawRatioERC20(address,address,address,uint256) nonpayable withdraw a specific ERC20 token from the input PCV deposit in basis points terms Params Param Type Notes pcvDeposit address PCV deposit to withdraw from token address the ERC20 token to withdraw to address the address to send tokens to basisPoints uint256 ratio of PCV to withdraw in basis points terms (1/10000) \u2b05\ufe0f Contracts","title":"RatioPCVController"},{"location":"developers/contracts/RatioPCVController/#ratiopcvcontroller","text":"a PCV controller for moving a ratio of the total value in the PCV deposit Author: Fei Protocol","title":"RatioPCVController"},{"location":"developers/contracts/RatioPCVController/#events","text":"","title":"Events"},{"location":"developers/contracts/RatioPCVController/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/RatioPCVController/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/RatioPCVController/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/RatioPCVController/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/RatioPCVController/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/RatioPCVController/#params_2","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/RatioPCVController/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/RatioPCVController/#params_3","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/RatioPCVController/#methods","text":"","title":"Methods"},{"location":"developers/contracts/RatioPCVController/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/RatioPCVController/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/RatioPCVController/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/RatioPCVController/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/RatioPCVController/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/RatioPCVController/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/RatioPCVController/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/RatioPCVController/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/RatioPCVController/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/RatioPCVController/#params_4","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/RatioPCVController/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/RatioPCVController/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/RatioPCVController/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/RatioPCVController/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/RatioPCVController/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/RatioPCVController/#params_5","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/RatioPCVController/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/RatioPCVController/#params_6","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/RatioPCVController/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/RatioPCVController/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/RatioPCVController/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/RatioPCVController/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/RatioPCVController/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/RatioPCVController/#withdrawratio","text":"function withdrawRatio(address,address,uint256) nonpayable withdraw tokens from the input PCV deposit in basis points terms","title":"withdrawRatio"},{"location":"developers/contracts/RatioPCVController/#params_7","text":"Param Type Notes pcvDeposit address PCV deposit to withdraw from to address the address to send PCV to basisPoints uint256 ratio of PCV to withdraw in basis points terms (1/10000)","title":"Params"},{"location":"developers/contracts/RatioPCVController/#withdrawratioerc20","text":"function withdrawRatioERC20(address,address,address,uint256) nonpayable withdraw a specific ERC20 token from the input PCV deposit in basis points terms","title":"withdrawRatioERC20"},{"location":"developers/contracts/RatioPCVController/#params_8","text":"Param Type Notes pcvDeposit address PCV deposit to withdraw from token address the ERC20 token to withdraw to address the address to send tokens to basisPoints uint256 ratio of PCV to withdraw in basis points terms (1/10000) \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/","text":"\u2b05\ufe0f Contracts RewardsDistributorAdmin this contract has its own internal ACL. The reasons for doing this and not leveraging core are twofold. One, it simplifies devops operations around adding and removing users, and two, by being self contained, it is more efficient as it does not need to make external calls to figure out who has a particular role. Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Paused event Paused(address) Params Param Type Notes account address RoleAdminChanged event RoleAdminChanged(bytes32,bytes32,bytes32) Params Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32 RoleGranted event RoleGranted(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address RoleRevoked event RoleRevoked(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address Unpaused event Unpaused(address) Params Param Type Notes account address Methods AUTO_REWARDS_DISTRIBUTOR_ROLE function AUTO_REWARDS_DISTRIBUTOR_ROLE() view returns(bytes32) auto rewards distributor controller role. This role will be given to auto rewards distributor controller smart contracts Returns Param Type Notes bytes32 CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 DEFAULT_ADMIN_ROLE function DEFAULT_ADMIN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 _acceptAdmin function _acceptAdmin() nonpayable Accepts transfer of admin rights. msg.sender must be pendingAdmin Admin function for pending admin to accept role and update admin _addMarket function _addMarket(address) nonpayable Add a default market to claim rewards for in claimRewards() Params Param Type Notes cToken address The market to add _grantComp function _grantComp(address,uint256) nonpayable Transfer COMP to the recipient Note: If there is not enough COMP, we do not perform the transfer all. Params Param Type Notes recipient address The address of the recipient to transfer COMP to amount uint256 The amount of COMP to (possibly) transfer _setCompBorrowSpeed function _setCompBorrowSpeed(address,uint256) nonpayable Set COMP speed for a single market Callable only by users with auto rewards distributor role Params Param Type Notes cToken address The market whose COMP speed to update compSpeed uint256 _setCompSupplySpeed function _setCompSupplySpeed(address,uint256) nonpayable Set COMP speed for a single market. Callable only by users with auto rewards distributor role Params Param Type Notes cToken address The market whose COMP speed to update compSpeed uint256 _setContributorCompSpeed function _setContributorCompSpeed(address,uint256) nonpayable Set COMP speed for a single contributor Params Param Type Notes contributor address The contributor whose COMP speed to update compSpeed uint256 New COMP speed for contributor _setImplementation function _setImplementation(address) nonpayable Set the implementation contract the RewardsDistributorDelegator delegate calls Params Param Type Notes implementation_ address the logic contract address _setPendingAdmin function _setPendingAdmin(address) nonpayable Begins transfer of admin rights. The newPendingAdmin must call _acceptAdmin to finalize the transfer. Admin function to begin change of admin. The newPendingAdmin must call _acceptAdmin to finalize the transfer. Params Param Type Notes newPendingAdmin address New pending admin. becomeAdmin function becomeAdmin() nonpayable allow admin or governor to assume auto reward distributor admin role compBorrowSpeeds function compBorrowSpeeds(address) view returns(uint256) view function to get the comp borrow speeds from the rewards distributor contract Params Param Type Notes cToken address The market to view Returns Param Type Notes uint256 compSupplySpeeds function compSupplySpeeds(address) view returns(uint256) view function to get the comp supply speeds from the rewards distributor contract Params Param Type Notes cToken address The market to view Returns Param Type Notes uint256 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getRoleAdmin function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}. Params Param Type Notes role bytes32 Returns Param Type Notes bytes32 getRoleMember function getRoleMember(bytes32,uint256) view returns(address) Returns one of the accounts that have role . index must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information. Params Param Type Notes role bytes32 index uint256 Returns Param Type Notes address getRoleMemberCount function getRoleMemberCount(bytes32) view returns(uint256) Returns the number of accounts that have role . Can be used together with {getRoleMember} to enumerate all bearers of a role. Params Param Type Notes role bytes32 Returns Param Type Notes uint256 grantRole function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address guardianDisableBorrowSpeed function guardianDisableBorrowSpeed(address) nonpayable Set COMP borrow speed for a single market to 0 Callable only by the guardian or governor Params Param Type Notes cToken address The market whose COMP speed to set to 0 guardianDisableSupplySpeed function guardianDisableSupplySpeed(address) nonpayable Set COMP supply speed for a single market to 0 Callable only by the guardian or governor Params Param Type Notes cToken address The market whose COMP speed to set to 0 hasRole function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role . Params Param Type Notes role bytes32 account address Returns Param Type Notes bool isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool renounceRole function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked role , emits a {RoleRevoked} event. Requirements: - the caller must be account . Params Param Type Notes role bytes32 account address revokeRole function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address rewardsDistributorContract function rewardsDistributorContract() view returns(address) rewards distributor contract Returns Param Type Notes address setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address supportsInterface function supportsInterface(bytes4) view returns(bool) See {IERC165-supportsInterface}. Params Param Type Notes interfaceId bytes4 Returns Param Type Notes bool tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"RewardsDistributorAdmin"},{"location":"developers/contracts/RewardsDistributorAdmin/#rewardsdistributoradmin","text":"this contract has its own internal ACL. The reasons for doing this and not leveraging core are twofold. One, it simplifies devops operations around adding and removing users, and two, by being self contained, it is more efficient as it does not need to make external calls to figure out who has a particular role.","title":"RewardsDistributorAdmin"},{"location":"developers/contracts/RewardsDistributorAdmin/#events","text":"","title":"Events"},{"location":"developers/contracts/RewardsDistributorAdmin/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/RewardsDistributorAdmin/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_2","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#roleadminchanged","text":"event RoleAdminChanged(bytes32,bytes32,bytes32)","title":"RoleAdminChanged"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_3","text":"Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#rolegranted","text":"event RoleGranted(bytes32,address,address)","title":"RoleGranted"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_4","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#rolerevoked","text":"event RoleRevoked(bytes32,address,address)","title":"RoleRevoked"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_5","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_6","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#methods","text":"","title":"Methods"},{"location":"developers/contracts/RewardsDistributorAdmin/#auto_rewards_distributor_role","text":"function AUTO_REWARDS_DISTRIBUTOR_ROLE() view returns(bytes32) auto rewards distributor controller role. This role will be given to auto rewards distributor controller smart contracts","title":"AUTO_REWARDS_DISTRIBUTOR_ROLE"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_1","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#default_admin_role","text":"function DEFAULT_ADMIN_ROLE() view returns(bytes32)","title":"DEFAULT_ADMIN_ROLE"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_2","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#_acceptadmin","text":"function _acceptAdmin() nonpayable Accepts transfer of admin rights. msg.sender must be pendingAdmin Admin function for pending admin to accept role and update admin","title":"_acceptAdmin"},{"location":"developers/contracts/RewardsDistributorAdmin/#_addmarket","text":"function _addMarket(address) nonpayable Add a default market to claim rewards for in claimRewards()","title":"_addMarket"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_7","text":"Param Type Notes cToken address The market to add","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#_grantcomp","text":"function _grantComp(address,uint256) nonpayable Transfer COMP to the recipient Note: If there is not enough COMP, we do not perform the transfer all.","title":"_grantComp"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_8","text":"Param Type Notes recipient address The address of the recipient to transfer COMP to amount uint256 The amount of COMP to (possibly) transfer","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#_setcompborrowspeed","text":"function _setCompBorrowSpeed(address,uint256) nonpayable Set COMP speed for a single market Callable only by users with auto rewards distributor role","title":"_setCompBorrowSpeed"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_9","text":"Param Type Notes cToken address The market whose COMP speed to update compSpeed uint256","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#_setcompsupplyspeed","text":"function _setCompSupplySpeed(address,uint256) nonpayable Set COMP speed for a single market. Callable only by users with auto rewards distributor role","title":"_setCompSupplySpeed"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_10","text":"Param Type Notes cToken address The market whose COMP speed to update compSpeed uint256","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#_setcontributorcompspeed","text":"function _setContributorCompSpeed(address,uint256) nonpayable Set COMP speed for a single contributor","title":"_setContributorCompSpeed"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_11","text":"Param Type Notes contributor address The contributor whose COMP speed to update compSpeed uint256 New COMP speed for contributor","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#_setimplementation","text":"function _setImplementation(address) nonpayable Set the implementation contract the RewardsDistributorDelegator delegate calls","title":"_setImplementation"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_12","text":"Param Type Notes implementation_ address the logic contract address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#_setpendingadmin","text":"function _setPendingAdmin(address) nonpayable Begins transfer of admin rights. The newPendingAdmin must call _acceptAdmin to finalize the transfer. Admin function to begin change of admin. The newPendingAdmin must call _acceptAdmin to finalize the transfer.","title":"_setPendingAdmin"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_13","text":"Param Type Notes newPendingAdmin address New pending admin.","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#becomeadmin","text":"function becomeAdmin() nonpayable allow admin or governor to assume auto reward distributor admin role","title":"becomeAdmin"},{"location":"developers/contracts/RewardsDistributorAdmin/#compborrowspeeds","text":"function compBorrowSpeeds(address) view returns(uint256) view function to get the comp borrow speeds from the rewards distributor contract","title":"compBorrowSpeeds"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_14","text":"Param Type Notes cToken address The market to view","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#compsupplyspeeds","text":"function compSupplySpeeds(address) view returns(uint256) view function to get the comp supply speeds from the rewards distributor contract","title":"compSupplySpeeds"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_15","text":"Param Type Notes cToken address The market to view","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#getroleadmin","text":"function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","title":"getRoleAdmin"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_16","text":"Param Type Notes role bytes32","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_8","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#getrolemember","text":"function getRoleMember(bytes32,uint256) view returns(address) Returns one of the accounts that have role . index must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","title":"getRoleMember"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_17","text":"Param Type Notes role bytes32 index uint256","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#getrolemembercount","text":"function getRoleMemberCount(bytes32) view returns(uint256) Returns the number of accounts that have role . Can be used together with {getRoleMember} to enumerate all bearers of a role.","title":"getRoleMemberCount"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_18","text":"Param Type Notes role bytes32","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#grantrole","text":"function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role.","title":"grantRole"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_19","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#guardiandisableborrowspeed","text":"function guardianDisableBorrowSpeed(address) nonpayable Set COMP borrow speed for a single market to 0 Callable only by the guardian or governor","title":"guardianDisableBorrowSpeed"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_20","text":"Param Type Notes cToken address The market whose COMP speed to set to 0","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#guardiandisablesupplyspeed","text":"function guardianDisableSupplySpeed(address) nonpayable Set COMP supply speed for a single market to 0 Callable only by the guardian or governor","title":"guardianDisableSupplySpeed"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_21","text":"Param Type Notes cToken address The market whose COMP speed to set to 0","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#hasrole","text":"function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role .","title":"hasRole"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_22","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_23","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/RewardsDistributorAdmin/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#renouncerole","text":"function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked role , emits a {RoleRevoked} event. Requirements: - the caller must be account .","title":"renounceRole"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_24","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#revokerole","text":"function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role.","title":"revokeRole"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_25","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#rewardsdistributorcontract","text":"function rewardsDistributorContract() view returns(address) rewards distributor contract","title":"rewardsDistributorContract"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_14","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_26","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_27","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#supportsinterface","text":"function supportsInterface(bytes4) view returns(bool) See {IERC165-supportsInterface}.","title":"supportsInterface"},{"location":"developers/contracts/RewardsDistributorAdmin/#params_28","text":"Param Type Notes interfaceId bytes4","title":"Params"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_15","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_16","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/RewardsDistributorAdmin/#returns_17","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/RewardsDistributorAdmin/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/","text":"\u2b05\ufe0f Contracts SnapshotDelegatorPCVDeposit Snapshot Delegator PCV Deposit Author: Fei Protocol Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DelegateUpdate event DelegateUpdate(address,address) Params Param Type Notes oldDelegate indexed address newDelegate indexed address Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 DELEGATE_REGISTRY function DELEGATE_REGISTRY() view returns(address) the Gnosis delegate registry used by snapshot Returns Param Type Notes address balance function balance() view returns(uint256) returns total balance of PCV in the Deposit Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address clearDelegate function clearDelegate() nonpayable clears the delegate from snapshot callable by governor or guardian core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address delegate function delegate() view returns(address) the snapshot delegate for the deposit Returns Param Type Notes address deposit function deposit() nonpayable no-op fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit Returns Param Type Notes uint256 uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDelegate function setDelegate(address) nonpayable sets the snapshot delegate callable by governor or admin Params Param Type Notes newDelegate address spaceId function spaceId() view returns(bytes32) the keccak encoded spaceId of the snapshot space Returns Param Type Notes bytes32 token function token() view returns(address) the token that is being used for snapshot Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused withdraw function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation Params Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"SnapshotDelegatorPCVDeposit"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#snapshotdelegatorpcvdeposit","text":"Snapshot Delegator PCV Deposit Author: Fei Protocol","title":"SnapshotDelegatorPCVDeposit"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#events","text":"","title":"Events"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#delegateupdate","text":"event DelegateUpdate(address,address)","title":"DelegateUpdate"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_2","text":"Param Type Notes oldDelegate indexed address newDelegate indexed address","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_3","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_5","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_6","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_7","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_8","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#delegate_registry","text":"function DELEGATE_REGISTRY() view returns(address) the Gnosis delegate registry used by snapshot","title":"DELEGATE_REGISTRY"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#balance","text":"function balance() view returns(uint256) returns total balance of PCV in the Deposit","title":"balance"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#cleardelegate","text":"function clearDelegate() nonpayable clears the delegate from snapshot callable by governor or guardian","title":"clearDelegate"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#delegate","text":"function delegate() view returns(address) the snapshot delegate for the deposit","title":"delegate"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#deposit_1","text":"function deposit() nonpayable no-op","title":"deposit"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_9","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_9","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_10","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_10","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_11","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#setdelegate","text":"function setDelegate(address) nonpayable sets the snapshot delegate callable by governor or admin","title":"setDelegate"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_12","text":"Param Type Notes newDelegate address","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#spaceid","text":"function spaceId() view returns(bytes32) the keccak encoded spaceId of the snapshot space","title":"spaceId"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_11","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#token","text":"function token() view returns(address) the token that is being used for snapshot","title":"token"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_12","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_13","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation","title":"withdraw"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_13","text":"Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_14","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/SnapshotDelegatorPCVDeposit/#params_15","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/StakingTokenWrapper/","text":"\u2b05\ufe0f Contracts StakingTokenWrapper StakingTokenWrapper for TribalChief Allows the TribalChief to distribute TRIBE to a beneficiary contract The beneficiary is the sole holder of a dummy token staked in the TribalChief Events Approval event Approval(address,address,uint256) Params Param Type Notes owner indexed address spender indexed address value uint256 Transfer event Transfer(address,address,uint256) Params Param Type Notes from indexed address to indexed address value uint256 Methods allowance function allowance(address,address) view returns(uint256) See {IERC20-allowance}. Params Param Type Notes owner address spender address Returns Param Type Notes uint256 approve function approve(address,uint256) nonpayable returns(bool) See {IERC20-approve}. Requirements: - spender cannot be the zero address. Params Param Type Notes spender address amount uint256 Returns Param Type Notes bool balanceOf function balanceOf(address) view returns(uint256) See {IERC20-balanceOf}. Params Param Type Notes account address Returns Param Type Notes uint256 beneficiary function beneficiary() view returns(address) the recipient of all harvested TRIBE Returns Param Type Notes address decimals function decimals() view returns(uint8) Returns the number of decimals used to get its user representation. For example, if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5.05 ( 505 / 10 ** 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}. Returns Param Type Notes uint8 decreaseAllowance function decreaseAllowance(address,uint256) nonpayable returns(bool) Atomically decreases the allowance granted to spender by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - spender cannot be the zero address. - spender must have allowance for the caller of at least subtractedValue . Params Param Type Notes spender address subtractedValue uint256 Returns Param Type Notes bool harvest function harvest() nonpayable send rewards to the beneficiary increaseAllowance function increaseAllowance(address,uint256) nonpayable returns(bool) Atomically increases the allowance granted to spender by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - spender cannot be the zero address. Params Param Type Notes spender address addedValue uint256 Returns Param Type Notes bool init function init(uint256) nonpayable initialize the pool with this token as the sole staker Params Param Type Notes _pid uint256 the pool id of the staking pool associated with this token name function name() view returns(string) Returns the name of the token. Returns Param Type Notes string pid function pid() view returns(uint256) the pool id of the corresponding pool in the TribalChief Returns Param Type Notes uint256 symbol function symbol() view returns(string) Returns the symbol of the token, usually a shorter version of the name. Returns Param Type Notes string totalSupply function totalSupply() view returns(uint256) See {IERC20-totalSupply}. Returns Param Type Notes uint256 transfer function transfer(address,uint256) nonpayable returns(bool) See {IERC20-transfer}. Requirements: - recipient cannot be the zero address. - the caller must have a balance of at least amount . Params Param Type Notes recipient address amount uint256 Returns Param Type Notes bool transferFrom function transferFrom(address,address,uint256) nonpayable returns(bool) See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - sender and recipient cannot be the zero address. - sender must have a balance of at least amount . - the caller must have allowance for sender 's tokens of at least amount . Params Param Type Notes sender address recipient address amount uint256 Returns Param Type Notes bool tribalChief function tribalChief() view returns(address) the TribalChief staking rewards contract Returns Param Type Notes address \u2b05\ufe0f Contracts","title":"StakingTokenWrapper"},{"location":"developers/contracts/StakingTokenWrapper/#stakingtokenwrapper","text":"StakingTokenWrapper for TribalChief Allows the TribalChief to distribute TRIBE to a beneficiary contract The beneficiary is the sole holder of a dummy token staked in the TribalChief","title":"StakingTokenWrapper"},{"location":"developers/contracts/StakingTokenWrapper/#events","text":"","title":"Events"},{"location":"developers/contracts/StakingTokenWrapper/#approval","text":"event Approval(address,address,uint256)","title":"Approval"},{"location":"developers/contracts/StakingTokenWrapper/#params","text":"Param Type Notes owner indexed address spender indexed address value uint256","title":"Params"},{"location":"developers/contracts/StakingTokenWrapper/#transfer","text":"event Transfer(address,address,uint256)","title":"Transfer"},{"location":"developers/contracts/StakingTokenWrapper/#params_1","text":"Param Type Notes from indexed address to indexed address value uint256","title":"Params"},{"location":"developers/contracts/StakingTokenWrapper/#methods","text":"","title":"Methods"},{"location":"developers/contracts/StakingTokenWrapper/#allowance","text":"function allowance(address,address) view returns(uint256) See {IERC20-allowance}.","title":"allowance"},{"location":"developers/contracts/StakingTokenWrapper/#params_2","text":"Param Type Notes owner address spender address","title":"Params"},{"location":"developers/contracts/StakingTokenWrapper/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#approve","text":"function approve(address,uint256) nonpayable returns(bool) See {IERC20-approve}. Requirements: - spender cannot be the zero address.","title":"approve"},{"location":"developers/contracts/StakingTokenWrapper/#params_3","text":"Param Type Notes spender address amount uint256","title":"Params"},{"location":"developers/contracts/StakingTokenWrapper/#returns_1","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#balanceof","text":"function balanceOf(address) view returns(uint256) See {IERC20-balanceOf}.","title":"balanceOf"},{"location":"developers/contracts/StakingTokenWrapper/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/StakingTokenWrapper/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#beneficiary","text":"function beneficiary() view returns(address) the recipient of all harvested TRIBE","title":"beneficiary"},{"location":"developers/contracts/StakingTokenWrapper/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#decimals","text":"function decimals() view returns(uint8) Returns the number of decimals used to get its user representation. For example, if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5.05 ( 505 / 10 ** 2 ). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.","title":"decimals"},{"location":"developers/contracts/StakingTokenWrapper/#returns_4","text":"Param Type Notes uint8","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#decreaseallowance","text":"function decreaseAllowance(address,uint256) nonpayable returns(bool) Atomically decreases the allowance granted to spender by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - spender cannot be the zero address. - spender must have allowance for the caller of at least subtractedValue .","title":"decreaseAllowance"},{"location":"developers/contracts/StakingTokenWrapper/#params_5","text":"Param Type Notes spender address subtractedValue uint256","title":"Params"},{"location":"developers/contracts/StakingTokenWrapper/#returns_5","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#harvest","text":"function harvest() nonpayable send rewards to the beneficiary","title":"harvest"},{"location":"developers/contracts/StakingTokenWrapper/#increaseallowance","text":"function increaseAllowance(address,uint256) nonpayable returns(bool) Atomically increases the allowance granted to spender by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - spender cannot be the zero address.","title":"increaseAllowance"},{"location":"developers/contracts/StakingTokenWrapper/#params_6","text":"Param Type Notes spender address addedValue uint256","title":"Params"},{"location":"developers/contracts/StakingTokenWrapper/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#init","text":"function init(uint256) nonpayable initialize the pool with this token as the sole staker","title":"init"},{"location":"developers/contracts/StakingTokenWrapper/#params_7","text":"Param Type Notes _pid uint256 the pool id of the staking pool associated with this token","title":"Params"},{"location":"developers/contracts/StakingTokenWrapper/#name","text":"function name() view returns(string) Returns the name of the token.","title":"name"},{"location":"developers/contracts/StakingTokenWrapper/#returns_7","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#pid","text":"function pid() view returns(uint256) the pool id of the corresponding pool in the TribalChief","title":"pid"},{"location":"developers/contracts/StakingTokenWrapper/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#symbol","text":"function symbol() view returns(string) Returns the symbol of the token, usually a shorter version of the name.","title":"symbol"},{"location":"developers/contracts/StakingTokenWrapper/#returns_9","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#totalsupply","text":"function totalSupply() view returns(uint256) See {IERC20-totalSupply}.","title":"totalSupply"},{"location":"developers/contracts/StakingTokenWrapper/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#transfer_1","text":"function transfer(address,uint256) nonpayable returns(bool) See {IERC20-transfer}. Requirements: - recipient cannot be the zero address. - the caller must have a balance of at least amount .","title":"transfer"},{"location":"developers/contracts/StakingTokenWrapper/#params_8","text":"Param Type Notes recipient address amount uint256","title":"Params"},{"location":"developers/contracts/StakingTokenWrapper/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#transferfrom","text":"function transferFrom(address,address,uint256) nonpayable returns(bool) See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - sender and recipient cannot be the zero address. - sender must have a balance of at least amount . - the caller must have allowance for sender 's tokens of at least amount .","title":"transferFrom"},{"location":"developers/contracts/StakingTokenWrapper/#params_9","text":"Param Type Notes sender address recipient address amount uint256","title":"Params"},{"location":"developers/contracts/StakingTokenWrapper/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/StakingTokenWrapper/#tribalchief","text":"function tribalChief() view returns(address) the TribalChief staking rewards contract","title":"tribalChief"},{"location":"developers/contracts/StakingTokenWrapper/#returns_13","text":"Param Type Notes address \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/","text":"\u2b05\ufe0f Contracts StaticPCVDepositWrapper a contract to report static PCV data to cover PCV not held with a reliable oracle or on-chain reading Events BalanceUpdate event BalanceUpdate(uint256,uint256) Params Param Type Notes oldBalance uint256 newBalance uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address FeiBalanceUpdate event FeiBalanceUpdate(uint256,uint256) Params Param Type Notes oldFeiBalance uint256 newFeiBalance uint256 Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 balance function balance() view returns(uint256) the PCV balance Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() pure returns(address) display the related token of the balance reported Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 feiReportBalance function feiReportBalance() view returns(uint256) the reported FEI balance Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) returns the resistant balance and FEI in the deposit Returns Param Type Notes uint256 uint256 setBalance function setBalance(uint256) nonpayable set the PCV balance Params Param Type Notes newBalance uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setFeiReportBalance function setFeiReportBalance(uint256) nonpayable set the protocol owned FEI amount Params Param Type Notes newFeiBalance uint256 shiftBalance function shiftBalance(int256) nonpayable increase or decrease PCV balance Params Param Type Notes shift int256 shiftFeiReportBalance function shiftFeiReportBalance(int256) nonpayable increase or decrease Protocol Owned Fei balance Params Param Type Notes shift int256 tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"StaticPCVDepositWrapper"},{"location":"developers/contracts/StaticPCVDepositWrapper/#staticpcvdepositwrapper","text":"a contract to report static PCV data to cover PCV not held with a reliable oracle or on-chain reading","title":"StaticPCVDepositWrapper"},{"location":"developers/contracts/StaticPCVDepositWrapper/#events","text":"","title":"Events"},{"location":"developers/contracts/StaticPCVDepositWrapper/#balanceupdate","text":"event BalanceUpdate(uint256,uint256)","title":"BalanceUpdate"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params","text":"Param Type Notes oldBalance uint256 newBalance uint256","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_1","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_2","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#feibalanceupdate","text":"event FeiBalanceUpdate(uint256,uint256)","title":"FeiBalanceUpdate"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_3","text":"Param Type Notes oldFeiBalance uint256 newFeiBalance uint256","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_4","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_5","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#methods","text":"","title":"Methods"},{"location":"developers/contracts/StaticPCVDepositWrapper/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#balance","text":"function balance() view returns(uint256) the PCV balance","title":"balance"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#balancereportedin","text":"function balanceReportedIn() pure returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#feireportbalance","text":"function feiReportBalance() view returns(uint256) the reported FEI balance","title":"feiReportBalance"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_6","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/StaticPCVDepositWrapper/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) returns the resistant balance and FEI in the deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns_9","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#setbalance","text":"function setBalance(uint256) nonpayable set the PCV balance","title":"setBalance"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_7","text":"Param Type Notes newBalance uint256","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_8","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_9","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#setfeireportbalance","text":"function setFeiReportBalance(uint256) nonpayable set the protocol owned FEI amount","title":"setFeiReportBalance"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_10","text":"Param Type Notes newFeiBalance uint256","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#shiftbalance","text":"function shiftBalance(int256) nonpayable increase or decrease PCV balance","title":"shiftBalance"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_11","text":"Param Type Notes shift int256","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#shiftfeireportbalance","text":"function shiftFeiReportBalance(int256) nonpayable increase or decrease Protocol Owned Fei balance","title":"shiftFeiReportBalance"},{"location":"developers/contracts/StaticPCVDepositWrapper/#params_12","text":"Param Type Notes shift int256","title":"Params"},{"location":"developers/contracts/StaticPCVDepositWrapper/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns_10","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/StaticPCVDepositWrapper/#returns_11","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/StaticPCVDepositWrapper/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/TRIBERagequit/","text":"\u2b05\ufe0f Contracts TRIBERagequit Contract to exchange TRIBE with FEI post-merger Author: elee, Joey Santoro Exchange TRIBE for FEI at Intrinsic Value (semi-manually set) Intrinsic Value = equity / circulating TRIBE. equity = PCV - user FEI circulating TRIBE = total supply - treasury - liquidity mining Events Accept event Accept(address) Params Param Type Notes dao indexed address Enabled event Enabled(address) Params Param Type Notes caller indexed address Exchange event Exchange(address,uint256,uint256) Params Param Type Notes from indexed address amountIn uint256 amountOut uint256 Methods bothPartiesAccepted function bothPartiesAccepted() view returns(bool) tells whether or not both parties have accepted the deal Returns Param Type Notes bool claimed function claimed(address) view returns(uint256) Params Param Type Notes address Returns Param Type Notes uint256 coreAddress function coreAddress() view returns(address) tribe treasury, removed from circulating supply Returns Param Type Notes address exchangeRate function exchangeRate(uint256) view returns(uint256) recalculate the exchange amount using the protocolEquity Params Param Type Notes protocolEquity uint256 the protocol equity Returns Param Type Notes uint256 fei function fei() view returns(address) you already know Returns Param Type Notes address getCirculatingTribe function getCirculatingTribe() view returns(uint256) Returns Param Type Notes uint256 guardian function guardian() view returns(address) guardian multisig, sets the IV before DAO vote Returns Param Type Notes address intrinsicValueExchangeRateBase function intrinsicValueExchangeRateBase() view returns(uint256) Intrinsic value exchange rate (IV), scaled by 1e9 Returns Param Type Notes uint256 merkleRoot function merkleRoot() view returns(bytes32) Returns Param Type Notes bytes32 ngmi function ngmi(uint256,uint256,bytes32[]) nonpayable ragequit held TRIBE with FEI not gonna make it Params Param Type Notes amount uint256 the amount to redeem in TRIBE totalMerkleAmount uint256 the amount of TRIBE allocated to the caller in the merkle drop merkleProof bytes32[] a proof proving that the caller may redeem up to totalMerkleAmount amount of tribe rageQuitEnd function rageQuitEnd() view returns(uint256) last timestamp for ragequit Returns Param Type Notes uint256 rageQuitStart function rageQuitStart() view returns(uint256) first timestamp for ragequit Returns Param Type Notes uint256 rewardsDripper function rewardsDripper() view returns(address) tribe liquidity mining dripper, removed from circulating supply Returns Param Type Notes address rgt function rgt() view returns(address) Returns Param Type Notes address rgtAccept function rgtAccept() nonpayable function for the rari timelock to accept the deal rgtAccepted function rgtAccepted() view returns(bool) Returns Param Type Notes bool rgtTimelock function rgtTimelock() view returns(address) Returns Param Type Notes address scalar function scalar() view returns(uint256) the granularity of the exchange rate Returns Param Type Notes uint256 setBothPartiesAccepted function setBothPartiesAccepted() nonpayable make sure Tribe rari timelock is active setExchangeRate function setExchangeRate(uint256) nonpayable returns(uint256) Update the exchange rate based on protocol equity only callable once by guardian Params Param Type Notes protocolEquity uint256 the protocol equity Returns Param Type Notes uint256 tribe function tribe() view returns(address) Returns Param Type Notes address tribeAccept function tribeAccept() nonpayable function for the tribe timelock to accept the deal tribeAccepted function tribeAccepted() view returns(bool) Returns Param Type Notes bool tribeRariDAO function tribeRariDAO() view returns(address) the new DAO to assume governance for rgtTimelock Returns Param Type Notes address tribeTimelock function tribeTimelock() view returns(address) Returns Param Type Notes address \u2b05\ufe0f Contracts","title":"TRIBERagequit"},{"location":"developers/contracts/TRIBERagequit/#triberagequit","text":"Contract to exchange TRIBE with FEI post-merger Author: elee, Joey Santoro Exchange TRIBE for FEI at Intrinsic Value (semi-manually set) Intrinsic Value = equity / circulating TRIBE. equity = PCV - user FEI circulating TRIBE = total supply - treasury - liquidity mining","title":"TRIBERagequit"},{"location":"developers/contracts/TRIBERagequit/#events","text":"","title":"Events"},{"location":"developers/contracts/TRIBERagequit/#accept","text":"event Accept(address)","title":"Accept"},{"location":"developers/contracts/TRIBERagequit/#params","text":"Param Type Notes dao indexed address","title":"Params"},{"location":"developers/contracts/TRIBERagequit/#enabled","text":"event Enabled(address)","title":"Enabled"},{"location":"developers/contracts/TRIBERagequit/#params_1","text":"Param Type Notes caller indexed address","title":"Params"},{"location":"developers/contracts/TRIBERagequit/#exchange","text":"event Exchange(address,uint256,uint256)","title":"Exchange"},{"location":"developers/contracts/TRIBERagequit/#params_2","text":"Param Type Notes from indexed address amountIn uint256 amountOut uint256","title":"Params"},{"location":"developers/contracts/TRIBERagequit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/TRIBERagequit/#bothpartiesaccepted","text":"function bothPartiesAccepted() view returns(bool) tells whether or not both parties have accepted the deal","title":"bothPartiesAccepted"},{"location":"developers/contracts/TRIBERagequit/#returns","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#claimed","text":"function claimed(address) view returns(uint256)","title":"claimed"},{"location":"developers/contracts/TRIBERagequit/#params_3","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/TRIBERagequit/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#coreaddress","text":"function coreAddress() view returns(address) tribe treasury, removed from circulating supply","title":"coreAddress"},{"location":"developers/contracts/TRIBERagequit/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#exchangerate","text":"function exchangeRate(uint256) view returns(uint256) recalculate the exchange amount using the protocolEquity","title":"exchangeRate"},{"location":"developers/contracts/TRIBERagequit/#params_4","text":"Param Type Notes protocolEquity uint256 the protocol equity","title":"Params"},{"location":"developers/contracts/TRIBERagequit/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#fei","text":"function fei() view returns(address) you already know","title":"fei"},{"location":"developers/contracts/TRIBERagequit/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#getcirculatingtribe","text":"function getCirculatingTribe() view returns(uint256)","title":"getCirculatingTribe"},{"location":"developers/contracts/TRIBERagequit/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#guardian","text":"function guardian() view returns(address) guardian multisig, sets the IV before DAO vote","title":"guardian"},{"location":"developers/contracts/TRIBERagequit/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#intrinsicvalueexchangeratebase","text":"function intrinsicValueExchangeRateBase() view returns(uint256) Intrinsic value exchange rate (IV), scaled by 1e9","title":"intrinsicValueExchangeRateBase"},{"location":"developers/contracts/TRIBERagequit/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#merkleroot","text":"function merkleRoot() view returns(bytes32)","title":"merkleRoot"},{"location":"developers/contracts/TRIBERagequit/#returns_8","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#ngmi","text":"function ngmi(uint256,uint256,bytes32[]) nonpayable ragequit held TRIBE with FEI not gonna make it","title":"ngmi"},{"location":"developers/contracts/TRIBERagequit/#params_5","text":"Param Type Notes amount uint256 the amount to redeem in TRIBE totalMerkleAmount uint256 the amount of TRIBE allocated to the caller in the merkle drop merkleProof bytes32[] a proof proving that the caller may redeem up to totalMerkleAmount amount of tribe","title":"Params"},{"location":"developers/contracts/TRIBERagequit/#ragequitend","text":"function rageQuitEnd() view returns(uint256) last timestamp for ragequit","title":"rageQuitEnd"},{"location":"developers/contracts/TRIBERagequit/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#ragequitstart","text":"function rageQuitStart() view returns(uint256) first timestamp for ragequit","title":"rageQuitStart"},{"location":"developers/contracts/TRIBERagequit/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#rewardsdripper","text":"function rewardsDripper() view returns(address) tribe liquidity mining dripper, removed from circulating supply","title":"rewardsDripper"},{"location":"developers/contracts/TRIBERagequit/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#rgt","text":"function rgt() view returns(address)","title":"rgt"},{"location":"developers/contracts/TRIBERagequit/#returns_12","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#rgtaccept","text":"function rgtAccept() nonpayable function for the rari timelock to accept the deal","title":"rgtAccept"},{"location":"developers/contracts/TRIBERagequit/#rgtaccepted","text":"function rgtAccepted() view returns(bool)","title":"rgtAccepted"},{"location":"developers/contracts/TRIBERagequit/#returns_13","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#rgttimelock","text":"function rgtTimelock() view returns(address)","title":"rgtTimelock"},{"location":"developers/contracts/TRIBERagequit/#returns_14","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#scalar","text":"function scalar() view returns(uint256) the granularity of the exchange rate","title":"scalar"},{"location":"developers/contracts/TRIBERagequit/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#setbothpartiesaccepted","text":"function setBothPartiesAccepted() nonpayable make sure Tribe rari timelock is active","title":"setBothPartiesAccepted"},{"location":"developers/contracts/TRIBERagequit/#setexchangerate","text":"function setExchangeRate(uint256) nonpayable returns(uint256) Update the exchange rate based on protocol equity only callable once by guardian","title":"setExchangeRate"},{"location":"developers/contracts/TRIBERagequit/#params_6","text":"Param Type Notes protocolEquity uint256 the protocol equity","title":"Params"},{"location":"developers/contracts/TRIBERagequit/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#tribe","text":"function tribe() view returns(address)","title":"tribe"},{"location":"developers/contracts/TRIBERagequit/#returns_17","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#tribeaccept","text":"function tribeAccept() nonpayable function for the tribe timelock to accept the deal","title":"tribeAccept"},{"location":"developers/contracts/TRIBERagequit/#tribeaccepted","text":"function tribeAccepted() view returns(bool)","title":"tribeAccepted"},{"location":"developers/contracts/TRIBERagequit/#returns_18","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#triberaridao","text":"function tribeRariDAO() view returns(address) the new DAO to assume governance for rgtTimelock","title":"tribeRariDAO"},{"location":"developers/contracts/TRIBERagequit/#returns_19","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TRIBERagequit/#tribetimelock","text":"function tribeTimelock() view returns(address)","title":"tribeTimelock"},{"location":"developers/contracts/TRIBERagequit/#returns_20","text":"Param Type Notes address \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/Timelock/","text":"\u2b05\ufe0f Contracts Timelock Events CancelTransaction event CancelTransaction(bytes32,address,uint256,string,bytes,uint256) Params Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256 ExecuteTransaction event ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256) Params Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256 NewAdmin event NewAdmin(address) Params Param Type Notes newAdmin indexed address NewDelay event NewDelay(uint256) Params Param Type Notes newDelay indexed uint256 NewPendingAdmin event NewPendingAdmin(address) Params Param Type Notes newPendingAdmin indexed address QueueTransaction event QueueTransaction(bytes32,address,uint256,string,bytes,uint256) Params Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256 Methods GRACE_PERIOD function GRACE_PERIOD() view returns(uint256) Returns Param Type Notes uint256 MAXIMUM_DELAY function MAXIMUM_DELAY() view returns(uint256) Returns Param Type Notes uint256 MINIMUM_DELAY function MINIMUM_DELAY() view returns(uint256) Returns Param Type Notes uint256 acceptAdmin function acceptAdmin() nonpayable admin function admin() view returns(address) Returns Param Type Notes address cancelTransaction function cancelTransaction(address,uint256,string,bytes,uint256) nonpayable Params Param Type Notes target address value uint256 signature string data bytes eta uint256 delay function delay() view returns(uint256) Returns Param Type Notes uint256 executeTransaction function executeTransaction(address,uint256,string,bytes,uint256) payable returns(bytes) Params Param Type Notes target address value uint256 signature string data bytes eta uint256 Returns Param Type Notes bytes getTxHash function getTxHash(address,uint256,string,bytes,uint256) pure returns(bytes32) Params Param Type Notes target address value uint256 signature string data bytes eta uint256 Returns Param Type Notes bytes32 pendingAdmin function pendingAdmin() view returns(address) Returns Param Type Notes address queueTransaction function queueTransaction(address,uint256,string,bytes,uint256) nonpayable returns(bytes32) Params Param Type Notes target address value uint256 signature string data bytes eta uint256 Returns Param Type Notes bytes32 queuedTransactions function queuedTransactions(bytes32) view returns(bool) Params Param Type Notes bytes32 Returns Param Type Notes bool setDelay function setDelay(uint256) nonpayable Params Param Type Notes delay_ uint256 setPendingAdmin function setPendingAdmin(address) nonpayable Params Param Type Notes pendingAdmin_ address \u2b05\ufe0f Contracts","title":"Timelock"},{"location":"developers/contracts/Timelock/#timelock","text":"","title":"Timelock"},{"location":"developers/contracts/Timelock/#events","text":"","title":"Events"},{"location":"developers/contracts/Timelock/#canceltransaction","text":"event CancelTransaction(bytes32,address,uint256,string,bytes,uint256)","title":"CancelTransaction"},{"location":"developers/contracts/Timelock/#params","text":"Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/Timelock/#executetransaction","text":"event ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256)","title":"ExecuteTransaction"},{"location":"developers/contracts/Timelock/#params_1","text":"Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/Timelock/#newadmin","text":"event NewAdmin(address)","title":"NewAdmin"},{"location":"developers/contracts/Timelock/#params_2","text":"Param Type Notes newAdmin indexed address","title":"Params"},{"location":"developers/contracts/Timelock/#newdelay","text":"event NewDelay(uint256)","title":"NewDelay"},{"location":"developers/contracts/Timelock/#params_3","text":"Param Type Notes newDelay indexed uint256","title":"Params"},{"location":"developers/contracts/Timelock/#newpendingadmin","text":"event NewPendingAdmin(address)","title":"NewPendingAdmin"},{"location":"developers/contracts/Timelock/#params_4","text":"Param Type Notes newPendingAdmin indexed address","title":"Params"},{"location":"developers/contracts/Timelock/#queuetransaction","text":"event QueueTransaction(bytes32,address,uint256,string,bytes,uint256)","title":"QueueTransaction"},{"location":"developers/contracts/Timelock/#params_5","text":"Param Type Notes txHash indexed bytes32 target indexed address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/Timelock/#methods","text":"","title":"Methods"},{"location":"developers/contracts/Timelock/#grace_period","text":"function GRACE_PERIOD() view returns(uint256)","title":"GRACE_PERIOD"},{"location":"developers/contracts/Timelock/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Timelock/#maximum_delay","text":"function MAXIMUM_DELAY() view returns(uint256)","title":"MAXIMUM_DELAY"},{"location":"developers/contracts/Timelock/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Timelock/#minimum_delay","text":"function MINIMUM_DELAY() view returns(uint256)","title":"MINIMUM_DELAY"},{"location":"developers/contracts/Timelock/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Timelock/#acceptadmin","text":"function acceptAdmin() nonpayable","title":"acceptAdmin"},{"location":"developers/contracts/Timelock/#admin","text":"function admin() view returns(address)","title":"admin"},{"location":"developers/contracts/Timelock/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Timelock/#canceltransaction_1","text":"function cancelTransaction(address,uint256,string,bytes,uint256) nonpayable","title":"cancelTransaction"},{"location":"developers/contracts/Timelock/#params_6","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/Timelock/#delay","text":"function delay() view returns(uint256)","title":"delay"},{"location":"developers/contracts/Timelock/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Timelock/#executetransaction_1","text":"function executeTransaction(address,uint256,string,bytes,uint256) payable returns(bytes)","title":"executeTransaction"},{"location":"developers/contracts/Timelock/#params_7","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/Timelock/#returns_5","text":"Param Type Notes bytes","title":"Returns"},{"location":"developers/contracts/Timelock/#gettxhash","text":"function getTxHash(address,uint256,string,bytes,uint256) pure returns(bytes32)","title":"getTxHash"},{"location":"developers/contracts/Timelock/#params_8","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/Timelock/#returns_6","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Timelock/#pendingadmin","text":"function pendingAdmin() view returns(address)","title":"pendingAdmin"},{"location":"developers/contracts/Timelock/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Timelock/#queuetransaction_1","text":"function queueTransaction(address,uint256,string,bytes,uint256) nonpayable returns(bytes32)","title":"queueTransaction"},{"location":"developers/contracts/Timelock/#params_9","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/Timelock/#returns_8","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Timelock/#queuedtransactions","text":"function queuedTransactions(bytes32) view returns(bool)","title":"queuedTransactions"},{"location":"developers/contracts/Timelock/#params_10","text":"Param Type Notes bytes32","title":"Params"},{"location":"developers/contracts/Timelock/#returns_9","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Timelock/#setdelay","text":"function setDelay(uint256) nonpayable","title":"setDelay"},{"location":"developers/contracts/Timelock/#params_11","text":"Param Type Notes delay_ uint256","title":"Params"},{"location":"developers/contracts/Timelock/#setpendingadmin","text":"function setPendingAdmin(address) nonpayable","title":"setPendingAdmin"},{"location":"developers/contracts/Timelock/#params_12","text":"Param Type Notes pendingAdmin_ address \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/TimelockController/","text":"\u2b05\ufe0f Contracts TimelockController DEV NOTE: Contract module which acts as a timelocked controller. When set as the owner of an Ownable smart contract, it enforces a timelock on all onlyOwner maintenance operations. This gives time for users of the controlled contract to exit before a potentially dangerous maintenance operation is applied. By default, this contract is self administered, meaning administration tasks have to go through the timelock process. The proposer (resp executor) role is in charge of proposing (resp executing) operations. A common use case is to position this {TimelockController} as the owner of a smart contract, with a multisig or a DAO as the sole proposer. Available since v3.3. Events CallExecuted event CallExecuted(bytes32,uint256,address,uint256,bytes) Params Param Type Notes id indexed bytes32 index indexed uint256 target address value uint256 data bytes CallScheduled event CallScheduled(bytes32,uint256,address,uint256,bytes,bytes32,uint256) Params Param Type Notes id indexed bytes32 index indexed uint256 target address value uint256 data bytes predecessor bytes32 delay uint256 Cancelled event Cancelled(bytes32) Params Param Type Notes id indexed bytes32 MinDelayChange event MinDelayChange(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 RoleAdminChanged event RoleAdminChanged(bytes32,bytes32,bytes32) Params Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32 RoleGranted event RoleGranted(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address RoleRevoked event RoleRevoked(bytes32,address,address) Params Param Type Notes role indexed bytes32 account indexed address sender indexed address Methods DEFAULT_ADMIN_ROLE function DEFAULT_ADMIN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 EXECUTOR_ROLE function EXECUTOR_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 PROPOSER_ROLE function PROPOSER_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 TIMELOCK_ADMIN_ROLE function TIMELOCK_ADMIN_ROLE() view returns(bytes32) Returns Param Type Notes bytes32 cancel function cancel(bytes32) nonpayable Cancel an operation. Requirements: - the caller must have the 'proposer' role. Params Param Type Notes id bytes32 execute function execute(address,uint256,bytes,bytes32,bytes32) payable Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role. Params Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32 executeBatch function executeBatch(address[],uint256[],bytes[],bytes32,bytes32) payable Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role. Params Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32 getMinDelay function getMinDelay() view returns(uint256) Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls updateDelay . Returns Param Type Notes duration uint256 getRoleAdmin function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}. Params Param Type Notes role bytes32 Returns Param Type Notes bytes32 getTimestamp function getTimestamp(bytes32) view returns(uint256) Returns the timestamp at with an operation becomes ready (0 for unset operations, 1 for done operations). Params Param Type Notes id bytes32 Returns Param Type Notes timestamp uint256 grantRole function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address hasRole function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role . Params Param Type Notes role bytes32 account address Returns Param Type Notes bool hashOperation function hashOperation(address,uint256,bytes,bytes32,bytes32) pure returns(bytes32) Returns the identifier of an operation containing a single transaction. Params Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32 Returns Param Type Notes hash bytes32 hashOperationBatch function hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32) pure returns(bytes32) Returns the identifier of an operation containing a batch of transactions. Params Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32 Returns Param Type Notes hash bytes32 isOperation function isOperation(bytes32) view returns(bool) Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations. Params Param Type Notes id bytes32 Returns Param Type Notes pending bool isOperationDone function isOperationDone(bytes32) view returns(bool) Returns whether an operation is done or not. Params Param Type Notes id bytes32 Returns Param Type Notes done bool isOperationPending function isOperationPending(bytes32) view returns(bool) Returns whether an operation is pending or not. Params Param Type Notes id bytes32 Returns Param Type Notes pending bool isOperationReady function isOperationReady(bytes32) view returns(bool) Returns whether an operation is ready or not. Params Param Type Notes id bytes32 Returns Param Type Notes ready bool renounceRole function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked role , emits a {RoleRevoked} event. Requirements: - the caller must be account . Params Param Type Notes role bytes32 account address revokeRole function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role. Params Param Type Notes role bytes32 account address schedule function schedule(address,uint256,bytes,bytes32,bytes32,uint256) nonpayable Schedule an operation containing a single transaction. Emits a {CallScheduled} event. Requirements: - the caller must have the 'proposer' role. Params Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32 delay uint256 scheduleBatch function scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256) nonpayable Schedule an operation containing a batch of transactions. Emits one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role. Params Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32 delay uint256 supportsInterface function supportsInterface(bytes4) view returns(bool) See {IERC165-supportsInterface}. Params Param Type Notes interfaceId bytes4 Returns Param Type Notes bool updateDelay function updateDelay(uint256) nonpayable Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function. Params Param Type Notes newDelay uint256 \u2b05\ufe0f Contracts","title":"TimelockController"},{"location":"developers/contracts/TimelockController/#timelockcontroller","text":"DEV NOTE: Contract module which acts as a timelocked controller. When set as the owner of an Ownable smart contract, it enforces a timelock on all onlyOwner maintenance operations. This gives time for users of the controlled contract to exit before a potentially dangerous maintenance operation is applied. By default, this contract is self administered, meaning administration tasks have to go through the timelock process. The proposer (resp executor) role is in charge of proposing (resp executing) operations. A common use case is to position this {TimelockController} as the owner of a smart contract, with a multisig or a DAO as the sole proposer. Available since v3.3.","title":"TimelockController"},{"location":"developers/contracts/TimelockController/#events","text":"","title":"Events"},{"location":"developers/contracts/TimelockController/#callexecuted","text":"event CallExecuted(bytes32,uint256,address,uint256,bytes)","title":"CallExecuted"},{"location":"developers/contracts/TimelockController/#params","text":"Param Type Notes id indexed bytes32 index indexed uint256 target address value uint256 data bytes","title":"Params"},{"location":"developers/contracts/TimelockController/#callscheduled","text":"event CallScheduled(bytes32,uint256,address,uint256,bytes,bytes32,uint256)","title":"CallScheduled"},{"location":"developers/contracts/TimelockController/#params_1","text":"Param Type Notes id indexed bytes32 index indexed uint256 target address value uint256 data bytes predecessor bytes32 delay uint256","title":"Params"},{"location":"developers/contracts/TimelockController/#cancelled","text":"event Cancelled(bytes32)","title":"Cancelled"},{"location":"developers/contracts/TimelockController/#params_2","text":"Param Type Notes id indexed bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#mindelaychange","text":"event MinDelayChange(uint256,uint256)","title":"MinDelayChange"},{"location":"developers/contracts/TimelockController/#params_3","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/TimelockController/#roleadminchanged","text":"event RoleAdminChanged(bytes32,bytes32,bytes32)","title":"RoleAdminChanged"},{"location":"developers/contracts/TimelockController/#params_4","text":"Param Type Notes role indexed bytes32 previousAdminRole indexed bytes32 newAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#rolegranted","text":"event RoleGranted(bytes32,address,address)","title":"RoleGranted"},{"location":"developers/contracts/TimelockController/#params_5","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/TimelockController/#rolerevoked","text":"event RoleRevoked(bytes32,address,address)","title":"RoleRevoked"},{"location":"developers/contracts/TimelockController/#params_6","text":"Param Type Notes role indexed bytes32 account indexed address sender indexed address","title":"Params"},{"location":"developers/contracts/TimelockController/#methods","text":"","title":"Methods"},{"location":"developers/contracts/TimelockController/#default_admin_role","text":"function DEFAULT_ADMIN_ROLE() view returns(bytes32)","title":"DEFAULT_ADMIN_ROLE"},{"location":"developers/contracts/TimelockController/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/TimelockController/#executor_role","text":"function EXECUTOR_ROLE() view returns(bytes32)","title":"EXECUTOR_ROLE"},{"location":"developers/contracts/TimelockController/#returns_1","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/TimelockController/#proposer_role","text":"function PROPOSER_ROLE() view returns(bytes32)","title":"PROPOSER_ROLE"},{"location":"developers/contracts/TimelockController/#returns_2","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/TimelockController/#timelock_admin_role","text":"function TIMELOCK_ADMIN_ROLE() view returns(bytes32)","title":"TIMELOCK_ADMIN_ROLE"},{"location":"developers/contracts/TimelockController/#returns_3","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/TimelockController/#cancel","text":"function cancel(bytes32) nonpayable Cancel an operation. Requirements: - the caller must have the 'proposer' role.","title":"cancel"},{"location":"developers/contracts/TimelockController/#params_7","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#execute","text":"function execute(address,uint256,bytes,bytes32,bytes32) payable Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role.","title":"execute"},{"location":"developers/contracts/TimelockController/#params_8","text":"Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#executebatch","text":"function executeBatch(address[],uint256[],bytes[],bytes32,bytes32) payable Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role.","title":"executeBatch"},{"location":"developers/contracts/TimelockController/#params_9","text":"Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#getmindelay","text":"function getMinDelay() view returns(uint256) Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls updateDelay .","title":"getMinDelay"},{"location":"developers/contracts/TimelockController/#returns_4","text":"Param Type Notes duration uint256","title":"Returns"},{"location":"developers/contracts/TimelockController/#getroleadmin","text":"function getRoleAdmin(bytes32) view returns(bytes32) Returns the admin role that controls role . See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","title":"getRoleAdmin"},{"location":"developers/contracts/TimelockController/#params_10","text":"Param Type Notes role bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#returns_5","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/TimelockController/#gettimestamp","text":"function getTimestamp(bytes32) view returns(uint256) Returns the timestamp at with an operation becomes ready (0 for unset operations, 1 for done operations).","title":"getTimestamp"},{"location":"developers/contracts/TimelockController/#params_11","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#returns_6","text":"Param Type Notes timestamp uint256","title":"Returns"},{"location":"developers/contracts/TimelockController/#grantrole","text":"function grantRole(bytes32,address) nonpayable Grants role to account . If account had not been already granted role , emits a {RoleGranted} event. Requirements: - the caller must have role 's admin role.","title":"grantRole"},{"location":"developers/contracts/TimelockController/#params_12","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/TimelockController/#hasrole","text":"function hasRole(bytes32,address) view returns(bool) Returns true if account has been granted role .","title":"hasRole"},{"location":"developers/contracts/TimelockController/#params_13","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/TimelockController/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TimelockController/#hashoperation","text":"function hashOperation(address,uint256,bytes,bytes32,bytes32) pure returns(bytes32) Returns the identifier of an operation containing a single transaction.","title":"hashOperation"},{"location":"developers/contracts/TimelockController/#params_14","text":"Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#returns_8","text":"Param Type Notes hash bytes32","title":"Returns"},{"location":"developers/contracts/TimelockController/#hashoperationbatch","text":"function hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32) pure returns(bytes32) Returns the identifier of an operation containing a batch of transactions.","title":"hashOperationBatch"},{"location":"developers/contracts/TimelockController/#params_15","text":"Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#returns_9","text":"Param Type Notes hash bytes32","title":"Returns"},{"location":"developers/contracts/TimelockController/#isoperation","text":"function isOperation(bytes32) view returns(bool) Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations.","title":"isOperation"},{"location":"developers/contracts/TimelockController/#params_16","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#returns_10","text":"Param Type Notes pending bool","title":"Returns"},{"location":"developers/contracts/TimelockController/#isoperationdone","text":"function isOperationDone(bytes32) view returns(bool) Returns whether an operation is done or not.","title":"isOperationDone"},{"location":"developers/contracts/TimelockController/#params_17","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#returns_11","text":"Param Type Notes done bool","title":"Returns"},{"location":"developers/contracts/TimelockController/#isoperationpending","text":"function isOperationPending(bytes32) view returns(bool) Returns whether an operation is pending or not.","title":"isOperationPending"},{"location":"developers/contracts/TimelockController/#params_18","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#returns_12","text":"Param Type Notes pending bool","title":"Returns"},{"location":"developers/contracts/TimelockController/#isoperationready","text":"function isOperationReady(bytes32) view returns(bool) Returns whether an operation is ready or not.","title":"isOperationReady"},{"location":"developers/contracts/TimelockController/#params_19","text":"Param Type Notes id bytes32","title":"Params"},{"location":"developers/contracts/TimelockController/#returns_13","text":"Param Type Notes ready bool","title":"Returns"},{"location":"developers/contracts/TimelockController/#renouncerole","text":"function renounceRole(bytes32,address) nonpayable Revokes role from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked role , emits a {RoleRevoked} event. Requirements: - the caller must be account .","title":"renounceRole"},{"location":"developers/contracts/TimelockController/#params_20","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/TimelockController/#revokerole","text":"function revokeRole(bytes32,address) nonpayable Revokes role from account . If account had been granted role , emits a {RoleRevoked} event. Requirements: - the caller must have role 's admin role.","title":"revokeRole"},{"location":"developers/contracts/TimelockController/#params_21","text":"Param Type Notes role bytes32 account address","title":"Params"},{"location":"developers/contracts/TimelockController/#schedule","text":"function schedule(address,uint256,bytes,bytes32,bytes32,uint256) nonpayable Schedule an operation containing a single transaction. Emits a {CallScheduled} event. Requirements: - the caller must have the 'proposer' role.","title":"schedule"},{"location":"developers/contracts/TimelockController/#params_22","text":"Param Type Notes target address value uint256 data bytes predecessor bytes32 salt bytes32 delay uint256","title":"Params"},{"location":"developers/contracts/TimelockController/#schedulebatch","text":"function scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256) nonpayable Schedule an operation containing a batch of transactions. Emits one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role.","title":"scheduleBatch"},{"location":"developers/contracts/TimelockController/#params_23","text":"Param Type Notes targets address[] values uint256[] datas bytes[] predecessor bytes32 salt bytes32 delay uint256","title":"Params"},{"location":"developers/contracts/TimelockController/#supportsinterface","text":"function supportsInterface(bytes4) view returns(bool) See {IERC165-supportsInterface}.","title":"supportsInterface"},{"location":"developers/contracts/TimelockController/#params_24","text":"Param Type Notes interfaceId bytes4","title":"Params"},{"location":"developers/contracts/TimelockController/#returns_14","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TimelockController/#updatedelay","text":"function updateDelay(uint256) nonpayable Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function.","title":"updateDelay"},{"location":"developers/contracts/TimelockController/#params_25","text":"Param Type Notes newDelay uint256 \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/TimelockInterface/","text":"TimelockInterface Methods GRACE_PERIOD function GRACE_PERIOD() view returns(uint256) Returns Param Type Notes uint256 acceptAdmin function acceptAdmin() nonpayable cancelTransaction function cancelTransaction(address,uint256,string,bytes,uint256) nonpayable Params Param Type Notes target address value uint256 signature string data bytes eta uint256 delay function delay() view returns(uint256) Returns Param Type Notes uint256 executeTransaction function executeTransaction(address,uint256,string,bytes,uint256) payable returns(bytes) Params Param Type Notes target address value uint256 signature string data bytes eta uint256 Returns Param Type Notes bytes queueTransaction function queueTransaction(address,uint256,string,bytes,uint256) nonpayable returns(bytes32) Params Param Type Notes target address value uint256 signature string data bytes eta uint256 Returns Param Type Notes bytes32 queuedTransactions function queuedTransactions(bytes32) view returns(bool) Params Param Type Notes hash bytes32 Returns Param Type Notes bool","title":"TimelockInterface"},{"location":"developers/contracts/TimelockInterface/#timelockinterface","text":"","title":"TimelockInterface"},{"location":"developers/contracts/TimelockInterface/#methods","text":"","title":"Methods"},{"location":"developers/contracts/TimelockInterface/#grace_period","text":"function GRACE_PERIOD() view returns(uint256)","title":"GRACE_PERIOD"},{"location":"developers/contracts/TimelockInterface/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockInterface/#acceptadmin","text":"function acceptAdmin() nonpayable","title":"acceptAdmin"},{"location":"developers/contracts/TimelockInterface/#canceltransaction","text":"function cancelTransaction(address,uint256,string,bytes,uint256) nonpayable","title":"cancelTransaction"},{"location":"developers/contracts/TimelockInterface/#params","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/TimelockInterface/#delay","text":"function delay() view returns(uint256)","title":"delay"},{"location":"developers/contracts/TimelockInterface/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockInterface/#executetransaction","text":"function executeTransaction(address,uint256,string,bytes,uint256) payable returns(bytes)","title":"executeTransaction"},{"location":"developers/contracts/TimelockInterface/#params_1","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/TimelockInterface/#returns_2","text":"Param Type Notes bytes","title":"Returns"},{"location":"developers/contracts/TimelockInterface/#queuetransaction","text":"function queueTransaction(address,uint256,string,bytes,uint256) nonpayable returns(bytes32)","title":"queueTransaction"},{"location":"developers/contracts/TimelockInterface/#params_2","text":"Param Type Notes target address value uint256 signature string data bytes eta uint256","title":"Params"},{"location":"developers/contracts/TimelockInterface/#returns_3","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/TimelockInterface/#queuedtransactions","text":"function queuedTransactions(bytes32) view returns(bool)","title":"queuedTransactions"},{"location":"developers/contracts/TimelockInterface/#params_3","text":"Param Type Notes hash bytes32","title":"Params"},{"location":"developers/contracts/TimelockInterface/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/","text":"\u2b05\ufe0f Contracts TimelockedDelegator a timelock for TRIBE allowing for sub-delegation Author: Fei Protocol allows the timelocked TRIBE to be delegated by the beneficiary while locked Events BeneficiaryUpdate event BeneficiaryUpdate(address) Params Param Type Notes _beneficiary indexed address Delegate event Delegate(address,uint256) Params Param Type Notes _delegatee indexed address _amount uint256 DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 PendingBeneficiaryUpdate event PendingBeneficiaryUpdate(address) Params Param Type Notes _pendingBeneficiary indexed address Release event Release(address,address,uint256) Params Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256 TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Undelegate event Undelegate(address,uint256) Params Param Type Notes _delegatee indexed address _amount uint256 Methods acceptBeneficiary function acceptBeneficiary() nonpayable accept beneficiary role over timelocked TRIBE. Delegates all held (non-subdelegated) tribe to beneficiary alreadyReleasedAmount function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary Returns Param Type Notes uint256 availableForRelease function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release Returns Param Type Notes uint256 beneficiary function beneficiary() view returns(address) beneficiary of tokens after they are released Returns Param Type Notes address clawback function clawback() nonpayable clawbackAdmin function clawbackAdmin() view returns(address) Returns Param Type Notes address cliffSeconds function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed Returns Param Type Notes uint256 delegate function delegate(address,uint256) nonpayable delegate locked TRIBE to a delegatee Params Param Type Notes delegatee address the target address to delegate to amount uint256 the amount of TRIBE to delegate. Will increment existing delegated TRIBE delegateAmount function delegateAmount(address) view returns(uint256) associated delegated amount of TRIBE for a delegatee Params Param Type Notes address Returns Param Type Notes uint256 delegateContract function delegateContract(address) view returns(address) associated delegate proxy contract for a delegatee Params Param Type Notes address Returns Param Type Notes address duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 initialBalance function initialBalance() view returns(uint256) initial balance of lockedToken Returns Param Type Notes uint256 isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool lockedToken function lockedToken() view returns(address) ERC20 basic token contract being held in timelock Returns Param Type Notes address passedCliff function passedCliff() view returns(bool) Returns Param Type Notes bool pendingBeneficiary function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary Returns Param Type Notes address release function release(address,uint256) nonpayable releases amount unlocked tokens to address to Params Param Type Notes to address amount uint256 releaseMax function releaseMax(address) nonpayable releases maximum unlocked tokens to address to Params Param Type Notes to address remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setPendingBeneficiary function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted Params Param Type Notes _pendingBeneficiary address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 totalDelegated function totalDelegated() view returns(uint256) the total delegated amount of TRIBE Returns Param Type Notes uint256 totalToken function totalToken() view returns(uint256) calculate total TRIBE held plus delegated used by LinearTokenTimelock to determine the released amount Returns Param Type Notes uint256 tribe function tribe() view returns(address) the TRIBE token contract Returns Param Type Notes address undelegate function undelegate(address) nonpayable returns(uint256) return delegated TRIBE to the timelock Params Param Type Notes delegatee address the target address to undelegate from Returns Param Type Notes uint256 \u2b05\ufe0f Contracts","title":"TimelockedDelegator"},{"location":"developers/contracts/TimelockedDelegator/#timelockeddelegator","text":"a timelock for TRIBE allowing for sub-delegation Author: Fei Protocol allows the timelocked TRIBE to be delegated by the beneficiary while locked","title":"TimelockedDelegator"},{"location":"developers/contracts/TimelockedDelegator/#events","text":"","title":"Events"},{"location":"developers/contracts/TimelockedDelegator/#beneficiaryupdate","text":"event BeneficiaryUpdate(address)","title":"BeneficiaryUpdate"},{"location":"developers/contracts/TimelockedDelegator/#params","text":"Param Type Notes _beneficiary indexed address","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#delegate","text":"event Delegate(address,uint256)","title":"Delegate"},{"location":"developers/contracts/TimelockedDelegator/#params_1","text":"Param Type Notes _delegatee indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/TimelockedDelegator/#params_2","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#pendingbeneficiaryupdate","text":"event PendingBeneficiaryUpdate(address)","title":"PendingBeneficiaryUpdate"},{"location":"developers/contracts/TimelockedDelegator/#params_3","text":"Param Type Notes _pendingBeneficiary indexed address","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#release","text":"event Release(address,address,uint256)","title":"Release"},{"location":"developers/contracts/TimelockedDelegator/#params_4","text":"Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/TimelockedDelegator/#params_5","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#undelegate","text":"event Undelegate(address,uint256)","title":"Undelegate"},{"location":"developers/contracts/TimelockedDelegator/#params_6","text":"Param Type Notes _delegatee indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#methods","text":"","title":"Methods"},{"location":"developers/contracts/TimelockedDelegator/#acceptbeneficiary","text":"function acceptBeneficiary() nonpayable accept beneficiary role over timelocked TRIBE. Delegates all held (non-subdelegated) tribe to beneficiary","title":"acceptBeneficiary"},{"location":"developers/contracts/TimelockedDelegator/#alreadyreleasedamount","text":"function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary","title":"alreadyReleasedAmount"},{"location":"developers/contracts/TimelockedDelegator/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#availableforrelease","text":"function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release","title":"availableForRelease"},{"location":"developers/contracts/TimelockedDelegator/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#beneficiary","text":"function beneficiary() view returns(address) beneficiary of tokens after they are released","title":"beneficiary"},{"location":"developers/contracts/TimelockedDelegator/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#clawback","text":"function clawback() nonpayable","title":"clawback"},{"location":"developers/contracts/TimelockedDelegator/#clawbackadmin","text":"function clawbackAdmin() view returns(address)","title":"clawbackAdmin"},{"location":"developers/contracts/TimelockedDelegator/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#cliffseconds","text":"function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed","title":"cliffSeconds"},{"location":"developers/contracts/TimelockedDelegator/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#delegate_1","text":"function delegate(address,uint256) nonpayable delegate locked TRIBE to a delegatee","title":"delegate"},{"location":"developers/contracts/TimelockedDelegator/#params_7","text":"Param Type Notes delegatee address the target address to delegate to amount uint256 the amount of TRIBE to delegate. Will increment existing delegated TRIBE","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#delegateamount","text":"function delegateAmount(address) view returns(uint256) associated delegated amount of TRIBE for a delegatee","title":"delegateAmount"},{"location":"developers/contracts/TimelockedDelegator/#params_8","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#delegatecontract","text":"function delegateContract(address) view returns(address) associated delegate proxy contract for a delegatee","title":"delegateContract"},{"location":"developers/contracts/TimelockedDelegator/#params_9","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/TimelockedDelegator/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#initialbalance","text":"function initialBalance() view returns(uint256) initial balance of lockedToken","title":"initialBalance"},{"location":"developers/contracts/TimelockedDelegator/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/TimelockedDelegator/#returns_9","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/TimelockedDelegator/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#lockedtoken","text":"function lockedToken() view returns(address) ERC20 basic token contract being held in timelock","title":"lockedToken"},{"location":"developers/contracts/TimelockedDelegator/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#passedcliff","text":"function passedCliff() view returns(bool)","title":"passedCliff"},{"location":"developers/contracts/TimelockedDelegator/#returns_12","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#pendingbeneficiary","text":"function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary","title":"pendingBeneficiary"},{"location":"developers/contracts/TimelockedDelegator/#returns_13","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#release_1","text":"function release(address,uint256) nonpayable releases amount unlocked tokens to address to","title":"release"},{"location":"developers/contracts/TimelockedDelegator/#params_10","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#releasemax","text":"function releaseMax(address) nonpayable releases maximum unlocked tokens to address to","title":"releaseMax"},{"location":"developers/contracts/TimelockedDelegator/#params_11","text":"Param Type Notes to address","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/TimelockedDelegator/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#setpendingbeneficiary","text":"function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted","title":"setPendingBeneficiary"},{"location":"developers/contracts/TimelockedDelegator/#params_12","text":"Param Type Notes _pendingBeneficiary address","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/TimelockedDelegator/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/TimelockedDelegator/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#totaldelegated","text":"function totalDelegated() view returns(uint256) the total delegated amount of TRIBE","title":"totalDelegated"},{"location":"developers/contracts/TimelockedDelegator/#returns_17","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#totaltoken","text":"function totalToken() view returns(uint256) calculate total TRIBE held plus delegated used by LinearTokenTimelock to determine the released amount","title":"totalToken"},{"location":"developers/contracts/TimelockedDelegator/#returns_18","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#tribe","text":"function tribe() view returns(address) the TRIBE token contract","title":"tribe"},{"location":"developers/contracts/TimelockedDelegator/#returns_19","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TimelockedDelegator/#undelegate_1","text":"function undelegate(address) nonpayable returns(uint256) return delegated TRIBE to the timelock","title":"undelegate"},{"location":"developers/contracts/TimelockedDelegator/#params_13","text":"Param Type Notes delegatee address the target address to undelegate from","title":"Params"},{"location":"developers/contracts/TimelockedDelegator/#returns_20","text":"Param Type Notes uint256 \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/TokenTimelock/","text":"TokenTimelock Events BeneficiaryUpdate event BeneficiaryUpdate(address) Params Param Type Notes _beneficiary indexed address DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 PendingBeneficiaryUpdate event PendingBeneficiaryUpdate(address) Params Param Type Notes _pendingBeneficiary indexed address Release event Release(address,address,uint256) Params Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256 TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Methods acceptBeneficiary function acceptBeneficiary() nonpayable pending beneficiary accepts new beneficiary alreadyReleasedAmount function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary Returns Param Type Notes uint256 availableForRelease function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release Returns Param Type Notes uint256 beneficiary function beneficiary() view returns(address) beneficiary of tokens after they are released Returns Param Type Notes address clawback function clawback() nonpayable clawbackAdmin function clawbackAdmin() view returns(address) Returns Param Type Notes address cliffSeconds function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed Returns Param Type Notes uint256 duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 initialBalance function initialBalance() view returns(uint256) initial balance of lockedToken Returns Param Type Notes uint256 isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool lockedToken function lockedToken() view returns(address) ERC20 basic token contract being held in timelock Returns Param Type Notes address passedCliff function passedCliff() view returns(bool) Returns Param Type Notes bool pendingBeneficiary function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary Returns Param Type Notes address release function release(address,uint256) nonpayable releases amount unlocked tokens to address to Params Param Type Notes to address amount uint256 releaseMax function releaseMax(address) nonpayable releases maximum unlocked tokens to address to Params Param Type Notes to address remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 setPendingBeneficiary function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted Params Param Type Notes _pendingBeneficiary address startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 totalToken function totalToken() view returns(uint256) the total amount of tokens held by timelock Returns Param Type Notes uint256","title":"TokenTimelock"},{"location":"developers/contracts/TokenTimelock/#tokentimelock","text":"","title":"TokenTimelock"},{"location":"developers/contracts/TokenTimelock/#events","text":"","title":"Events"},{"location":"developers/contracts/TokenTimelock/#beneficiaryupdate","text":"event BeneficiaryUpdate(address)","title":"BeneficiaryUpdate"},{"location":"developers/contracts/TokenTimelock/#params","text":"Param Type Notes _beneficiary indexed address","title":"Params"},{"location":"developers/contracts/TokenTimelock/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/TokenTimelock/#params_1","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/TokenTimelock/#pendingbeneficiaryupdate","text":"event PendingBeneficiaryUpdate(address)","title":"PendingBeneficiaryUpdate"},{"location":"developers/contracts/TokenTimelock/#params_2","text":"Param Type Notes _pendingBeneficiary indexed address","title":"Params"},{"location":"developers/contracts/TokenTimelock/#release","text":"event Release(address,address,uint256)","title":"Release"},{"location":"developers/contracts/TokenTimelock/#params_3","text":"Param Type Notes _beneficiary indexed address _recipient indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/TokenTimelock/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/TokenTimelock/#params_4","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/TokenTimelock/#methods","text":"","title":"Methods"},{"location":"developers/contracts/TokenTimelock/#acceptbeneficiary","text":"function acceptBeneficiary() nonpayable pending beneficiary accepts new beneficiary","title":"acceptBeneficiary"},{"location":"developers/contracts/TokenTimelock/#alreadyreleasedamount","text":"function alreadyReleasedAmount() view returns(uint256) amount of tokens released to beneficiary","title":"alreadyReleasedAmount"},{"location":"developers/contracts/TokenTimelock/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#availableforrelease","text":"function availableForRelease() view returns(uint256) amount of held tokens unlocked and available for release","title":"availableForRelease"},{"location":"developers/contracts/TokenTimelock/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#beneficiary","text":"function beneficiary() view returns(address) beneficiary of tokens after they are released","title":"beneficiary"},{"location":"developers/contracts/TokenTimelock/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#clawback","text":"function clawback() nonpayable","title":"clawback"},{"location":"developers/contracts/TokenTimelock/#clawbackadmin","text":"function clawbackAdmin() view returns(address)","title":"clawbackAdmin"},{"location":"developers/contracts/TokenTimelock/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#cliffseconds","text":"function cliffSeconds() view returns(uint256) number of seconds before releasing is allowed","title":"cliffSeconds"},{"location":"developers/contracts/TokenTimelock/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/TokenTimelock/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#initialbalance","text":"function initialBalance() view returns(uint256) initial balance of lockedToken","title":"initialBalance"},{"location":"developers/contracts/TokenTimelock/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/TokenTimelock/#returns_7","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/TokenTimelock/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#lockedtoken","text":"function lockedToken() view returns(address) ERC20 basic token contract being held in timelock","title":"lockedToken"},{"location":"developers/contracts/TokenTimelock/#returns_9","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#passedcliff","text":"function passedCliff() view returns(bool)","title":"passedCliff"},{"location":"developers/contracts/TokenTimelock/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#pendingbeneficiary","text":"function pendingBeneficiary() view returns(address) pending beneficiary appointed by current beneficiary","title":"pendingBeneficiary"},{"location":"developers/contracts/TokenTimelock/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#release_1","text":"function release(address,uint256) nonpayable releases amount unlocked tokens to address to","title":"release"},{"location":"developers/contracts/TokenTimelock/#params_5","text":"Param Type Notes to address amount uint256","title":"Params"},{"location":"developers/contracts/TokenTimelock/#releasemax","text":"function releaseMax(address) nonpayable releases maximum unlocked tokens to address to","title":"releaseMax"},{"location":"developers/contracts/TokenTimelock/#params_6","text":"Param Type Notes to address","title":"Params"},{"location":"developers/contracts/TokenTimelock/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/TokenTimelock/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#setpendingbeneficiary","text":"function setPendingBeneficiary(address) nonpayable current beneficiary can appoint new beneficiary, which must be accepted","title":"setPendingBeneficiary"},{"location":"developers/contracts/TokenTimelock/#params_7","text":"Param Type Notes _pendingBeneficiary address","title":"Params"},{"location":"developers/contracts/TokenTimelock/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/TokenTimelock/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/TokenTimelock/#returns_14","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TokenTimelock/#totaltoken","text":"function totalToken() view returns(uint256) the total amount of tokens held by timelock","title":"totalToken"},{"location":"developers/contracts/TokenTimelock/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribalChief/","text":"\u2b05\ufe0f Contracts TribalChief The idea for this TribalChief contract is to be the owner of tribe token that is deposited into this contract.This contract was forked from sushiswap and has been modified to distribute staking rewards in tribe. All legacy code that relied on MasterChef V1 has been removed so that this contract will pay out staking rewards in tribe. The assumption this code makes is that this MasterChief contract will be funded before going live and offering staking rewards. This contract will not have the ability to mint tribe. Events ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address Deposit event Deposit(address,uint256,uint256,uint256) Params Param Type Notes user indexed address pid indexed uint256 amount uint256 depositID indexed uint256 EmergencyWithdraw event EmergencyWithdraw(address,uint256,uint256,address) Params Param Type Notes user indexed address pid indexed uint256 amount uint256 to indexed address Harvest event Harvest(address,uint256,uint256) Params Param Type Notes user indexed address pid indexed uint256 amount uint256 LogPoolAddition event LogPoolAddition(uint256,uint256,address,address) Params Param Type Notes pid indexed uint256 allocPoint uint256 stakedToken indexed address rewarder indexed address LogPoolMultiplier event LogPoolMultiplier(uint256,uint128,uint256) Params Param Type Notes pid indexed uint256 lockLength indexed uint128 multiplier indexed uint256 LogSetPool event LogSetPool(uint256,uint256,address,bool) Params Param Type Notes pid indexed uint256 allocPoint uint256 rewarder indexed address overwrite bool LogUpdatePool event LogUpdatePool(uint256,uint128,uint256,uint256) Params Param Type Notes pid indexed uint256 lastRewardBlock indexed uint128 lpSupply uint256 accTribePerShare uint256 NewTribePerBlock event NewTribePerBlock(uint256) Params Param Type Notes amount indexed uint256 Paused event Paused(address) Params Param Type Notes account address PoolLocked event PoolLocked(bool,uint256) Params Param Type Notes locked indexed bool pid indexed uint256 TribeWithdraw event TribeWithdraw(uint256) Params Param Type Notes amount uint256 Unpaused event Unpaused(address) Params Param Type Notes account address Withdraw event Withdraw(address,uint256,uint256,address) Params Param Type Notes user indexed address pid indexed uint256 amount uint256 to indexed address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 SCALE_FACTOR function SCALE_FACTOR() view returns(uint256) decimals for rewards multiplier Returns Param Type Notes uint256 TRIBE function TRIBE() view returns(address) Address of Tribe contract. Cannot be immutable due to limitations of proxies Returns Param Type Notes address add function add(uint120,address,address,(uint128,uint128)[]) nonpayable Add a new pool. Can only be called by the governor. Params Param Type Notes allocPoint uint120 AP of the new pool. _stakedToken address Address of the ERC-20 token to stake. _rewarder address Address of the rewarder delegate. rewardData tuple[] Reward Multiplier data core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address deposit function deposit(uint256,uint256,uint64) nonpayable Deposit tokens to earn TRIBE allocation. Params Param Type Notes pid uint256 The index of the pool. See poolInfo . amount uint256 The token amount to deposit. lockLength uint64 The length of time you would like to lock tokens depositInfo function depositInfo(uint256,address,uint256) view returns(uint256,uint128,uint128) Info of each user that stakes tokens. Params Param Type Notes uint256 address uint256 Returns Param Type Notes amount uint256 unlockBlock uint128 multiplier uint128 emergencyWithdraw function emergencyWithdraw(uint256,address) nonpayable Withdraw without caring about rewards. EMERGENCY ONLY. Params Param Type Notes pid uint256 The index of the pool. See poolInfo . to address Receiver of the deposited tokens. fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getTotalStakedInPool function getTotalStakedInPool(uint256,address) view returns(uint256) Returns the amount a user deposited in a single pool. Params Param Type Notes pid uint256 user address Returns Param Type Notes uint256 governorAddPoolMultiplier function governorAddPoolMultiplier(uint256,uint64,uint64) nonpayable Allows governor to change the pool multiplier Unlocks the pool if the new multiplier is greater than the old one Params Param Type Notes _pid uint256 pool ID lockLength uint64 lock length to change newRewardsMultiplier uint64 updated rewards multiplier governorWithdrawTribe function governorWithdrawTribe(uint256) nonpayable sends tokens back to governance treasury. Only callable by governance Params Param Type Notes amount uint256 the amount of tokens to send back to treasury harvest function harvest(uint256,address) nonpayable Harvest proceeds for transaction sender to to . Params Param Type Notes pid uint256 The index of the pool. See poolInfo . to address Receiver of TRIBE rewards. initialize function initialize(address,address) nonpayable Params Param Type Notes _core address The Core contract address. _tribe address The TRIBE token contract address. isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool lockPool function lockPool(uint256) nonpayable Allows governor to lock the pool so the users cannot withdraw until their lockup period is over Params Param Type Notes _pid uint256 pool ID massUpdatePools function massUpdatePools(uint256[]) nonpayable Update reward variables for all pools. Be careful of gas spending! Params Param Type Notes pids uint256[] Pool IDs of all to be updated. Make sure to update all active pools. numPools function numPools() view returns(uint256) Returns the number of pools. Returns Param Type Notes uint256 openUserDeposits function openUserDeposits(uint256,address) view returns(uint256) Returns the number of user deposits in a single pool. Params Param Type Notes pid uint256 user address Returns Param Type Notes uint256 pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool pendingRewards function pendingRewards(uint256,address) view returns(uint256) View function to see all pending TRIBE on frontend. Params Param Type Notes _pid uint256 The index of the pool. See poolInfo . _user address Address of user. Returns Param Type Notes uint256 poolInfo function poolInfo(uint256) view returns(uint256,uint256,uint128,uint120,bool) Info of each pool. Params Param Type Notes uint256 Returns Param Type Notes virtualTotalSupply uint256 accTribePerShare uint256 lastRewardBlock uint128 allocPoint uint120 unlocked bool resetRewards function resetRewards(uint256) nonpayable Reset the given pool's TRIBE allocation to 0 and unlock the pool. Can only be called by the governor or guardian. Params Param Type Notes _pid uint256 The index of the pool. See poolInfo . rewardMultipliers function rewardMultipliers(uint256,uint128) view returns(uint128) Info of each pool rewards multipliers available. map a pool id to a block lock time to a rewards multiplier Params Param Type Notes uint256 uint128 Returns Param Type Notes uint128 rewarder function rewarder(uint256) view returns(address) Address of each IRewarder contract. Params Param Type Notes uint256 Returns Param Type Notes address set function set(uint256,uint120,address,bool) nonpayable Update the given pool's TRIBE allocation point and IRewarder contract. Can only be called by the governor. Params Param Type Notes _pid uint256 The index of the pool. See poolInfo . _allocPoint uint120 New AP of the pool. _rewarder address Address of the rewarder delegate. overwrite bool True if _rewarder should be set . Otherwise _rewarder is ignored. setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address stakedToken function stakedToken(uint256) view returns(address) Address of the token you can stake in each pool. Params Param Type Notes uint256 Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 tribePerBlock function tribePerBlock() view returns(uint256) Calculates and returns the amount of TRIBE per block. Returns Param Type Notes uint256 unlockPool function unlockPool(uint256) nonpayable Allows governor to unlock the pool so that users can withdraw before their tokens have been locked for the entire lockup period Params Param Type Notes _pid uint256 pool ID unpause function unpause() nonpayable set pausable methods to unpaused updateBlockReward function updateBlockReward(uint256) nonpayable Allows governor to change the amount of tribe per block make sure to call the update pool function before hitting this function this will ensure that all of the rewards a user earned previously get paid out Params Param Type Notes newBlockReward uint256 The new amount of tribe per block to distribute updatePool function updatePool(uint256) nonpayable Update reward variables of the given pool. Params Param Type Notes pid uint256 The index of the pool. See poolInfo . userInfo function userInfo(uint256,address) view returns(int256,uint256) Info of each users reward debt and virtual amount. One object is instantiated per user per pool Params Param Type Notes uint256 address Returns Param Type Notes rewardDebt int256 virtualAmount uint256 withdrawAllAndHarvest function withdrawAllAndHarvest(uint256,address) nonpayable Withdraw staked tokens from pool. Params Param Type Notes pid uint256 The index of the pool. See poolInfo . to address Receiver of the tokens. withdrawFromDeposit function withdrawFromDeposit(uint256,uint256,address,uint256) nonpayable Withdraw tokens from pool. Params Param Type Notes pid uint256 The index of the pool. See poolInfo . amount uint256 Token amount to withdraw. to address Receiver of the tokens. index uint256 \u2b05\ufe0f Contracts","title":"TribalChief"},{"location":"developers/contracts/TribalChief/#tribalchief","text":"The idea for this TribalChief contract is to be the owner of tribe token that is deposited into this contract.This contract was forked from sushiswap and has been modified to distribute staking rewards in tribe. All legacy code that relied on MasterChef V1 has been removed so that this contract will pay out staking rewards in tribe. The assumption this code makes is that this MasterChief contract will be funded before going live and offering staking rewards. This contract will not have the ability to mint tribe.","title":"TribalChief"},{"location":"developers/contracts/TribalChief/#events","text":"","title":"Events"},{"location":"developers/contracts/TribalChief/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/TribalChief/#params","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/TribalChief/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/TribalChief/#params_1","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/TribalChief/#deposit","text":"event Deposit(address,uint256,uint256,uint256)","title":"Deposit"},{"location":"developers/contracts/TribalChief/#params_2","text":"Param Type Notes user indexed address pid indexed uint256 amount uint256 depositID indexed uint256","title":"Params"},{"location":"developers/contracts/TribalChief/#emergencywithdraw","text":"event EmergencyWithdraw(address,uint256,uint256,address)","title":"EmergencyWithdraw"},{"location":"developers/contracts/TribalChief/#params_3","text":"Param Type Notes user indexed address pid indexed uint256 amount uint256 to indexed address","title":"Params"},{"location":"developers/contracts/TribalChief/#harvest","text":"event Harvest(address,uint256,uint256)","title":"Harvest"},{"location":"developers/contracts/TribalChief/#params_4","text":"Param Type Notes user indexed address pid indexed uint256 amount uint256","title":"Params"},{"location":"developers/contracts/TribalChief/#logpooladdition","text":"event LogPoolAddition(uint256,uint256,address,address)","title":"LogPoolAddition"},{"location":"developers/contracts/TribalChief/#params_5","text":"Param Type Notes pid indexed uint256 allocPoint uint256 stakedToken indexed address rewarder indexed address","title":"Params"},{"location":"developers/contracts/TribalChief/#logpoolmultiplier","text":"event LogPoolMultiplier(uint256,uint128,uint256)","title":"LogPoolMultiplier"},{"location":"developers/contracts/TribalChief/#params_6","text":"Param Type Notes pid indexed uint256 lockLength indexed uint128 multiplier indexed uint256","title":"Params"},{"location":"developers/contracts/TribalChief/#logsetpool","text":"event LogSetPool(uint256,uint256,address,bool)","title":"LogSetPool"},{"location":"developers/contracts/TribalChief/#params_7","text":"Param Type Notes pid indexed uint256 allocPoint uint256 rewarder indexed address overwrite bool","title":"Params"},{"location":"developers/contracts/TribalChief/#logupdatepool","text":"event LogUpdatePool(uint256,uint128,uint256,uint256)","title":"LogUpdatePool"},{"location":"developers/contracts/TribalChief/#params_8","text":"Param Type Notes pid indexed uint256 lastRewardBlock indexed uint128 lpSupply uint256 accTribePerShare uint256","title":"Params"},{"location":"developers/contracts/TribalChief/#newtribeperblock","text":"event NewTribePerBlock(uint256)","title":"NewTribePerBlock"},{"location":"developers/contracts/TribalChief/#params_9","text":"Param Type Notes amount indexed uint256","title":"Params"},{"location":"developers/contracts/TribalChief/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/TribalChief/#params_10","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/TribalChief/#poollocked","text":"event PoolLocked(bool,uint256)","title":"PoolLocked"},{"location":"developers/contracts/TribalChief/#params_11","text":"Param Type Notes locked indexed bool pid indexed uint256","title":"Params"},{"location":"developers/contracts/TribalChief/#tribewithdraw","text":"event TribeWithdraw(uint256)","title":"TribeWithdraw"},{"location":"developers/contracts/TribalChief/#params_12","text":"Param Type Notes amount uint256","title":"Params"},{"location":"developers/contracts/TribalChief/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/TribalChief/#params_13","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/TribalChief/#withdraw","text":"event Withdraw(address,uint256,uint256,address)","title":"Withdraw"},{"location":"developers/contracts/TribalChief/#params_14","text":"Param Type Notes user indexed address pid indexed uint256 amount uint256 to indexed address","title":"Params"},{"location":"developers/contracts/TribalChief/#methods","text":"","title":"Methods"},{"location":"developers/contracts/TribalChief/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/TribalChief/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/TribalChief/#scale_factor","text":"function SCALE_FACTOR() view returns(uint256) decimals for rewards multiplier","title":"SCALE_FACTOR"},{"location":"developers/contracts/TribalChief/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribalChief/#tribe","text":"function TRIBE() view returns(address) Address of Tribe contract. Cannot be immutable due to limitations of proxies","title":"TRIBE"},{"location":"developers/contracts/TribalChief/#returns_2","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribalChief/#add","text":"function add(uint120,address,address,(uint128,uint128)[]) nonpayable Add a new pool. Can only be called by the governor.","title":"add"},{"location":"developers/contracts/TribalChief/#params_15","text":"Param Type Notes allocPoint uint120 AP of the new pool. _stakedToken address Address of the ERC-20 token to stake. _rewarder address Address of the rewarder delegate. rewardData tuple[] Reward Multiplier data","title":"Params"},{"location":"developers/contracts/TribalChief/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/TribalChief/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribalChief/#deposit_1","text":"function deposit(uint256,uint256,uint64) nonpayable Deposit tokens to earn TRIBE allocation.","title":"deposit"},{"location":"developers/contracts/TribalChief/#params_16","text":"Param Type Notes pid uint256 The index of the pool. See poolInfo . amount uint256 The token amount to deposit. lockLength uint64 The length of time you would like to lock tokens","title":"Params"},{"location":"developers/contracts/TribalChief/#depositinfo","text":"function depositInfo(uint256,address,uint256) view returns(uint256,uint128,uint128) Info of each user that stakes tokens.","title":"depositInfo"},{"location":"developers/contracts/TribalChief/#params_17","text":"Param Type Notes uint256 address uint256","title":"Params"},{"location":"developers/contracts/TribalChief/#returns_4","text":"Param Type Notes amount uint256 unlockBlock uint128 multiplier uint128","title":"Returns"},{"location":"developers/contracts/TribalChief/#emergencywithdraw_1","text":"function emergencyWithdraw(uint256,address) nonpayable Withdraw without caring about rewards. EMERGENCY ONLY.","title":"emergencyWithdraw"},{"location":"developers/contracts/TribalChief/#params_18","text":"Param Type Notes pid uint256 The index of the pool. See poolInfo . to address Receiver of the deposited tokens.","title":"Params"},{"location":"developers/contracts/TribalChief/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/TribalChief/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribalChief/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/TribalChief/#returns_6","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribalChief/#gettotalstakedinpool","text":"function getTotalStakedInPool(uint256,address) view returns(uint256) Returns the amount a user deposited in a single pool.","title":"getTotalStakedInPool"},{"location":"developers/contracts/TribalChief/#params_19","text":"Param Type Notes pid uint256 user address","title":"Params"},{"location":"developers/contracts/TribalChief/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribalChief/#governoraddpoolmultiplier","text":"function governorAddPoolMultiplier(uint256,uint64,uint64) nonpayable Allows governor to change the pool multiplier Unlocks the pool if the new multiplier is greater than the old one","title":"governorAddPoolMultiplier"},{"location":"developers/contracts/TribalChief/#params_20","text":"Param Type Notes _pid uint256 pool ID lockLength uint64 lock length to change newRewardsMultiplier uint64 updated rewards multiplier","title":"Params"},{"location":"developers/contracts/TribalChief/#governorwithdrawtribe","text":"function governorWithdrawTribe(uint256) nonpayable sends tokens back to governance treasury. Only callable by governance","title":"governorWithdrawTribe"},{"location":"developers/contracts/TribalChief/#params_21","text":"Param Type Notes amount uint256 the amount of tokens to send back to treasury","title":"Params"},{"location":"developers/contracts/TribalChief/#harvest_1","text":"function harvest(uint256,address) nonpayable Harvest proceeds for transaction sender to to .","title":"harvest"},{"location":"developers/contracts/TribalChief/#params_22","text":"Param Type Notes pid uint256 The index of the pool. See poolInfo . to address Receiver of TRIBE rewards.","title":"Params"},{"location":"developers/contracts/TribalChief/#initialize","text":"function initialize(address,address) nonpayable","title":"initialize"},{"location":"developers/contracts/TribalChief/#params_23","text":"Param Type Notes _core address The Core contract address. _tribe address The TRIBE token contract address.","title":"Params"},{"location":"developers/contracts/TribalChief/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/TribalChief/#params_24","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/TribalChief/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribalChief/#lockpool","text":"function lockPool(uint256) nonpayable Allows governor to lock the pool so the users cannot withdraw until their lockup period is over","title":"lockPool"},{"location":"developers/contracts/TribalChief/#params_25","text":"Param Type Notes _pid uint256 pool ID","title":"Params"},{"location":"developers/contracts/TribalChief/#massupdatepools","text":"function massUpdatePools(uint256[]) nonpayable Update reward variables for all pools. Be careful of gas spending!","title":"massUpdatePools"},{"location":"developers/contracts/TribalChief/#params_26","text":"Param Type Notes pids uint256[] Pool IDs of all to be updated. Make sure to update all active pools.","title":"Params"},{"location":"developers/contracts/TribalChief/#numpools","text":"function numPools() view returns(uint256) Returns the number of pools.","title":"numPools"},{"location":"developers/contracts/TribalChief/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribalChief/#openuserdeposits","text":"function openUserDeposits(uint256,address) view returns(uint256) Returns the number of user deposits in a single pool.","title":"openUserDeposits"},{"location":"developers/contracts/TribalChief/#params_27","text":"Param Type Notes pid uint256 user address","title":"Params"},{"location":"developers/contracts/TribalChief/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribalChief/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/TribalChief/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/TribalChief/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribalChief/#pendingrewards","text":"function pendingRewards(uint256,address) view returns(uint256) View function to see all pending TRIBE on frontend.","title":"pendingRewards"},{"location":"developers/contracts/TribalChief/#params_28","text":"Param Type Notes _pid uint256 The index of the pool. See poolInfo . _user address Address of user.","title":"Params"},{"location":"developers/contracts/TribalChief/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribalChief/#poolinfo","text":"function poolInfo(uint256) view returns(uint256,uint256,uint128,uint120,bool) Info of each pool.","title":"poolInfo"},{"location":"developers/contracts/TribalChief/#params_29","text":"Param Type Notes uint256","title":"Params"},{"location":"developers/contracts/TribalChief/#returns_13","text":"Param Type Notes virtualTotalSupply uint256 accTribePerShare uint256 lastRewardBlock uint128 allocPoint uint120 unlocked bool","title":"Returns"},{"location":"developers/contracts/TribalChief/#resetrewards","text":"function resetRewards(uint256) nonpayable Reset the given pool's TRIBE allocation to 0 and unlock the pool. Can only be called by the governor or guardian.","title":"resetRewards"},{"location":"developers/contracts/TribalChief/#params_30","text":"Param Type Notes _pid uint256 The index of the pool. See poolInfo .","title":"Params"},{"location":"developers/contracts/TribalChief/#rewardmultipliers","text":"function rewardMultipliers(uint256,uint128) view returns(uint128) Info of each pool rewards multipliers available. map a pool id to a block lock time to a rewards multiplier","title":"rewardMultipliers"},{"location":"developers/contracts/TribalChief/#params_31","text":"Param Type Notes uint256 uint128","title":"Params"},{"location":"developers/contracts/TribalChief/#returns_14","text":"Param Type Notes uint128","title":"Returns"},{"location":"developers/contracts/TribalChief/#rewarder","text":"function rewarder(uint256) view returns(address) Address of each IRewarder contract.","title":"rewarder"},{"location":"developers/contracts/TribalChief/#params_32","text":"Param Type Notes uint256","title":"Params"},{"location":"developers/contracts/TribalChief/#returns_15","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribalChief/#set","text":"function set(uint256,uint120,address,bool) nonpayable Update the given pool's TRIBE allocation point and IRewarder contract. Can only be called by the governor.","title":"set"},{"location":"developers/contracts/TribalChief/#params_33","text":"Param Type Notes _pid uint256 The index of the pool. See poolInfo . _allocPoint uint120 New AP of the pool. _rewarder address Address of the rewarder delegate. overwrite bool True if _rewarder should be set . Otherwise _rewarder is ignored.","title":"Params"},{"location":"developers/contracts/TribalChief/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/TribalChief/#params_34","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/TribalChief/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/TribalChief/#params_35","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/TribalChief/#stakedtoken","text":"function stakedToken(uint256) view returns(address) Address of the token you can stake in each pool.","title":"stakedToken"},{"location":"developers/contracts/TribalChief/#params_36","text":"Param Type Notes uint256","title":"Params"},{"location":"developers/contracts/TribalChief/#returns_16","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribalChief/#tribe_1","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/TribalChief/#returns_17","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribalChief/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/TribalChief/#returns_18","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribalChief/#tribeperblock","text":"function tribePerBlock() view returns(uint256) Calculates and returns the amount of TRIBE per block.","title":"tribePerBlock"},{"location":"developers/contracts/TribalChief/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribalChief/#unlockpool","text":"function unlockPool(uint256) nonpayable Allows governor to unlock the pool so that users can withdraw before their tokens have been locked for the entire lockup period","title":"unlockPool"},{"location":"developers/contracts/TribalChief/#params_37","text":"Param Type Notes _pid uint256 pool ID","title":"Params"},{"location":"developers/contracts/TribalChief/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/TribalChief/#updateblockreward","text":"function updateBlockReward(uint256) nonpayable Allows governor to change the amount of tribe per block make sure to call the update pool function before hitting this function this will ensure that all of the rewards a user earned previously get paid out","title":"updateBlockReward"},{"location":"developers/contracts/TribalChief/#params_38","text":"Param Type Notes newBlockReward uint256 The new amount of tribe per block to distribute","title":"Params"},{"location":"developers/contracts/TribalChief/#updatepool","text":"function updatePool(uint256) nonpayable Update reward variables of the given pool.","title":"updatePool"},{"location":"developers/contracts/TribalChief/#params_39","text":"Param Type Notes pid uint256 The index of the pool. See poolInfo .","title":"Params"},{"location":"developers/contracts/TribalChief/#userinfo","text":"function userInfo(uint256,address) view returns(int256,uint256) Info of each users reward debt and virtual amount. One object is instantiated per user per pool","title":"userInfo"},{"location":"developers/contracts/TribalChief/#params_40","text":"Param Type Notes uint256 address","title":"Params"},{"location":"developers/contracts/TribalChief/#returns_20","text":"Param Type Notes rewardDebt int256 virtualAmount uint256","title":"Returns"},{"location":"developers/contracts/TribalChief/#withdrawallandharvest","text":"function withdrawAllAndHarvest(uint256,address) nonpayable Withdraw staked tokens from pool.","title":"withdrawAllAndHarvest"},{"location":"developers/contracts/TribalChief/#params_41","text":"Param Type Notes pid uint256 The index of the pool. See poolInfo . to address Receiver of the tokens.","title":"Params"},{"location":"developers/contracts/TribalChief/#withdrawfromdeposit","text":"function withdrawFromDeposit(uint256,uint256,address,uint256) nonpayable Withdraw tokens from pool.","title":"withdrawFromDeposit"},{"location":"developers/contracts/TribalChief/#params_42","text":"Param Type Notes pid uint256 The index of the pool. See poolInfo . amount uint256 Token amount to withdraw. to address Receiver of the tokens. index uint256 \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/TribalChiefSync/","text":"\u2b05\ufe0f Contracts TribalChiefSync TribalChief Synchronize contract This contract is able to keep the tribalChief and autoRewardsDistributor in sync when either: 1. adding pools or 2. updating block rewards It needs the EXECUTOR role on the optimistic timelock, so it can atomically trigger the 3 actions Methods addPool function addPool(uint120,address,address,(uint128,uint128)[],bytes32) nonpayable Sync a pool addition Params Param Type Notes allocPoint uint120 stakedToken address rewarder address rewardData tuple[] salt bytes32 autoRewardsDistributor function autoRewardsDistributor() view returns(address) Returns Param Type Notes address decreaseRewards function decreaseRewards(uint256,bytes32) nonpayable Sync a rewards rate change Params Param Type Notes tribePerBlock uint256 salt bytes32 resetPool function resetPool(uint256,bytes32) nonpayable Sync a pool reset rewards action Params Param Type Notes pid uint256 salt bytes32 setPool function setPool(uint256,uint120,address,bool,bytes32) nonpayable Sync a pool set action Params Param Type Notes pid uint256 allocPoint uint120 rewarder address overwrite bool salt bytes32 timelock function timelock() view returns(address) Returns Param Type Notes address tribalChief function tribalChief() view returns(address) Returns Param Type Notes address \u2b05\ufe0f Contracts","title":"TribalChiefSync"},{"location":"developers/contracts/TribalChiefSync/#tribalchiefsync","text":"TribalChief Synchronize contract This contract is able to keep the tribalChief and autoRewardsDistributor in sync when either: 1. adding pools or 2. updating block rewards It needs the EXECUTOR role on the optimistic timelock, so it can atomically trigger the 3 actions","title":"TribalChiefSync"},{"location":"developers/contracts/TribalChiefSync/#methods","text":"","title":"Methods"},{"location":"developers/contracts/TribalChiefSync/#addpool","text":"function addPool(uint120,address,address,(uint128,uint128)[],bytes32) nonpayable Sync a pool addition","title":"addPool"},{"location":"developers/contracts/TribalChiefSync/#params","text":"Param Type Notes allocPoint uint120 stakedToken address rewarder address rewardData tuple[] salt bytes32","title":"Params"},{"location":"developers/contracts/TribalChiefSync/#autorewardsdistributor","text":"function autoRewardsDistributor() view returns(address)","title":"autoRewardsDistributor"},{"location":"developers/contracts/TribalChiefSync/#returns","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribalChiefSync/#decreaserewards","text":"function decreaseRewards(uint256,bytes32) nonpayable Sync a rewards rate change","title":"decreaseRewards"},{"location":"developers/contracts/TribalChiefSync/#params_1","text":"Param Type Notes tribePerBlock uint256 salt bytes32","title":"Params"},{"location":"developers/contracts/TribalChiefSync/#resetpool","text":"function resetPool(uint256,bytes32) nonpayable Sync a pool reset rewards action","title":"resetPool"},{"location":"developers/contracts/TribalChiefSync/#params_2","text":"Param Type Notes pid uint256 salt bytes32","title":"Params"},{"location":"developers/contracts/TribalChiefSync/#setpool","text":"function setPool(uint256,uint120,address,bool,bytes32) nonpayable Sync a pool set action","title":"setPool"},{"location":"developers/contracts/TribalChiefSync/#params_3","text":"Param Type Notes pid uint256 allocPoint uint120 rewarder address overwrite bool salt bytes32","title":"Params"},{"location":"developers/contracts/TribalChiefSync/#timelock","text":"function timelock() view returns(address)","title":"timelock"},{"location":"developers/contracts/TribalChiefSync/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribalChiefSync/#tribalchief","text":"function tribalChief() view returns(address)","title":"tribalChief"},{"location":"developers/contracts/TribalChiefSync/#returns_2","text":"Param Type Notes address \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/Tribe/","text":"\u2b05\ufe0f Contracts Tribe Events Approval event Approval(address,address,uint256) Params Param Type Notes owner indexed address spender indexed address amount uint256 DelegateChanged event DelegateChanged(address,address,address) Params Param Type Notes delegator indexed address fromDelegate indexed address toDelegate indexed address DelegateVotesChanged event DelegateVotesChanged(address,uint256,uint256) Params Param Type Notes delegate indexed address previousBalance uint256 newBalance uint256 MinterChanged event MinterChanged(address,address) Params Param Type Notes minter address newMinter address Transfer event Transfer(address,address,uint256) Params Param Type Notes from indexed address to indexed address amount uint256 Methods DELEGATION_TYPEHASH function DELEGATION_TYPEHASH() view returns(bytes32) The EIP-712 typehash for the delegation struct used by the contract Returns Param Type Notes bytes32 DOMAIN_TYPEHASH function DOMAIN_TYPEHASH() view returns(bytes32) The EIP-712 typehash for the contract's domain Returns Param Type Notes bytes32 PERMIT_TYPEHASH function PERMIT_TYPEHASH() view returns(bytes32) The EIP-712 typehash for the permit struct used by the contract Returns Param Type Notes bytes32 allowance function allowance(address,address) view returns(uint256) Get the number of tokens spender is approved to spend on behalf of account Params Param Type Notes account address The address of the account holding the funds spender address The address of the account spending the funds Returns Param Type Notes uint256 approve function approve(address,uint256) nonpayable returns(bool) Approve spender to transfer up to amount from src This will overwrite the approval amount for spender and is subject to issues noted here Params Param Type Notes spender address The address of the account which may transfer tokens rawAmount uint256 The number of tokens that are approved (2^256-1 means infinite) Returns Param Type Notes bool balanceOf function balanceOf(address) view returns(uint256) Get the number of tokens held by the account Params Param Type Notes account address The address of the account to get the balance of Returns Param Type Notes uint256 checkpoints function checkpoints(address,uint32) view returns(uint32,uint96) A record of votes checkpoints for each account, by index Params Param Type Notes address uint32 Returns Param Type Notes fromBlock uint32 votes uint96 decimals function decimals() view returns(uint8) EIP-20 token decimals for this token Returns Param Type Notes uint8 delegate function delegate(address) nonpayable Delegate votes from msg.sender to delegatee Params Param Type Notes delegatee address The address to delegate votes to delegateBySig function delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) nonpayable Delegates votes from signatory to delegatee Params Param Type Notes delegatee address The address to delegate votes to nonce uint256 The contract state required to match the signature expiry uint256 The time at which to expire the signature v uint8 The recovery byte of the signature r bytes32 Half of the ECDSA signature pair s bytes32 Half of the ECDSA signature pair delegates function delegates(address) view returns(address) A record of each accounts delegate Params Param Type Notes address Returns Param Type Notes address getCurrentVotes function getCurrentVotes(address) view returns(uint96) Gets the current votes balance for account Params Param Type Notes account address The address to get votes balance Returns Param Type Notes uint96 getPriorVotes function getPriorVotes(address,uint256) view returns(uint96) Determine the prior number of votes for an account as of a block number Block number must be a finalized block or else this function will revert to prevent misinformation. Params Param Type Notes account address The address of the account to check blockNumber uint256 The block number to get the vote balance at Returns Param Type Notes uint96 mint function mint(address,uint256) nonpayable Mint new tokens Params Param Type Notes dst address The address of the destination account rawAmount uint256 The number of tokens to be minted minter function minter() view returns(address) Address which may mint new tokens Returns Param Type Notes address name function name() view returns(string) EIP-20 token name for this token Returns Param Type Notes string nonces function nonces(address) view returns(uint256) A record of states for signing / validating signatures Params Param Type Notes address Returns Param Type Notes uint256 numCheckpoints function numCheckpoints(address) view returns(uint32) The number of checkpoints for each account Params Param Type Notes address Returns Param Type Notes uint32 permit function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) nonpayable Triggers an approval from owner to spends Params Param Type Notes owner address The address to approve from spender address The address to be approved rawAmount uint256 The number of tokens that are approved (2^256-1 means infinite) deadline uint256 The time at which to expire the signature v uint8 The recovery byte of the signature r bytes32 Half of the ECDSA signature pair s bytes32 Half of the ECDSA signature pair setMinter function setMinter(address) nonpayable Change the minter address Params Param Type Notes minter_ address The address of the new minter symbol function symbol() view returns(string) EIP-20 token symbol for this token Returns Param Type Notes string totalSupply function totalSupply() view returns(uint256) Total number of tokens in circulation Returns Param Type Notes uint256 transfer function transfer(address,uint256) nonpayable returns(bool) Transfer amount tokens from msg.sender to dst Params Param Type Notes dst address The address of the destination account rawAmount uint256 The number of tokens to transfer Returns Param Type Notes bool transferFrom function transferFrom(address,address,uint256) nonpayable returns(bool) Transfer amount tokens from src to dst Params Param Type Notes src address The address of the source account dst address The address of the destination account rawAmount uint256 The number of tokens to transfer Returns Param Type Notes bool \u2b05\ufe0f Contracts","title":"Tribe"},{"location":"developers/contracts/Tribe/#tribe","text":"","title":"Tribe"},{"location":"developers/contracts/Tribe/#events","text":"","title":"Events"},{"location":"developers/contracts/Tribe/#approval","text":"event Approval(address,address,uint256)","title":"Approval"},{"location":"developers/contracts/Tribe/#params","text":"Param Type Notes owner indexed address spender indexed address amount uint256","title":"Params"},{"location":"developers/contracts/Tribe/#delegatechanged","text":"event DelegateChanged(address,address,address)","title":"DelegateChanged"},{"location":"developers/contracts/Tribe/#params_1","text":"Param Type Notes delegator indexed address fromDelegate indexed address toDelegate indexed address","title":"Params"},{"location":"developers/contracts/Tribe/#delegatevoteschanged","text":"event DelegateVotesChanged(address,uint256,uint256)","title":"DelegateVotesChanged"},{"location":"developers/contracts/Tribe/#params_2","text":"Param Type Notes delegate indexed address previousBalance uint256 newBalance uint256","title":"Params"},{"location":"developers/contracts/Tribe/#minterchanged","text":"event MinterChanged(address,address)","title":"MinterChanged"},{"location":"developers/contracts/Tribe/#params_3","text":"Param Type Notes minter address newMinter address","title":"Params"},{"location":"developers/contracts/Tribe/#transfer","text":"event Transfer(address,address,uint256)","title":"Transfer"},{"location":"developers/contracts/Tribe/#params_4","text":"Param Type Notes from indexed address to indexed address amount uint256","title":"Params"},{"location":"developers/contracts/Tribe/#methods","text":"","title":"Methods"},{"location":"developers/contracts/Tribe/#delegation_typehash","text":"function DELEGATION_TYPEHASH() view returns(bytes32) The EIP-712 typehash for the delegation struct used by the contract","title":"DELEGATION_TYPEHASH"},{"location":"developers/contracts/Tribe/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Tribe/#domain_typehash","text":"function DOMAIN_TYPEHASH() view returns(bytes32) The EIP-712 typehash for the contract's domain","title":"DOMAIN_TYPEHASH"},{"location":"developers/contracts/Tribe/#returns_1","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Tribe/#permit_typehash","text":"function PERMIT_TYPEHASH() view returns(bytes32) The EIP-712 typehash for the permit struct used by the contract","title":"PERMIT_TYPEHASH"},{"location":"developers/contracts/Tribe/#returns_2","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/Tribe/#allowance","text":"function allowance(address,address) view returns(uint256) Get the number of tokens spender is approved to spend on behalf of account","title":"allowance"},{"location":"developers/contracts/Tribe/#params_5","text":"Param Type Notes account address The address of the account holding the funds spender address The address of the account spending the funds","title":"Params"},{"location":"developers/contracts/Tribe/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Tribe/#approve","text":"function approve(address,uint256) nonpayable returns(bool) Approve spender to transfer up to amount from src This will overwrite the approval amount for spender and is subject to issues noted here","title":"approve"},{"location":"developers/contracts/Tribe/#params_6","text":"Param Type Notes spender address The address of the account which may transfer tokens rawAmount uint256 The number of tokens that are approved (2^256-1 means infinite)","title":"Params"},{"location":"developers/contracts/Tribe/#returns_4","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Tribe/#balanceof","text":"function balanceOf(address) view returns(uint256) Get the number of tokens held by the account","title":"balanceOf"},{"location":"developers/contracts/Tribe/#params_7","text":"Param Type Notes account address The address of the account to get the balance of","title":"Params"},{"location":"developers/contracts/Tribe/#returns_5","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Tribe/#checkpoints","text":"function checkpoints(address,uint32) view returns(uint32,uint96) A record of votes checkpoints for each account, by index","title":"checkpoints"},{"location":"developers/contracts/Tribe/#params_8","text":"Param Type Notes address uint32","title":"Params"},{"location":"developers/contracts/Tribe/#returns_6","text":"Param Type Notes fromBlock uint32 votes uint96","title":"Returns"},{"location":"developers/contracts/Tribe/#decimals","text":"function decimals() view returns(uint8) EIP-20 token decimals for this token","title":"decimals"},{"location":"developers/contracts/Tribe/#returns_7","text":"Param Type Notes uint8","title":"Returns"},{"location":"developers/contracts/Tribe/#delegate","text":"function delegate(address) nonpayable Delegate votes from msg.sender to delegatee","title":"delegate"},{"location":"developers/contracts/Tribe/#params_9","text":"Param Type Notes delegatee address The address to delegate votes to","title":"Params"},{"location":"developers/contracts/Tribe/#delegatebysig","text":"function delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) nonpayable Delegates votes from signatory to delegatee","title":"delegateBySig"},{"location":"developers/contracts/Tribe/#params_10","text":"Param Type Notes delegatee address The address to delegate votes to nonce uint256 The contract state required to match the signature expiry uint256 The time at which to expire the signature v uint8 The recovery byte of the signature r bytes32 Half of the ECDSA signature pair s bytes32 Half of the ECDSA signature pair","title":"Params"},{"location":"developers/contracts/Tribe/#delegates","text":"function delegates(address) view returns(address) A record of each accounts delegate","title":"delegates"},{"location":"developers/contracts/Tribe/#params_11","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/Tribe/#returns_8","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Tribe/#getcurrentvotes","text":"function getCurrentVotes(address) view returns(uint96) Gets the current votes balance for account","title":"getCurrentVotes"},{"location":"developers/contracts/Tribe/#params_12","text":"Param Type Notes account address The address to get votes balance","title":"Params"},{"location":"developers/contracts/Tribe/#returns_9","text":"Param Type Notes uint96","title":"Returns"},{"location":"developers/contracts/Tribe/#getpriorvotes","text":"function getPriorVotes(address,uint256) view returns(uint96) Determine the prior number of votes for an account as of a block number Block number must be a finalized block or else this function will revert to prevent misinformation.","title":"getPriorVotes"},{"location":"developers/contracts/Tribe/#params_13","text":"Param Type Notes account address The address of the account to check blockNumber uint256 The block number to get the vote balance at","title":"Params"},{"location":"developers/contracts/Tribe/#returns_10","text":"Param Type Notes uint96","title":"Returns"},{"location":"developers/contracts/Tribe/#mint","text":"function mint(address,uint256) nonpayable Mint new tokens","title":"mint"},{"location":"developers/contracts/Tribe/#params_14","text":"Param Type Notes dst address The address of the destination account rawAmount uint256 The number of tokens to be minted","title":"Params"},{"location":"developers/contracts/Tribe/#minter","text":"function minter() view returns(address) Address which may mint new tokens","title":"minter"},{"location":"developers/contracts/Tribe/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Tribe/#name","text":"function name() view returns(string) EIP-20 token name for this token","title":"name"},{"location":"developers/contracts/Tribe/#returns_12","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/Tribe/#nonces","text":"function nonces(address) view returns(uint256) A record of states for signing / validating signatures","title":"nonces"},{"location":"developers/contracts/Tribe/#params_15","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/Tribe/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Tribe/#numcheckpoints","text":"function numCheckpoints(address) view returns(uint32) The number of checkpoints for each account","title":"numCheckpoints"},{"location":"developers/contracts/Tribe/#params_16","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/Tribe/#returns_14","text":"Param Type Notes uint32","title":"Returns"},{"location":"developers/contracts/Tribe/#permit","text":"function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) nonpayable Triggers an approval from owner to spends","title":"permit"},{"location":"developers/contracts/Tribe/#params_17","text":"Param Type Notes owner address The address to approve from spender address The address to be approved rawAmount uint256 The number of tokens that are approved (2^256-1 means infinite) deadline uint256 The time at which to expire the signature v uint8 The recovery byte of the signature r bytes32 Half of the ECDSA signature pair s bytes32 Half of the ECDSA signature pair","title":"Params"},{"location":"developers/contracts/Tribe/#setminter","text":"function setMinter(address) nonpayable Change the minter address","title":"setMinter"},{"location":"developers/contracts/Tribe/#params_18","text":"Param Type Notes minter_ address The address of the new minter","title":"Params"},{"location":"developers/contracts/Tribe/#symbol","text":"function symbol() view returns(string) EIP-20 token symbol for this token","title":"symbol"},{"location":"developers/contracts/Tribe/#returns_15","text":"Param Type Notes string","title":"Returns"},{"location":"developers/contracts/Tribe/#totalsupply","text":"function totalSupply() view returns(uint256) Total number of tokens in circulation","title":"totalSupply"},{"location":"developers/contracts/Tribe/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Tribe/#transfer_1","text":"function transfer(address,uint256) nonpayable returns(bool) Transfer amount tokens from msg.sender to dst","title":"transfer"},{"location":"developers/contracts/Tribe/#params_19","text":"Param Type Notes dst address The address of the destination account rawAmount uint256 The number of tokens to transfer","title":"Params"},{"location":"developers/contracts/Tribe/#returns_17","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Tribe/#transferfrom","text":"function transferFrom(address,address,uint256) nonpayable returns(bool) Transfer amount tokens from src to dst","title":"transferFrom"},{"location":"developers/contracts/Tribe/#params_20","text":"Param Type Notes src address The address of the source account dst address The address of the destination account rawAmount uint256 The number of tokens to transfer","title":"Params"},{"location":"developers/contracts/Tribe/#returns_18","text":"Param Type Notes bool \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/TribeInterface/","text":"TribeInterface Methods getPriorVotes function getPriorVotes(address,uint256) view returns(uint96) Params Param Type Notes account address blockNumber uint256 Returns Param Type Notes uint96","title":"TribeInterface"},{"location":"developers/contracts/TribeInterface/#tribeinterface","text":"","title":"TribeInterface"},{"location":"developers/contracts/TribeInterface/#methods","text":"","title":"Methods"},{"location":"developers/contracts/TribeInterface/#getpriorvotes","text":"function getPriorVotes(address,uint256) view returns(uint96)","title":"getPriorVotes"},{"location":"developers/contracts/TribeInterface/#params","text":"Param Type Notes account address blockNumber uint256","title":"Params"},{"location":"developers/contracts/TribeInterface/#returns","text":"Param Type Notes uint96","title":"Returns"},{"location":"developers/contracts/TribeMinter/","text":"\u2b05\ufe0f Contracts TribeMinter implementation for a TRIBE Minter Contract Author: Fei Protocol This contract will be the unique TRIBE minting contract. All minting is subject to an annual inflation rate limit. For example if circulating supply is 1m and inflation is capped at 10%, then no more than 100k TRIBE can enter circulation in the following year. The contract will increase (decrease) the rate limit proportionally as supply increases (decreases) Governance and admins can only lower the max inflation %. They can also exclude (unexclude) addresses' TRIBE balances from the circulating supply. The minter's balance is excluded by default. ACCESS_CONTROL: This contract follows a somewhat unique access control pattern. It has a contract admin which is NOT intended for optimistic approval, but rather for contracts such as the TribeReserveStabilizer. An additional potential contract admin is one which automates the inclusion and removal of excluded deposits from on-chain timelocks. Additionally, the ability to transfer the tribe minter role is held by the contract owner rather than governor or admin. The owner will intially be the DAO timelock. This keeps the power to transfer or burn TRIBE minting rights isolated. Events AnnualMaxInflationUpdate event AnnualMaxInflationUpdate(uint256,uint256) Params Param Type Notes oldAnnualMaxInflationBasisPoints uint256 newAnnualMaxInflationBasisPoints uint256 BufferCapUpdate event BufferCapUpdate(uint256,uint256) Params Param Type Notes oldBufferCap uint256 newBufferCap uint256 BufferUsed event BufferUsed(uint256,uint256) Params Param Type Notes amountUsed uint256 bufferRemaining uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address OwnershipTransferred event OwnershipTransferred(address,address) Params Param Type Notes previousOwner indexed address newOwner indexed address Paused event Paused(address) Params Param Type Notes account address RateLimitPerSecondUpdate event RateLimitPerSecondUpdate(uint256,uint256) Params Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256 TribeRewardsDripperUpdate event TribeRewardsDripperUpdate(address,address) Params Param Type Notes oldTribeRewardsDripper indexed address newTribeRewardsDripper indexed address TribeTreasuryUpdate event TribeTreasuryUpdate(address,address) Params Param Type Notes oldTribeTreasury indexed address newTribeTreasury indexed address Unpaused event Unpaused(address) Params Param Type Notes account address Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 MAX_RATE_LIMIT_PER_SECOND function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract Returns Param Type Notes uint256 annualMaxInflationBasisPoints function annualMaxInflationBasisPoints() view returns(uint256) the max inflation in TRIBE circulating supply per year in basis points (1/10000) Returns Param Type Notes uint256 buffer function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap Returns Param Type Notes uint256 bufferCap function bufferCap() view returns(uint256) the cap of the buffer that can be used at once Returns Param Type Notes uint256 core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address doPartialAction function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount Returns Param Type Notes bool fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 idealBufferCap function idealBufferCap() view returns(uint256) return the ideal buffer cap based on TRIBE circulating supply Returns Param Type Notes uint256 isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isPokeNeeded function isPokeNeeded() view returns(bool) return whether a poke is needed or not i.e. is buffer cap != ideal cap Returns Param Type Notes bool lastBufferUsedTime function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract Returns Param Type Notes uint256 mint function mint(address,uint256) nonpayable mints TRIBE to the target address, subject to rate limit Params Param Type Notes to address the address to send TRIBE to amount uint256 the amount of TRIBE to send owner function owner() view returns(address) Returns the address of the current owner. Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool poke function poke() nonpayable update the rate limit per second and buffer cap rateLimitPerSecond function rateLimitPerSecond() view returns(uint256) the rate per second for this contract Returns Param Type Notes uint256 renounceOwnership function renounceOwnership() nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner. setAnnualMaxInflationBasisPoints function setAnnualMaxInflationBasisPoints(uint256) nonpayable sets the max annual inflation relative to current supply Params Param Type Notes newAnnualMaxInflationBasisPoints uint256 the new max inflation % denominated in basis points (1/10000) setBufferCap function setBufferCap(uint256) pure no-op, reverts. Prevent admin or governor from overwriting ideal buffer cap Params Param Type Notes uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setMinter function setMinter(address) nonpayable changes the TRIBE minter address Params Param Type Notes newMinter address the new minter address setRateLimitPerSecond function setRateLimitPerSecond(uint256) pure no-op, reverts. Prevent admin or governor from overwriting ideal rate limit Params Param Type Notes uint256 setTribeRewardsDripper function setTribeRewardsDripper(address) nonpayable sets the new TRIBE treasury rewards dripper Params Param Type Notes newTribeRewardsDripper address setTribeTreasury function setTribeTreasury(address) nonpayable sets the new TRIBE treasury address Params Param Type Notes newTribeTreasury address totalSupply function totalSupply() view returns(uint256) alias for tribeCirculatingSupply for compatibility with ERC-20 standard for off-chain 3rd party sites Returns Param Type Notes uint256 transferOwnership function transferOwnership(address) nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner. Params Param Type Notes newOwner address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 tribeCirculatingSupply function tribeCirculatingSupply() view returns(uint256) return the TRIBE supply, subtracting locked TRIBE Returns Param Type Notes uint256 tribeRewardsDripper function tribeRewardsDripper() view returns(address) the tribe rewards dripper address used to exclude from circulating supply Returns Param Type Notes address tribeTreasury function tribeTreasury() view returns(address) the tribe treasury address used to exclude from circulating supply Returns Param Type Notes address unpause function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"TribeMinter"},{"location":"developers/contracts/TribeMinter/#tribeminter","text":"implementation for a TRIBE Minter Contract Author: Fei Protocol This contract will be the unique TRIBE minting contract. All minting is subject to an annual inflation rate limit. For example if circulating supply is 1m and inflation is capped at 10%, then no more than 100k TRIBE can enter circulation in the following year. The contract will increase (decrease) the rate limit proportionally as supply increases (decreases) Governance and admins can only lower the max inflation %. They can also exclude (unexclude) addresses' TRIBE balances from the circulating supply. The minter's balance is excluded by default. ACCESS_CONTROL: This contract follows a somewhat unique access control pattern. It has a contract admin which is NOT intended for optimistic approval, but rather for contracts such as the TribeReserveStabilizer. An additional potential contract admin is one which automates the inclusion and removal of excluded deposits from on-chain timelocks. Additionally, the ability to transfer the tribe minter role is held by the contract owner rather than governor or admin. The owner will intially be the DAO timelock. This keeps the power to transfer or burn TRIBE minting rights isolated.","title":"TribeMinter"},{"location":"developers/contracts/TribeMinter/#events","text":"","title":"Events"},{"location":"developers/contracts/TribeMinter/#annualmaxinflationupdate","text":"event AnnualMaxInflationUpdate(uint256,uint256)","title":"AnnualMaxInflationUpdate"},{"location":"developers/contracts/TribeMinter/#params","text":"Param Type Notes oldAnnualMaxInflationBasisPoints uint256 newAnnualMaxInflationBasisPoints uint256","title":"Params"},{"location":"developers/contracts/TribeMinter/#buffercapupdate","text":"event BufferCapUpdate(uint256,uint256)","title":"BufferCapUpdate"},{"location":"developers/contracts/TribeMinter/#params_1","text":"Param Type Notes oldBufferCap uint256 newBufferCap uint256","title":"Params"},{"location":"developers/contracts/TribeMinter/#bufferused","text":"event BufferUsed(uint256,uint256)","title":"BufferUsed"},{"location":"developers/contracts/TribeMinter/#params_2","text":"Param Type Notes amountUsed uint256 bufferRemaining uint256","title":"Params"},{"location":"developers/contracts/TribeMinter/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/TribeMinter/#params_3","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/TribeMinter/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/TribeMinter/#params_4","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/TribeMinter/#ownershiptransferred","text":"event OwnershipTransferred(address,address)","title":"OwnershipTransferred"},{"location":"developers/contracts/TribeMinter/#params_5","text":"Param Type Notes previousOwner indexed address newOwner indexed address","title":"Params"},{"location":"developers/contracts/TribeMinter/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/TribeMinter/#params_6","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/TribeMinter/#ratelimitpersecondupdate","text":"event RateLimitPerSecondUpdate(uint256,uint256)","title":"RateLimitPerSecondUpdate"},{"location":"developers/contracts/TribeMinter/#params_7","text":"Param Type Notes oldRateLimitPerSecond uint256 newRateLimitPerSecond uint256","title":"Params"},{"location":"developers/contracts/TribeMinter/#triberewardsdripperupdate","text":"event TribeRewardsDripperUpdate(address,address)","title":"TribeRewardsDripperUpdate"},{"location":"developers/contracts/TribeMinter/#params_8","text":"Param Type Notes oldTribeRewardsDripper indexed address newTribeRewardsDripper indexed address","title":"Params"},{"location":"developers/contracts/TribeMinter/#tribetreasuryupdate","text":"event TribeTreasuryUpdate(address,address)","title":"TribeTreasuryUpdate"},{"location":"developers/contracts/TribeMinter/#params_9","text":"Param Type Notes oldTribeTreasury indexed address newTribeTreasury indexed address","title":"Params"},{"location":"developers/contracts/TribeMinter/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/TribeMinter/#params_10","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/TribeMinter/#methods","text":"","title":"Methods"},{"location":"developers/contracts/TribeMinter/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/TribeMinter/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/TribeMinter/#max_rate_limit_per_second","text":"function MAX_RATE_LIMIT_PER_SECOND() view returns(uint256) maximum rate limit per second governance can set for this contract","title":"MAX_RATE_LIMIT_PER_SECOND"},{"location":"developers/contracts/TribeMinter/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeMinter/#annualmaxinflationbasispoints","text":"function annualMaxInflationBasisPoints() view returns(uint256) the max inflation in TRIBE circulating supply per year in basis points (1/10000)","title":"annualMaxInflationBasisPoints"},{"location":"developers/contracts/TribeMinter/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeMinter/#buffer","text":"function buffer() view returns(uint256) the amount of action used before hitting limit replenishes at rateLimitPerSecond per second up to bufferCap","title":"buffer"},{"location":"developers/contracts/TribeMinter/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeMinter/#buffercap","text":"function bufferCap() view returns(uint256) the cap of the buffer that can be used at once","title":"bufferCap"},{"location":"developers/contracts/TribeMinter/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeMinter/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/TribeMinter/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeMinter/#dopartialaction","text":"function doPartialAction() view returns(bool) a flag for whether to allow partial actions to complete if the buffer is less than amount","title":"doPartialAction"},{"location":"developers/contracts/TribeMinter/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribeMinter/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/TribeMinter/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeMinter/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/TribeMinter/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeMinter/#idealbuffercap","text":"function idealBufferCap() view returns(uint256) return the ideal buffer cap based on TRIBE circulating supply","title":"idealBufferCap"},{"location":"developers/contracts/TribeMinter/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeMinter/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/TribeMinter/#params_11","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/TribeMinter/#returns_10","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribeMinter/#ispokeneeded","text":"function isPokeNeeded() view returns(bool) return whether a poke is needed or not i.e. is buffer cap != ideal cap","title":"isPokeNeeded"},{"location":"developers/contracts/TribeMinter/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribeMinter/#lastbufferusedtime","text":"function lastBufferUsedTime() view returns(uint256) the last time the buffer was used by the contract","title":"lastBufferUsedTime"},{"location":"developers/contracts/TribeMinter/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeMinter/#mint","text":"function mint(address,uint256) nonpayable mints TRIBE to the target address, subject to rate limit","title":"mint"},{"location":"developers/contracts/TribeMinter/#params_12","text":"Param Type Notes to address the address to send TRIBE to amount uint256 the amount of TRIBE to send","title":"Params"},{"location":"developers/contracts/TribeMinter/#owner","text":"function owner() view returns(address) Returns the address of the current owner.","title":"owner"},{"location":"developers/contracts/TribeMinter/#returns_13","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeMinter/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/TribeMinter/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/TribeMinter/#returns_14","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribeMinter/#poke","text":"function poke() nonpayable update the rate limit per second and buffer cap","title":"poke"},{"location":"developers/contracts/TribeMinter/#ratelimitpersecond","text":"function rateLimitPerSecond() view returns(uint256) the rate per second for this contract","title":"rateLimitPerSecond"},{"location":"developers/contracts/TribeMinter/#returns_15","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeMinter/#renounceownership","text":"function renounceOwnership() nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","title":"renounceOwnership"},{"location":"developers/contracts/TribeMinter/#setannualmaxinflationbasispoints","text":"function setAnnualMaxInflationBasisPoints(uint256) nonpayable sets the max annual inflation relative to current supply","title":"setAnnualMaxInflationBasisPoints"},{"location":"developers/contracts/TribeMinter/#params_13","text":"Param Type Notes newAnnualMaxInflationBasisPoints uint256 the new max inflation % denominated in basis points (1/10000)","title":"Params"},{"location":"developers/contracts/TribeMinter/#setbuffercap","text":"function setBufferCap(uint256) pure no-op, reverts. Prevent admin or governor from overwriting ideal buffer cap","title":"setBufferCap"},{"location":"developers/contracts/TribeMinter/#params_14","text":"Param Type Notes uint256","title":"Params"},{"location":"developers/contracts/TribeMinter/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/TribeMinter/#params_15","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/TribeMinter/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/TribeMinter/#params_16","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/TribeMinter/#setminter","text":"function setMinter(address) nonpayable changes the TRIBE minter address","title":"setMinter"},{"location":"developers/contracts/TribeMinter/#params_17","text":"Param Type Notes newMinter address the new minter address","title":"Params"},{"location":"developers/contracts/TribeMinter/#setratelimitpersecond","text":"function setRateLimitPerSecond(uint256) pure no-op, reverts. Prevent admin or governor from overwriting ideal rate limit","title":"setRateLimitPerSecond"},{"location":"developers/contracts/TribeMinter/#params_18","text":"Param Type Notes uint256","title":"Params"},{"location":"developers/contracts/TribeMinter/#settriberewardsdripper","text":"function setTribeRewardsDripper(address) nonpayable sets the new TRIBE treasury rewards dripper","title":"setTribeRewardsDripper"},{"location":"developers/contracts/TribeMinter/#params_19","text":"Param Type Notes newTribeRewardsDripper address","title":"Params"},{"location":"developers/contracts/TribeMinter/#settribetreasury","text":"function setTribeTreasury(address) nonpayable sets the new TRIBE treasury address","title":"setTribeTreasury"},{"location":"developers/contracts/TribeMinter/#params_20","text":"Param Type Notes newTribeTreasury address","title":"Params"},{"location":"developers/contracts/TribeMinter/#totalsupply","text":"function totalSupply() view returns(uint256) alias for tribeCirculatingSupply for compatibility with ERC-20 standard for off-chain 3rd party sites","title":"totalSupply"},{"location":"developers/contracts/TribeMinter/#returns_16","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeMinter/#transferownership","text":"function transferOwnership(address) nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner.","title":"transferOwnership"},{"location":"developers/contracts/TribeMinter/#params_21","text":"Param Type Notes newOwner address","title":"Params"},{"location":"developers/contracts/TribeMinter/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/TribeMinter/#returns_17","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeMinter/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/TribeMinter/#returns_18","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeMinter/#tribecirculatingsupply","text":"function tribeCirculatingSupply() view returns(uint256) return the TRIBE supply, subtracting locked TRIBE","title":"tribeCirculatingSupply"},{"location":"developers/contracts/TribeMinter/#returns_19","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeMinter/#triberewardsdripper","text":"function tribeRewardsDripper() view returns(address) the tribe rewards dripper address used to exclude from circulating supply","title":"tribeRewardsDripper"},{"location":"developers/contracts/TribeMinter/#returns_20","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeMinter/#tribetreasury","text":"function tribeTreasury() view returns(address) the tribe treasury address used to exclude from circulating supply","title":"tribeTreasury"},{"location":"developers/contracts/TribeMinter/#returns_21","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeMinter/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused \u2b05\ufe0f Contracts","title":"unpause"},{"location":"developers/contracts/TribeReserveStabilizer/","text":"\u2b05\ufe0f Contracts TribeReserveStabilizer implementation for a TRIBE Reserve Stabilizer Author: Fei Protocol Events BackupOracleUpdate event BackupOracleUpdate(address,address) Params Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address CollateralizationOracleUpdate event CollateralizationOracleUpdate(address,address) Params Param Type Notes oldCollateralizationOracle indexed address newCollateralizationOracle indexed address CollateralizationThresholdUpdate event CollateralizationThresholdUpdate(uint256,uint256) Params Param Type Notes oldCollateralizationThresholdBasisPoints uint256 newCollateralizationThresholdBasisPoints uint256 ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DecimalsNormalizerUpdate event DecimalsNormalizerUpdate(int256,int256) Params Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256 Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 DurationUpdate event DurationUpdate(uint256,uint256) Params Param Type Notes oldDuration uint256 newDuration uint256 FeiExchange event FeiExchange(address,uint256,uint256) Params Param Type Notes to indexed address feiAmountIn uint256 amountOut uint256 InvertUpdate event InvertUpdate(bool,bool) Params Param Type Notes oldDoInvert bool newDoInvert bool OracleUpdate event OracleUpdate(address,address) Params Param Type Notes oldOracle indexed address newOracle indexed address Paused event Paused(address) Params Param Type Notes account address TimerReset event TimerReset(uint256) Params Param Type Notes startTime uint256 Unpaused event Unpaused(address) Params Param Type Notes account address UsdPerFeiRateUpdate event UsdPerFeiRateUpdate(uint256,uint256) Params Param Type Notes oldUsdPerFeiBasisPoints uint256 newUsdPerFeiBasisPoints uint256 WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 backupOracle function backupOracle() view returns(address) the backup oracle reference by the contract Returns Param Type Notes address balance function balance() view returns(uint256) returns the amount of the held ERC-20 Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address collateralizationOracle function collateralizationOracle() view returns(address) a collateralization oracle Returns Param Type Notes address collateralizationThreshold function collateralizationThreshold() view returns(tuple) the collateralization threshold below which exchanging becomes active Returns Param Type Notes tuple core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address decimalsNormalizer function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer) Returns Param Type Notes int256 deposit function deposit() nonpayable new PCV deposited to the stabilizer no-op because the token transfer already happened doInvert function doInvert() view returns(bool) Returns Param Type Notes bool duration function duration() view returns(uint256) the duration of the timed period Returns Param Type Notes uint256 exchangeFei function exchangeFei(uint256) nonpayable returns(uint256) exchange FEI for minted TRIBE the timer counts down from first time below threshold and opens after window Params Param Type Notes feiAmount uint256 Returns Param Type Notes uint256 fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getAmountOut function getAmountOut(uint256) view returns(uint256) returns the amount out of tokens from the reserves for a given amount of FEI Params Param Type Notes amountFeiIn uint256 the amount of FEI in Returns Param Type Notes uint256 invert function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI Params Param Type Notes price tuple the peg price to invert Returns Param Type Notes tuple isCollateralizationBelowThreshold function isCollateralizationBelowThreshold() view returns(bool) check whether collateralization ratio is below the threshold set returns false if the oracle is invalid Returns Param Type Notes bool isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool isTimeEnded function isTimeEnded() view returns(bool) return true if time period has ended Returns Param Type Notes bool isTimeStarted function isTimeStarted() view returns(bool) Returns Param Type Notes bool oracle function oracle() view returns(address) the oracle reference by the contract Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool readOracle function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc Returns Param Type Notes tuple remainingTime function remainingTime() view returns(uint256) number of seconds remaining until time is up Returns Param Type Notes uint256 resetOracleDelayCountdown function resetOracleDelayCountdown() nonpayable reset the opening of the TribeReserveStabilizer oracle delay as soon as above CR target resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit Returns Param Type Notes uint256 uint256 setBackupOracle function setBackupOracle(address) nonpayable sets the referenced backup oracle Params Param Type Notes newBackupOracle address the new backup oracle to reference setCollateralizationOracle function setCollateralizationOracle(address) nonpayable set the Collateralization oracle Params Param Type Notes newCollateralizationOracle address setCollateralizationThreshold function setCollateralizationThreshold(uint256) nonpayable set the collateralization threshold below which exchanging becomes active Params Param Type Notes newCollateralizationThresholdBasisPoints uint256 setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDecimalsNormalizer function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer Params Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer setDoInvert function setDoInvert(bool) nonpayable sets the flag for whether to invert or not Params Param Type Notes newDoInvert bool the new flag for whether to invert setOracle function setOracle(address) nonpayable sets the referenced oracle Params Param Type Notes newOracle address the new oracle to reference setUsdPerFeiRate function setUsdPerFeiRate(uint256) nonpayable sets the USD per FEI exchange rate rate Params Param Type Notes newUsdPerFeiBasisPoints uint256 the USD per FEI exchange rate denominated in basis points (1/10000) startOracleDelayCountdown function startOracleDelayCountdown() nonpayable delay the opening of the TribeReserveStabilizer until oracle delay duration is met startTime function startTime() view returns(uint256) the start timestamp of the timed period Returns Param Type Notes uint256 timeSinceStart function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration Returns Param Type Notes uint256 token function token() view returns(address) the ERC20 token exchanged on this stablizer Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 tribeMinter function tribeMinter() view returns(address) the TRIBE minter address Returns Param Type Notes address unpause function unpause() nonpayable set pausable methods to unpaused updateOracle function updateOracle() nonpayable updates the referenced oracle usdPerFeiBasisPoints function usdPerFeiBasisPoints() view returns(uint256) the USD per FEI exchange rate denominated in basis points (1/10000) Returns Param Type Notes uint256 withdraw function withdraw(address,uint256) pure reverts. Held TRIBE should only be released by exchangeFei or mint Params Param Type Notes address uint256 withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"TribeReserveStabilizer"},{"location":"developers/contracts/TribeReserveStabilizer/#tribereservestabilizer","text":"implementation for a TRIBE Reserve Stabilizer Author: Fei Protocol","title":"TribeReserveStabilizer"},{"location":"developers/contracts/TribeReserveStabilizer/#events","text":"","title":"Events"},{"location":"developers/contracts/TribeReserveStabilizer/#backuporacleupdate","text":"event BackupOracleUpdate(address,address)","title":"BackupOracleUpdate"},{"location":"developers/contracts/TribeReserveStabilizer/#params","text":"Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#collateralizationoracleupdate","text":"event CollateralizationOracleUpdate(address,address)","title":"CollateralizationOracleUpdate"},{"location":"developers/contracts/TribeReserveStabilizer/#params_1","text":"Param Type Notes oldCollateralizationOracle indexed address newCollateralizationOracle indexed address","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#collateralizationthresholdupdate","text":"event CollateralizationThresholdUpdate(uint256,uint256)","title":"CollateralizationThresholdUpdate"},{"location":"developers/contracts/TribeReserveStabilizer/#params_2","text":"Param Type Notes oldCollateralizationThresholdBasisPoints uint256 newCollateralizationThresholdBasisPoints uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/TribeReserveStabilizer/#params_3","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/TribeReserveStabilizer/#params_4","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#decimalsnormalizerupdate","text":"event DecimalsNormalizerUpdate(int256,int256)","title":"DecimalsNormalizerUpdate"},{"location":"developers/contracts/TribeReserveStabilizer/#params_5","text":"Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/TribeReserveStabilizer/#params_6","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#durationupdate","text":"event DurationUpdate(uint256,uint256)","title":"DurationUpdate"},{"location":"developers/contracts/TribeReserveStabilizer/#params_7","text":"Param Type Notes oldDuration uint256 newDuration uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#feiexchange","text":"event FeiExchange(address,uint256,uint256)","title":"FeiExchange"},{"location":"developers/contracts/TribeReserveStabilizer/#params_8","text":"Param Type Notes to indexed address feiAmountIn uint256 amountOut uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#invertupdate","text":"event InvertUpdate(bool,bool)","title":"InvertUpdate"},{"location":"developers/contracts/TribeReserveStabilizer/#params_9","text":"Param Type Notes oldDoInvert bool newDoInvert bool","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#oracleupdate","text":"event OracleUpdate(address,address)","title":"OracleUpdate"},{"location":"developers/contracts/TribeReserveStabilizer/#params_10","text":"Param Type Notes oldOracle indexed address newOracle indexed address","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/TribeReserveStabilizer/#params_11","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#timerreset","text":"event TimerReset(uint256)","title":"TimerReset"},{"location":"developers/contracts/TribeReserveStabilizer/#params_12","text":"Param Type Notes startTime uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/TribeReserveStabilizer/#params_13","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#usdperfeirateupdate","text":"event UsdPerFeiRateUpdate(uint256,uint256)","title":"UsdPerFeiRateUpdate"},{"location":"developers/contracts/TribeReserveStabilizer/#params_14","text":"Param Type Notes oldUsdPerFeiBasisPoints uint256 newUsdPerFeiBasisPoints uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/TribeReserveStabilizer/#params_15","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/TribeReserveStabilizer/#params_16","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/TribeReserveStabilizer/#params_17","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#methods","text":"","title":"Methods"},{"location":"developers/contracts/TribeReserveStabilizer/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/TribeReserveStabilizer/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#backuporacle","text":"function backupOracle() view returns(address) the backup oracle reference by the contract","title":"backupOracle"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#balance","text":"function balance() view returns(uint256) returns the amount of the held ERC-20","title":"balance"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#collateralizationoracle","text":"function collateralizationOracle() view returns(address) a collateralization oracle","title":"collateralizationOracle"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#collateralizationthreshold","text":"function collateralizationThreshold() view returns(tuple) the collateralization threshold below which exchanging becomes active","title":"collateralizationThreshold"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_5","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_6","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#decimalsnormalizer","text":"function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer)","title":"decimalsNormalizer"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_7","text":"Param Type Notes int256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#deposit_1","text":"function deposit() nonpayable new PCV deposited to the stabilizer no-op because the token transfer already happened","title":"deposit"},{"location":"developers/contracts/TribeReserveStabilizer/#doinvert","text":"function doInvert() view returns(bool)","title":"doInvert"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_8","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#duration","text":"function duration() view returns(uint256) the duration of the timed period","title":"duration"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#exchangefei","text":"function exchangeFei(uint256) nonpayable returns(uint256) exchange FEI for minted TRIBE the timer counts down from first time below threshold and opens after window","title":"exchangeFei"},{"location":"developers/contracts/TribeReserveStabilizer/#params_18","text":"Param Type Notes feiAmount uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_10","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#getamountout","text":"function getAmountOut(uint256) view returns(uint256) returns the amount out of tokens from the reserves for a given amount of FEI","title":"getAmountOut"},{"location":"developers/contracts/TribeReserveStabilizer/#params_19","text":"Param Type Notes amountFeiIn uint256 the amount of FEI in","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#invert","text":"function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI","title":"invert"},{"location":"developers/contracts/TribeReserveStabilizer/#params_20","text":"Param Type Notes price tuple the peg price to invert","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_14","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#iscollateralizationbelowthreshold","text":"function isCollateralizationBelowThreshold() view returns(bool) check whether collateralization ratio is below the threshold set returns false if the oracle is invalid","title":"isCollateralizationBelowThreshold"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_15","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/TribeReserveStabilizer/#params_21","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_16","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#istimeended","text":"function isTimeEnded() view returns(bool) return true if time period has ended","title":"isTimeEnded"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_17","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#istimestarted","text":"function isTimeStarted() view returns(bool)","title":"isTimeStarted"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_18","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#oracle","text":"function oracle() view returns(address) the oracle reference by the contract","title":"oracle"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_19","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/TribeReserveStabilizer/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_20","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#readoracle","text":"function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc","title":"readOracle"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_21","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#remainingtime","text":"function remainingTime() view returns(uint256) number of seconds remaining until time is up","title":"remainingTime"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#resetoracledelaycountdown","text":"function resetOracleDelayCountdown() nonpayable reset the opening of the TribeReserveStabilizer oracle delay as soon as above CR target","title":"resetOracleDelayCountdown"},{"location":"developers/contracts/TribeReserveStabilizer/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) gets the resistant token balance and protocol owned fei of this deposit","title":"resistantBalanceAndFei"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_23","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#setbackuporacle","text":"function setBackupOracle(address) nonpayable sets the referenced backup oracle","title":"setBackupOracle"},{"location":"developers/contracts/TribeReserveStabilizer/#params_22","text":"Param Type Notes newBackupOracle address the new backup oracle to reference","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#setcollateralizationoracle","text":"function setCollateralizationOracle(address) nonpayable set the Collateralization oracle","title":"setCollateralizationOracle"},{"location":"developers/contracts/TribeReserveStabilizer/#params_23","text":"Param Type Notes newCollateralizationOracle address","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#setcollateralizationthreshold","text":"function setCollateralizationThreshold(uint256) nonpayable set the collateralization threshold below which exchanging becomes active","title":"setCollateralizationThreshold"},{"location":"developers/contracts/TribeReserveStabilizer/#params_24","text":"Param Type Notes newCollateralizationThresholdBasisPoints uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/TribeReserveStabilizer/#params_25","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/TribeReserveStabilizer/#params_26","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#setdecimalsnormalizer","text":"function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer","title":"setDecimalsNormalizer"},{"location":"developers/contracts/TribeReserveStabilizer/#params_27","text":"Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#setdoinvert","text":"function setDoInvert(bool) nonpayable sets the flag for whether to invert or not","title":"setDoInvert"},{"location":"developers/contracts/TribeReserveStabilizer/#params_28","text":"Param Type Notes newDoInvert bool the new flag for whether to invert","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#setoracle","text":"function setOracle(address) nonpayable sets the referenced oracle","title":"setOracle"},{"location":"developers/contracts/TribeReserveStabilizer/#params_29","text":"Param Type Notes newOracle address the new oracle to reference","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#setusdperfeirate","text":"function setUsdPerFeiRate(uint256) nonpayable sets the USD per FEI exchange rate rate","title":"setUsdPerFeiRate"},{"location":"developers/contracts/TribeReserveStabilizer/#params_30","text":"Param Type Notes newUsdPerFeiBasisPoints uint256 the USD per FEI exchange rate denominated in basis points (1/10000)","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#startoracledelaycountdown","text":"function startOracleDelayCountdown() nonpayable delay the opening of the TribeReserveStabilizer until oracle delay duration is met","title":"startOracleDelayCountdown"},{"location":"developers/contracts/TribeReserveStabilizer/#starttime","text":"function startTime() view returns(uint256) the start timestamp of the timed period","title":"startTime"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_24","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#timesincestart","text":"function timeSinceStart() view returns(uint256) number of seconds since contract was initialized will be less than or equal to duration","title":"timeSinceStart"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_25","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#token","text":"function token() view returns(address) the ERC20 token exchanged on this stablizer","title":"token"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_26","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_27","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_28","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#tribeminter","text":"function tribeMinter() view returns(address) the TRIBE minter address","title":"tribeMinter"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_29","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/TribeReserveStabilizer/#updateoracle","text":"function updateOracle() nonpayable updates the referenced oracle","title":"updateOracle"},{"location":"developers/contracts/TribeReserveStabilizer/#usdperfeibasispoints","text":"function usdPerFeiBasisPoints() view returns(uint256) the USD per FEI exchange rate denominated in basis points (1/10000)","title":"usdPerFeiBasisPoints"},{"location":"developers/contracts/TribeReserveStabilizer/#returns_30","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/TribeReserveStabilizer/#withdraw","text":"function withdraw(address,uint256) pure reverts. Held TRIBE should only be released by exchangeFei or mint","title":"withdraw"},{"location":"developers/contracts/TribeReserveStabilizer/#params_31","text":"Param Type Notes address uint256","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/TribeReserveStabilizer/#params_32","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/TribeReserveStabilizer/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/TribeReserveStabilizer/#params_33","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/","text":"\u2b05\ufe0f Contracts UniswapPCVDeposit implementation for Uniswap LP PCV Deposit Author: Fei Protocol Events BackupOracleUpdate event BackupOracleUpdate(address,address) Params Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address ContractAdminRoleUpdate event ContractAdminRoleUpdate(bytes32,bytes32) Params Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32 CoreUpdate event CoreUpdate(address,address) Params Param Type Notes oldCore indexed address newCore indexed address DecimalsNormalizerUpdate event DecimalsNormalizerUpdate(int256,int256) Params Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256 Deposit event Deposit(address,uint256) Params Param Type Notes _from indexed address _amount uint256 InvertUpdate event InvertUpdate(bool,bool) Params Param Type Notes oldDoInvert bool newDoInvert bool MaxBasisPointsFromPegLPUpdate event MaxBasisPointsFromPegLPUpdate(uint256,uint256) Params Param Type Notes oldMaxBasisPointsFromPegLP uint256 newMaxBasisPointsFromPegLP uint256 OracleUpdate event OracleUpdate(address,address) Params Param Type Notes oldOracle indexed address newOracle indexed address PairUpdate event PairUpdate(address,address) Params Param Type Notes oldPair indexed address newPair indexed address Paused event Paused(address) Params Param Type Notes account address Unpaused event Unpaused(address) Params Param Type Notes account address WithdrawERC20 event WithdrawERC20(address,address,address,uint256) Params Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256 WithdrawETH event WithdrawETH(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Withdrawal event Withdrawal(address,address,uint256) Params Param Type Notes _caller indexed address _to indexed address _amount uint256 Methods CONTRACT_ADMIN_ROLE function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only Returns Param Type Notes bytes32 backupOracle function backupOracle() view returns(address) the backup oracle reference by the contract Returns Param Type Notes address balance function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI Returns Param Type Notes uint256 balanceReportedIn function balanceReportedIn() view returns(address) display the related token of the balance reported Returns Param Type Notes address core function core() view returns(address) address of the Core contract referenced Returns Param Type Notes address decimalsNormalizer function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer) Returns Param Type Notes int256 deposit function deposit() nonpayable deposit tokens into the PCV allocation doInvert function doInvert() view returns(bool) Returns Param Type Notes bool fei function fei() view returns(address) address of the Fei contract referenced by Core Returns Param Type Notes address feiBalance function feiBalance() view returns(uint256) fei balance of contract Returns Param Type Notes uint256 getReserves function getReserves() view returns(uint256,uint256) pair reserves with fei listed first Returns Param Type Notes feiReserves uint256 tokenReserves uint256 invert function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI Params Param Type Notes price tuple the peg price to invert Returns Param Type Notes tuple isContractAdmin function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract Params Param Type Notes _admin address Returns Param Type Notes bool liquidityOwned function liquidityOwned() view returns(uint256) amount of pair liquidity owned by this contract Returns Param Type Notes uint256 maxBasisPointsFromPegLP function maxBasisPointsFromPegLP() view returns(uint256) a slippage protection parameter, deposits revert when spot price is > this % from oracle Returns Param Type Notes uint256 oracle function oracle() view returns(address) the oracle reference by the contract Returns Param Type Notes address pair function pair() view returns(address) the referenced Uniswap pair contract Returns Param Type Notes address pause function pause() nonpayable set pausable methods to paused paused function paused() view returns(bool) Returns true if the contract is paused, and false otherwise. Returns Param Type Notes bool readOracle function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc Returns Param Type Notes tuple resistantBalanceAndFei function resistantBalanceAndFei() view returns(uint256,uint256) get the manipulation resistant Other(example ETH) and FEI in the Uniswap pool Returns Param Type Notes uint256 uint256 router function router() view returns(address) the Uniswap router contract Returns Param Type Notes address setBackupOracle function setBackupOracle(address) nonpayable sets the referenced backup oracle Params Param Type Notes newBackupOracle address the new backup oracle to reference setContractAdminRole function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract Params Param Type Notes newContractAdminRole bytes32 setCore function setCore(address) nonpayable set new Core reference address Params Param Type Notes newCore address the new core address setDecimalsNormalizer function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer Params Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer setDoInvert function setDoInvert(bool) nonpayable sets the flag for whether to invert or not Params Param Type Notes newDoInvert bool the new flag for whether to invert setMaxBasisPointsFromPegLP function setMaxBasisPointsFromPegLP(uint256) nonpayable sets the new slippage parameter for depositing liquidity Params Param Type Notes _maxBasisPointsFromPegLP uint256 the new distance in basis points (1/10000) from peg beyond which a liquidity provision will fail setOracle function setOracle(address) nonpayable sets the referenced oracle Params Param Type Notes newOracle address the new oracle to reference setPair function setPair(address) nonpayable set the new pair contract also approves the router for the new pair token and underlying token Params Param Type Notes _pair address the new pair token function token() view returns(address) the address of the non-fei underlying token Returns Param Type Notes address tribe function tribe() view returns(address) address of the Tribe contract referenced by Core Returns Param Type Notes address tribeBalance function tribeBalance() view returns(uint256) tribe balance of contract Returns Param Type Notes uint256 unpause function unpause() nonpayable set pausable methods to unpaused updateOracle function updateOracle() nonpayable updates the referenced oracle withdraw function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation has rounding errors on amount to withdraw, can differ from the input \"amountUnderlying\" Params Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn withdrawERC20 function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract Params Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send withdrawETH function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract Params Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"UniswapPCVDeposit"},{"location":"developers/contracts/UniswapPCVDeposit/#uniswappcvdeposit","text":"implementation for Uniswap LP PCV Deposit Author: Fei Protocol","title":"UniswapPCVDeposit"},{"location":"developers/contracts/UniswapPCVDeposit/#events","text":"","title":"Events"},{"location":"developers/contracts/UniswapPCVDeposit/#backuporacleupdate","text":"event BackupOracleUpdate(address,address)","title":"BackupOracleUpdate"},{"location":"developers/contracts/UniswapPCVDeposit/#params","text":"Param Type Notes oldBackupOracle indexed address newBackupOracle indexed address","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#contractadminroleupdate","text":"event ContractAdminRoleUpdate(bytes32,bytes32)","title":"ContractAdminRoleUpdate"},{"location":"developers/contracts/UniswapPCVDeposit/#params_1","text":"Param Type Notes oldContractAdminRole indexed bytes32 newContractAdminRole indexed bytes32","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#coreupdate","text":"event CoreUpdate(address,address)","title":"CoreUpdate"},{"location":"developers/contracts/UniswapPCVDeposit/#params_2","text":"Param Type Notes oldCore indexed address newCore indexed address","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#decimalsnormalizerupdate","text":"event DecimalsNormalizerUpdate(int256,int256)","title":"DecimalsNormalizerUpdate"},{"location":"developers/contracts/UniswapPCVDeposit/#params_3","text":"Param Type Notes oldDecimalsNormalizer int256 newDecimalsNormalizer int256","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#deposit","text":"event Deposit(address,uint256)","title":"Deposit"},{"location":"developers/contracts/UniswapPCVDeposit/#params_4","text":"Param Type Notes _from indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#invertupdate","text":"event InvertUpdate(bool,bool)","title":"InvertUpdate"},{"location":"developers/contracts/UniswapPCVDeposit/#params_5","text":"Param Type Notes oldDoInvert bool newDoInvert bool","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#maxbasispointsfrompeglpupdate","text":"event MaxBasisPointsFromPegLPUpdate(uint256,uint256)","title":"MaxBasisPointsFromPegLPUpdate"},{"location":"developers/contracts/UniswapPCVDeposit/#params_6","text":"Param Type Notes oldMaxBasisPointsFromPegLP uint256 newMaxBasisPointsFromPegLP uint256","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#oracleupdate","text":"event OracleUpdate(address,address)","title":"OracleUpdate"},{"location":"developers/contracts/UniswapPCVDeposit/#params_7","text":"Param Type Notes oldOracle indexed address newOracle indexed address","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#pairupdate","text":"event PairUpdate(address,address)","title":"PairUpdate"},{"location":"developers/contracts/UniswapPCVDeposit/#params_8","text":"Param Type Notes oldPair indexed address newPair indexed address","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#paused","text":"event Paused(address)","title":"Paused"},{"location":"developers/contracts/UniswapPCVDeposit/#params_9","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#unpaused","text":"event Unpaused(address)","title":"Unpaused"},{"location":"developers/contracts/UniswapPCVDeposit/#params_10","text":"Param Type Notes account address","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#withdrawerc20","text":"event WithdrawERC20(address,address,address,uint256)","title":"WithdrawERC20"},{"location":"developers/contracts/UniswapPCVDeposit/#params_11","text":"Param Type Notes _caller indexed address _token indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#withdraweth","text":"event WithdrawETH(address,address,uint256)","title":"WithdrawETH"},{"location":"developers/contracts/UniswapPCVDeposit/#params_12","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#withdrawal","text":"event Withdrawal(address,address,uint256)","title":"Withdrawal"},{"location":"developers/contracts/UniswapPCVDeposit/#params_13","text":"Param Type Notes _caller indexed address _to indexed address _amount uint256","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#methods","text":"","title":"Methods"},{"location":"developers/contracts/UniswapPCVDeposit/#contract_admin_role","text":"function CONTRACT_ADMIN_ROLE() view returns(bytes32) a role used with a subset of governor permissions for this contract only","title":"CONTRACT_ADMIN_ROLE"},{"location":"developers/contracts/UniswapPCVDeposit/#returns","text":"Param Type Notes bytes32","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#backuporacle","text":"function backupOracle() view returns(address) the backup oracle reference by the contract","title":"backupOracle"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_1","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#balance","text":"function balance() view returns(uint256) returns total balance of PCV in the Deposit excluding the FEI","title":"balance"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#balancereportedin","text":"function balanceReportedIn() view returns(address) display the related token of the balance reported","title":"balanceReportedIn"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_3","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#core","text":"function core() view returns(address) address of the Core contract referenced","title":"core"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_4","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#decimalsnormalizer","text":"function decimalsNormalizer() view returns(int256) number of decimals to scale oracle price by, i.e. multiplying by 10^(decimalsNormalizer)","title":"decimalsNormalizer"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_5","text":"Param Type Notes int256","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#deposit_1","text":"function deposit() nonpayable deposit tokens into the PCV allocation","title":"deposit"},{"location":"developers/contracts/UniswapPCVDeposit/#doinvert","text":"function doInvert() view returns(bool)","title":"doInvert"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#fei","text":"function fei() view returns(address) address of the Fei contract referenced by Core","title":"fei"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_7","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#feibalance","text":"function feiBalance() view returns(uint256) fei balance of contract","title":"feiBalance"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_8","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#getreserves","text":"function getReserves() view returns(uint256,uint256) pair reserves with fei listed first","title":"getReserves"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_9","text":"Param Type Notes feiReserves uint256 tokenReserves uint256","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#invert","text":"function invert((uint256)) pure returns(tuple) invert a peg price the inverted peg would be X per FEI","title":"invert"},{"location":"developers/contracts/UniswapPCVDeposit/#params_14","text":"Param Type Notes price tuple the peg price to invert","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_10","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#iscontractadmin","text":"function isContractAdmin(address) view returns(bool) returns whether a given address has the admin role for this contract","title":"isContractAdmin"},{"location":"developers/contracts/UniswapPCVDeposit/#params_15","text":"Param Type Notes _admin address","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_11","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#liquidityowned","text":"function liquidityOwned() view returns(uint256) amount of pair liquidity owned by this contract","title":"liquidityOwned"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_12","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#maxbasispointsfrompeglp","text":"function maxBasisPointsFromPegLP() view returns(uint256) a slippage protection parameter, deposits revert when spot price is > this % from oracle","title":"maxBasisPointsFromPegLP"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_13","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#oracle","text":"function oracle() view returns(address) the oracle reference by the contract","title":"oracle"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_14","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#pair","text":"function pair() view returns(address) the referenced Uniswap pair contract","title":"pair"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_15","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#pause","text":"function pause() nonpayable set pausable methods to paused","title":"pause"},{"location":"developers/contracts/UniswapPCVDeposit/#paused_1","text":"function paused() view returns(bool) Returns true if the contract is paused, and false otherwise.","title":"paused"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_16","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#readoracle","text":"function readOracle() view returns(tuple) the peg price of the referenced oracle the peg is defined as FEI per X with X being ETH, dollars, etc","title":"readOracle"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_17","text":"Param Type Notes tuple","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#resistantbalanceandfei","text":"function resistantBalanceAndFei() view returns(uint256,uint256) get the manipulation resistant Other(example ETH) and FEI in the Uniswap pool","title":"resistantBalanceAndFei"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_18","text":"Param Type Notes uint256 uint256","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#router","text":"function router() view returns(address) the Uniswap router contract","title":"router"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_19","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#setbackuporacle","text":"function setBackupOracle(address) nonpayable sets the referenced backup oracle","title":"setBackupOracle"},{"location":"developers/contracts/UniswapPCVDeposit/#params_16","text":"Param Type Notes newBackupOracle address the new backup oracle to reference","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#setcontractadminrole","text":"function setContractAdminRole(bytes32) nonpayable sets a new admin role for this contract","title":"setContractAdminRole"},{"location":"developers/contracts/UniswapPCVDeposit/#params_17","text":"Param Type Notes newContractAdminRole bytes32","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#setcore","text":"function setCore(address) nonpayable set new Core reference address","title":"setCore"},{"location":"developers/contracts/UniswapPCVDeposit/#params_18","text":"Param Type Notes newCore address the new core address","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#setdecimalsnormalizer","text":"function setDecimalsNormalizer(int256) nonpayable sets the new decimalsNormalizer","title":"setDecimalsNormalizer"},{"location":"developers/contracts/UniswapPCVDeposit/#params_19","text":"Param Type Notes newDecimalsNormalizer int256 the new decimalsNormalizer","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#setdoinvert","text":"function setDoInvert(bool) nonpayable sets the flag for whether to invert or not","title":"setDoInvert"},{"location":"developers/contracts/UniswapPCVDeposit/#params_20","text":"Param Type Notes newDoInvert bool the new flag for whether to invert","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#setmaxbasispointsfrompeglp","text":"function setMaxBasisPointsFromPegLP(uint256) nonpayable sets the new slippage parameter for depositing liquidity","title":"setMaxBasisPointsFromPegLP"},{"location":"developers/contracts/UniswapPCVDeposit/#params_21","text":"Param Type Notes _maxBasisPointsFromPegLP uint256 the new distance in basis points (1/10000) from peg beyond which a liquidity provision will fail","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#setoracle","text":"function setOracle(address) nonpayable sets the referenced oracle","title":"setOracle"},{"location":"developers/contracts/UniswapPCVDeposit/#params_22","text":"Param Type Notes newOracle address the new oracle to reference","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#setpair","text":"function setPair(address) nonpayable set the new pair contract also approves the router for the new pair token and underlying token","title":"setPair"},{"location":"developers/contracts/UniswapPCVDeposit/#params_23","text":"Param Type Notes _pair address the new pair","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#token","text":"function token() view returns(address) the address of the non-fei underlying token","title":"token"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_20","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#tribe","text":"function tribe() view returns(address) address of the Tribe contract referenced by Core","title":"tribe"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_21","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#tribebalance","text":"function tribeBalance() view returns(uint256) tribe balance of contract","title":"tribeBalance"},{"location":"developers/contracts/UniswapPCVDeposit/#returns_22","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/UniswapPCVDeposit/#unpause","text":"function unpause() nonpayable set pausable methods to unpaused","title":"unpause"},{"location":"developers/contracts/UniswapPCVDeposit/#updateoracle","text":"function updateOracle() nonpayable updates the referenced oracle","title":"updateOracle"},{"location":"developers/contracts/UniswapPCVDeposit/#withdraw","text":"function withdraw(address,uint256) nonpayable withdraw tokens from the PCV allocation has rounding errors on amount to withdraw, can differ from the input \"amountUnderlying\"","title":"withdraw"},{"location":"developers/contracts/UniswapPCVDeposit/#params_24","text":"Param Type Notes to address the address to send PCV to amountUnderlying uint256 of tokens withdrawn","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#withdrawerc20_1","text":"function withdrawERC20(address,address,uint256) nonpayable withdraw ERC20 from the contract","title":"withdrawERC20"},{"location":"developers/contracts/UniswapPCVDeposit/#params_25","text":"Param Type Notes token address address of the ERC20 to send to address address destination of the ERC20 amount uint256 quantity of ERC20 to send","title":"Params"},{"location":"developers/contracts/UniswapPCVDeposit/#withdraweth_1","text":"function withdrawETH(address,uint256) nonpayable withdraw ETH from the contract","title":"withdrawETH"},{"location":"developers/contracts/UniswapPCVDeposit/#params_26","text":"Param Type Notes to address address to send ETH amountOut uint256 amount of ETH to send \u2b05\ufe0f Contracts","title":"Params"},{"location":"developers/contracts/Unitroller/","text":"\u2b05\ufe0f Contracts Unitroller Methods _acceptAdmin function _acceptAdmin() nonpayable returns(uint256) Returns Param Type Notes uint256 _setBorrowPaused function _setBorrowPaused(address,bool) nonpayable Params Param Type Notes cToken address borrowPaused bool _setCloseFactor function _setCloseFactor(uint256) nonpayable returns(uint256) Params Param Type Notes newCloseFactorMantissa uint256 Returns Param Type Notes uint256 _setCollateralFactor function _setCollateralFactor(address,uint256) nonpayable returns(uint256) Params Param Type Notes cToken address newCollateralFactorMantissa uint256 Returns Param Type Notes uint256 _setLiquidationIncentive function _setLiquidationIncentive(uint256) nonpayable returns(uint256) Params Param Type Notes newLiquidationIncentiveMantissa uint256 Returns Param Type Notes uint256 _setPendingAdmin function _setPendingAdmin(address) nonpayable returns(uint256) Params Param Type Notes newPendingAdmin address Returns Param Type Notes uint256 admin function admin() view returns(address) Returns Param Type Notes address borrowGuardianPaused function borrowGuardianPaused(address) view returns(bool) Params Param Type Notes cToken address Returns Param Type Notes bool closeFactorMantissa function closeFactorMantissa() view returns(uint256) Returns Param Type Notes uint256 comptrollerImplementation function comptrollerImplementation() view returns(address) Returns Param Type Notes address liquidationIncentiveMantissa function liquidationIncentiveMantissa() view returns(uint256) Returns Param Type Notes uint256 markets function markets(address) view returns(bool,uint256) Params Param Type Notes address Returns Param Type Notes isListed bool collateralFactorMantissa uint256 pendingAdmin function pendingAdmin() view returns(address) Returns Param Type Notes address rewardsDistributors function rewardsDistributors(uint256) view returns(address) Params Param Type Notes index uint256 Returns Param Type Notes address \u2b05\ufe0f Contracts","title":"Unitroller"},{"location":"developers/contracts/Unitroller/#unitroller","text":"","title":"Unitroller"},{"location":"developers/contracts/Unitroller/#methods","text":"","title":"Methods"},{"location":"developers/contracts/Unitroller/#_acceptadmin","text":"function _acceptAdmin() nonpayable returns(uint256)","title":"_acceptAdmin"},{"location":"developers/contracts/Unitroller/#returns","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Unitroller/#_setborrowpaused","text":"function _setBorrowPaused(address,bool) nonpayable","title":"_setBorrowPaused"},{"location":"developers/contracts/Unitroller/#params","text":"Param Type Notes cToken address borrowPaused bool","title":"Params"},{"location":"developers/contracts/Unitroller/#_setclosefactor","text":"function _setCloseFactor(uint256) nonpayable returns(uint256)","title":"_setCloseFactor"},{"location":"developers/contracts/Unitroller/#params_1","text":"Param Type Notes newCloseFactorMantissa uint256","title":"Params"},{"location":"developers/contracts/Unitroller/#returns_1","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Unitroller/#_setcollateralfactor","text":"function _setCollateralFactor(address,uint256) nonpayable returns(uint256)","title":"_setCollateralFactor"},{"location":"developers/contracts/Unitroller/#params_2","text":"Param Type Notes cToken address newCollateralFactorMantissa uint256","title":"Params"},{"location":"developers/contracts/Unitroller/#returns_2","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Unitroller/#_setliquidationincentive","text":"function _setLiquidationIncentive(uint256) nonpayable returns(uint256)","title":"_setLiquidationIncentive"},{"location":"developers/contracts/Unitroller/#params_3","text":"Param Type Notes newLiquidationIncentiveMantissa uint256","title":"Params"},{"location":"developers/contracts/Unitroller/#returns_3","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Unitroller/#_setpendingadmin","text":"function _setPendingAdmin(address) nonpayable returns(uint256)","title":"_setPendingAdmin"},{"location":"developers/contracts/Unitroller/#params_4","text":"Param Type Notes newPendingAdmin address","title":"Params"},{"location":"developers/contracts/Unitroller/#returns_4","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Unitroller/#admin","text":"function admin() view returns(address)","title":"admin"},{"location":"developers/contracts/Unitroller/#returns_5","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Unitroller/#borrowguardianpaused","text":"function borrowGuardianPaused(address) view returns(bool)","title":"borrowGuardianPaused"},{"location":"developers/contracts/Unitroller/#params_5","text":"Param Type Notes cToken address","title":"Params"},{"location":"developers/contracts/Unitroller/#returns_6","text":"Param Type Notes bool","title":"Returns"},{"location":"developers/contracts/Unitroller/#closefactormantissa","text":"function closeFactorMantissa() view returns(uint256)","title":"closeFactorMantissa"},{"location":"developers/contracts/Unitroller/#returns_7","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Unitroller/#comptrollerimplementation","text":"function comptrollerImplementation() view returns(address)","title":"comptrollerImplementation"},{"location":"developers/contracts/Unitroller/#returns_8","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Unitroller/#liquidationincentivemantissa","text":"function liquidationIncentiveMantissa() view returns(uint256)","title":"liquidationIncentiveMantissa"},{"location":"developers/contracts/Unitroller/#returns_9","text":"Param Type Notes uint256","title":"Returns"},{"location":"developers/contracts/Unitroller/#markets","text":"function markets(address) view returns(bool,uint256)","title":"markets"},{"location":"developers/contracts/Unitroller/#params_6","text":"Param Type Notes address","title":"Params"},{"location":"developers/contracts/Unitroller/#returns_10","text":"Param Type Notes isListed bool collateralFactorMantissa uint256","title":"Returns"},{"location":"developers/contracts/Unitroller/#pendingadmin","text":"function pendingAdmin() view returns(address)","title":"pendingAdmin"},{"location":"developers/contracts/Unitroller/#returns_11","text":"Param Type Notes address","title":"Returns"},{"location":"developers/contracts/Unitroller/#rewardsdistributors","text":"function rewardsDistributors(uint256) view returns(address)","title":"rewardsDistributors"},{"location":"developers/contracts/Unitroller/#params_7","text":"Param Type Notes index uint256","title":"Params"},{"location":"developers/contracts/Unitroller/#returns_12","text":"Param Type Notes address \u2b05\ufe0f Contracts","title":"Returns"},{"location":"developers/contracts/contracts/","text":"Core Core Fei BalancerLBPSwapper OwnableTimedMinter PCVEquityMinter PCVGuardian ProxyAdmin RatioPCVControllerV2 Tribe TribeMinter Governance FeiDAO FeiDAOTimelock OptimisticTimelock Timelock Peg PCVDripController EthBondingCurve PriceBoundPSM EthReserveStabilizer TribeReserveStabilizer PCV AngleUniswapPCVDeposit BAMMDeposit BalancerPCVDepositWeightedPool ConvexPCVDeposit CurvePCVDepositPlainPool UniswapPCVDeposit EthTokemakPCVDeposit ERC20CompoundPCVDeposit PCVDepositWrapper ERC20PCVDepositWrapper BPTLens PCV_V1 AavePCVDeposit ERC20CompoundPCVDeposit EthCompoundPCVDeposit EthLidoPCVDeposit SnapshotDelegatorPCVDeposit Collateralization CollateralizationOracle CollateralizationOracleGuardian CollateralizationOracleWrapper NamedStaticPCVDepositWrapper Oracle CompositeOracle ChainlinkOracleWrapper ConstantOracle Keeper CollateralizationOracleKeeper Rewards IAaveIncentivesController AutoRewardsDistributor ERC20Dripper RewardsDistributorAdmin StakingTokenWrapper STWBulkHarvest TribalChief TribalChiefSyncV2 VotiumBriber FeiRari Unitroller CErc20Delegator","title":"Protocol Contracts"},{"location":"developers/contracts/contracts/#core","text":"Core Fei BalancerLBPSwapper OwnableTimedMinter PCVEquityMinter PCVGuardian ProxyAdmin RatioPCVControllerV2 Tribe TribeMinter","title":"Core"},{"location":"developers/contracts/contracts/#governance","text":"FeiDAO FeiDAOTimelock OptimisticTimelock Timelock","title":"Governance"},{"location":"developers/contracts/contracts/#peg","text":"PCVDripController EthBondingCurve PriceBoundPSM EthReserveStabilizer TribeReserveStabilizer","title":"Peg"},{"location":"developers/contracts/contracts/#pcv","text":"AngleUniswapPCVDeposit BAMMDeposit BalancerPCVDepositWeightedPool ConvexPCVDeposit CurvePCVDepositPlainPool UniswapPCVDeposit EthTokemakPCVDeposit ERC20CompoundPCVDeposit PCVDepositWrapper ERC20PCVDepositWrapper BPTLens","title":"PCV"},{"location":"developers/contracts/contracts/#pcv_v1","text":"AavePCVDeposit ERC20CompoundPCVDeposit EthCompoundPCVDeposit EthLidoPCVDeposit SnapshotDelegatorPCVDeposit","title":"PCV_V1"},{"location":"developers/contracts/contracts/#collateralization","text":"CollateralizationOracle CollateralizationOracleGuardian CollateralizationOracleWrapper NamedStaticPCVDepositWrapper","title":"Collateralization"},{"location":"developers/contracts/contracts/#oracle","text":"CompositeOracle ChainlinkOracleWrapper ConstantOracle","title":"Oracle"},{"location":"developers/contracts/contracts/#keeper","text":"CollateralizationOracleKeeper","title":"Keeper"},{"location":"developers/contracts/contracts/#rewards","text":"IAaveIncentivesController AutoRewardsDistributor ERC20Dripper RewardsDistributorAdmin StakingTokenWrapper STWBulkHarvest TribalChief TribalChiefSyncV2 VotiumBriber","title":"Rewards"},{"location":"developers/contracts/contracts/#feirari","text":"Unitroller CErc20Delegator","title":"FeiRari"},{"location":"old/SUMMARY/","text":"Table of contents Overview White Paper Audits Bug Bounty User Guides Staking FEI:TRIBE LP Steps for Staking Unstaking FIP-2 FEI Redemption Guide DAO Voting and Delegation Connect Your Wallet Delegate Votes Vote on an Active Proposal Disconnect Your Wallet Protocol Contract Addresses Access Control Core Permissions Fei Stablecoin FEI (Fei USD) UniswapIncentive Protocol Controlled Value EthReserveStabilizer EthPCVDepositAdapter RatioPCVController EthPCVDripper EthUniswapPCVDeposit UniswapPCVDeposit EthUniswapPCVController Bonding Curves EthBondingCurve BondingCurve Trading FeiRouter Oracles BondingCurveOracle UniswapOracle Staking FeiRewardsDistributor FeiStakingRewards Genesis GenesisGroup IDO TimelockedDelegator References/Utils LinearTokenTimelock Timed CoreRef OracleRef UniRef Changelog Governance Fei DAO Tribe Fei Guardian Snapshot Voting","title":"Table of contents"},{"location":"old/SUMMARY/#table-of-contents","text":"Overview White Paper Audits Bug Bounty","title":"Table of contents"},{"location":"old/SUMMARY/#user-guides","text":"Staking FEI:TRIBE LP Steps for Staking Unstaking FIP-2 FEI Redemption Guide DAO Voting and Delegation Connect Your Wallet Delegate Votes Vote on an Active Proposal Disconnect Your Wallet","title":"User Guides"},{"location":"old/SUMMARY/#protocol","text":"Contract Addresses Access Control Core Permissions Fei Stablecoin FEI (Fei USD) UniswapIncentive Protocol Controlled Value EthReserveStabilizer EthPCVDepositAdapter RatioPCVController EthPCVDripper EthUniswapPCVDeposit UniswapPCVDeposit EthUniswapPCVController Bonding Curves EthBondingCurve BondingCurve Trading FeiRouter Oracles BondingCurveOracle UniswapOracle Staking FeiRewardsDistributor FeiStakingRewards Genesis GenesisGroup IDO TimelockedDelegator References/Utils LinearTokenTimelock Timed CoreRef OracleRef UniRef Changelog","title":"Protocol"},{"location":"old/SUMMARY/#governance","text":"Fei DAO Tribe Fei Guardian Snapshot Voting","title":"Governance"},{"location":"old/audit/","text":"Audits OpenZeppelin OpenZeppelin conducted Fei Protocol's primary audit. The audit was performed by 3 auditors over 5 weeks. The final outcome of the report: openzeppelin_audit ConsenSys Diligence ConsenSys audit reviewed the most critical contracts including the Genesis Group and additional contracts that were out of scope for the primary audit. The audit was performed by 3 auditors over 1 week. The final outcome of the report: diligence_audit","title":"Audits"},{"location":"old/audit/#audits","text":"","title":"Audits"},{"location":"old/audit/#openzeppelin","text":"OpenZeppelin conducted Fei Protocol's primary audit. The audit was performed by 3 auditors over 5 weeks. The final outcome of the report: openzeppelin_audit","title":"OpenZeppelin"},{"location":"old/audit/#consensys-diligence","text":"ConsenSys audit reviewed the most critical contracts including the Genesis Group and additional contracts that were out of scope for the primary audit. The audit was performed by 3 auditors over 1 week. The final outcome of the report: diligence_audit","title":"ConsenSys Diligence"},{"location":"old/development-guide/","text":"Development Guide Protocol Development Fei Protocol is controlled by the DAO at launch. The Fei Core Team suggests this workflow for making protocol changes: Introduce idea in #development in Discord Informal discussion in Discord Formal proposal on our forum Snapshot voting on snapshot.page If required, pull request to fei-protocol-core DAO proposal Pull Requests To make a pull request with changes, create a branch with the name format: FIP-<number>-<description> . Members of the Fei Core Team and the growing Fei community should review all proposed changes. Upon review, major features will be considered for audit reviews by our audit partners. Audits can be initiated and sponsored by the Fei Core Team and would enable our contributors to collaborate directly with the best auditors in the space. Ecosystem Development Our goal is to enable as many two-way integrations with other DeFi platforms including lending platforms, derivatives platforms, and AMMs. We expect and encourage the development of community-led bots, tooling, dashboards, and even supporting features directly on Ethereum. Platform integrations should follow respective platform governance procedures and community engagement. The Fei Core Team is excited at the opportunity to collaborate and sponsor community-led integrations with resources and tokens.","title":"Development Guide"},{"location":"old/development-guide/#development-guide","text":"","title":"Development Guide"},{"location":"old/development-guide/#protocol-development","text":"Fei Protocol is controlled by the DAO at launch. The Fei Core Team suggests this workflow for making protocol changes: Introduce idea in #development in Discord Informal discussion in Discord Formal proposal on our forum Snapshot voting on snapshot.page If required, pull request to fei-protocol-core DAO proposal","title":"Protocol Development"},{"location":"old/development-guide/#pull-requests","text":"To make a pull request with changes, create a branch with the name format: FIP-<number>-<description> . Members of the Fei Core Team and the growing Fei community should review all proposed changes. Upon review, major features will be considered for audit reviews by our audit partners. Audits can be initiated and sponsored by the Fei Core Team and would enable our contributors to collaborate directly with the best auditors in the space.","title":"Pull Requests"},{"location":"old/development-guide/#ecosystem-development","text":"Our goal is to enable as many two-way integrations with other DeFi platforms including lending platforms, derivatives platforms, and AMMs. We expect and encourage the development of community-led bots, tooling, dashboards, and even supporting features directly on Ethereum. Platform integrations should follow respective platform governance procedures and community engagement. The Fei Core Team is excited at the opportunity to collaborate and sponsor community-led integrations with resources and tokens.","title":"Ecosystem Development"},{"location":"old/fip-2-fei-redemption-guide/","text":"FIP-2 FEI Redemption Guide If you own FEI and would like to redeem it at $0.95 USD for ETH, you can go to the Fei app Redeem tab . Redemption Steps: Connect your wallet Enter the amount of FEI you would like to redeem and submit transaction Initiate transaction by pressing Redeem button The redemption contract receives a 5000 ETH hourly drip from the 300,000 ETH allocation as long as there is less than 5000 ETH in the redemption contract. {% hint style=\"info\" %} Current amount of ETH in the redemption contract (EthReserveStabilizer): Current ETH Available Balance of ETH redeemable: Total ETH Available {% endhint %} If there is an insufficient amount of ETH in the redemption contract to fully redeem your FEI you will be notified: You can consider a partial redemption or attempt again at a later time. {% hint style=\"info\" %} It is likely that there will be some initial frontrunning of the redemption process. If you don\u2019t want to execute partial redemptions or wait for the redemption contract to refill to the required amount of ETH needed for your complete redemption, you can check Fei app Exchange or secondary markets as an alternative. {% endhint %} ****","title":"FIP-2 FEI Redemption Guide"},{"location":"old/fip-2-fei-redemption-guide/#fip-2-fei-redemption-guide","text":"If you own FEI and would like to redeem it at $0.95 USD for ETH, you can go to the Fei app Redeem tab . Redemption Steps: Connect your wallet Enter the amount of FEI you would like to redeem and submit transaction Initiate transaction by pressing Redeem button The redemption contract receives a 5000 ETH hourly drip from the 300,000 ETH allocation as long as there is less than 5000 ETH in the redemption contract. {% hint style=\"info\" %} Current amount of ETH in the redemption contract (EthReserveStabilizer): Current ETH Available Balance of ETH redeemable: Total ETH Available {% endhint %} If there is an insufficient amount of ETH in the redemption contract to fully redeem your FEI you will be notified: You can consider a partial redemption or attempt again at a later time. {% hint style=\"info\" %} It is likely that there will be some initial frontrunning of the redemption process. If you don\u2019t want to execute partial redemptions or wait for the redemption contract to refill to the required amount of ETH needed for your complete redemption, you can check Fei app Exchange or secondary markets as an alternative. {% endhint %} ****","title":"FIP-2 FEI Redemption Guide"},{"location":"old/testing-guide/","text":"Testing Guide Setup Fei Protocol Core uses the following tools for testing, development, and coverage: Truffle Ganache-cli OpenZeppelin CLI Mocha To install, run npm install Unit Tests There are extensive unit tests covering the protocol code, with the exception of forked and external contracts. To run the unit tests, run npm run test Here is a sample output: {% file src=\"../.gitbook/assets/fei_tests (1).txt\" caption=\"Unit Tests\" %} {% file src=\"../.gitbook/assets/fei_coverage (1).txt\" caption=\"Test Coverage\" %} Integration Tests There are several integration tests which go deeper into various functionality of the protocol, using a mainnet fork and fully deployed and linked contracts. The following configurations need to be in place: create an Alchemy mainnet project and add export MAINNET_ALCHEMY_API_KEY=\"<KEY>\" to your .bashrc or .bash_profile run ganache-cli with mainnet fork: ganache-cli -e 10000000 -g 200000000 -l 8000000 -f https://eth-mainnet.alchemyapi.io/v2/$MAINNET_ALCHEMY_API_KEY@11895000 -i 5777 -p 7545 In a separate terminal, open a truffle console by running truffle console --network ganache In the truffle console, run migrate {% hint style=\"info\" %} Keep ganache-cli and the truffle console running, and execute the following tests within the truffle console {% endhint %} End-to-end To run this test, within the truffle console run exec scripts/test/e2e.js This test will go through all of the main user flows, log some related info and gas price","title":"Testing Guide"},{"location":"old/testing-guide/#testing-guide","text":"","title":"Testing Guide"},{"location":"old/testing-guide/#setup","text":"Fei Protocol Core uses the following tools for testing, development, and coverage: Truffle Ganache-cli OpenZeppelin CLI Mocha To install, run npm install","title":"Setup"},{"location":"old/testing-guide/#unit-tests","text":"There are extensive unit tests covering the protocol code, with the exception of forked and external contracts. To run the unit tests, run npm run test Here is a sample output: {% file src=\"../.gitbook/assets/fei_tests (1).txt\" caption=\"Unit Tests\" %} {% file src=\"../.gitbook/assets/fei_coverage (1).txt\" caption=\"Test Coverage\" %}","title":"Unit Tests"},{"location":"old/testing-guide/#integration-tests","text":"There are several integration tests which go deeper into various functionality of the protocol, using a mainnet fork and fully deployed and linked contracts. The following configurations need to be in place: create an Alchemy mainnet project and add export MAINNET_ALCHEMY_API_KEY=\"<KEY>\" to your .bashrc or .bash_profile run ganache-cli with mainnet fork: ganache-cli -e 10000000 -g 200000000 -l 8000000 -f https://eth-mainnet.alchemyapi.io/v2/$MAINNET_ALCHEMY_API_KEY@11895000 -i 5777 -p 7545 In a separate terminal, open a truffle console by running truffle console --network ganache In the truffle console, run migrate {% hint style=\"info\" %} Keep ganache-cli and the truffle console running, and execute the following tests within the truffle console {% endhint %}","title":"Integration Tests"},{"location":"old/testing-guide/#end-to-end","text":"To run this test, within the truffle console run exec scripts/test/e2e.js This test will go through all of the main user flows, log some related info and gas price","title":"End-to-end"},{"location":"old/whitepaper/","text":"White Paper The Fei Protocol white paper is a static document explaining the concept and inspiration for v1 of the protocol. White Paper: {% embed url=\"https://fei.money/whitepaper\" caption=\"\" %} Changes to the protocol functionality are chronicled in the changelog: {% page-ref page=\"protocol/changelog.md\" %} Features with major functionality changes to the protocol could be published as individual feature white papers or articles as well.","title":"White Paper"},{"location":"old/whitepaper/#white-paper","text":"The Fei Protocol white paper is a static document explaining the concept and inspiration for v1 of the protocol. White Paper: {% embed url=\"https://fei.money/whitepaper\" caption=\"\" %} Changes to the protocol functionality are chronicled in the changelog: {% page-ref page=\"protocol/changelog.md\" %} Features with major functionality changes to the protocol could be published as individual feature white papers or articles as well.","title":"White Paper"},{"location":"old/dao-voting-and-delegation/","text":"DAO Voting and Delegation You can participate in governance through the Fei Protocol governance page through Tally by delegating your voting power or voting on active proposals directly. To access these features, start by connecting your Metamask wallet. {% page-ref page=\"connect-your-wallet.md\" %} {% page-ref page=\"delegate-votes.md\" %} {% page-ref page=\"vote-on-an-active-proposal.md\" %} Steps to disconnect your wallet or change between addresses are shown here. {% page-ref page=\"disconnect-your-wallet.md\" %}","title":"DAO Voting and Delegation"},{"location":"old/dao-voting-and-delegation/#dao-voting-and-delegation","text":"You can participate in governance through the Fei Protocol governance page through Tally by delegating your voting power or voting on active proposals directly. To access these features, start by connecting your Metamask wallet. {% page-ref page=\"connect-your-wallet.md\" %} {% page-ref page=\"delegate-votes.md\" %} {% page-ref page=\"vote-on-an-active-proposal.md\" %} Steps to disconnect your wallet or change between addresses are shown here. {% page-ref page=\"disconnect-your-wallet.md\" %}","title":"DAO Voting and Delegation"},{"location":"old/dao-voting-and-delegation/connect-your-wallet/","text":"Connect Your Wallet From the Fei Protocol Governance page on Tally, select the \"connect wallet\" button in the top right corner. On the pop up window, select the wallet you'd like to connect and click \"next\". Then click \"connect\" to confirm. You can view your connected wallet in the top right corner of the site. Your wallet has been connected successfully, and you can now participate in governance through the Tally app.","title":"Connect Your Wallet"},{"location":"old/dao-voting-and-delegation/connect-your-wallet/#connect-your-wallet","text":"From the Fei Protocol Governance page on Tally, select the \"connect wallet\" button in the top right corner. On the pop up window, select the wallet you'd like to connect and click \"next\". Then click \"connect\" to confirm. You can view your connected wallet in the top right corner of the site. Your wallet has been connected successfully, and you can now participate in governance through the Tally app.","title":"Connect Your Wallet"},{"location":"old/dao-voting-and-delegation/delegate-votes/","text":"Delegate Votes Before getting started, ensure that you have connected your wallet. You can delegate votes to yourself or to another address. This only must be done once. {% hint style=\"warning\" %} Note tokens you own are not active for voting until you delegate. You must delegate to yourself if you wish to vote on proposals directly with your own tokens. {% endhint %} First, navigate to the Fei Protocol governance page: https://www.withtally.com/governance/fei . Delegate to yourself (set up wallet for direct voting): Click on the button to \"delegate to self\". Select \"direct delegation\", and then click the \"delegate\" button. Confirm and sign the transaction via Metamask. Delegate votes to another address: Navigate to the delegate leaderboard at the bottom of the Fei Protocol governance page. If your preferred delegate is not in the top 10 addresses by voting power, click on the \"view all\" link to view additional delegates. Click on the address you'd like to support to view their voter page. Then click on the \"delegate vote\" button on the right hand side. Select \"direct delegation\", and then click the \"delegate\" button. Confirm and sign the transaction via Metamask. Confirm your delegation status: Start by navigating to your address's voter page. If you are among the top 100 addresses by voting power, you can link to your voter page through the \"top voters\" table at the bottom of the governance page. Alternatively, you can view your address's voter page by pasting the following link into your browser with the relevant details. https://www.withtally.com/voter/[your ethereum address]/governance/fei `` Once you've accessed your voter page, review the \"delegating to\" section on the right hand side. If you delegated votes to yourself (set up your address for direct voting), you should see \"self delegation\". If you delegated votes to another address, this section will display a link to that address's voter page.","title":"Delegate Votes"},{"location":"old/dao-voting-and-delegation/delegate-votes/#delegate-votes","text":"Before getting started, ensure that you have connected your wallet. You can delegate votes to yourself or to another address. This only must be done once. {% hint style=\"warning\" %} Note tokens you own are not active for voting until you delegate. You must delegate to yourself if you wish to vote on proposals directly with your own tokens. {% endhint %} First, navigate to the Fei Protocol governance page: https://www.withtally.com/governance/fei .","title":"Delegate Votes"},{"location":"old/dao-voting-and-delegation/delegate-votes/#delegate-to-yourself-set-up-wallet-for-direct-voting","text":"Click on the button to \"delegate to self\". Select \"direct delegation\", and then click the \"delegate\" button. Confirm and sign the transaction via Metamask.","title":"Delegate to yourself (set up wallet for direct voting):"},{"location":"old/dao-voting-and-delegation/delegate-votes/#delegate-votes-to-another-address","text":"Navigate to the delegate leaderboard at the bottom of the Fei Protocol governance page. If your preferred delegate is not in the top 10 addresses by voting power, click on the \"view all\" link to view additional delegates. Click on the address you'd like to support to view their voter page. Then click on the \"delegate vote\" button on the right hand side. Select \"direct delegation\", and then click the \"delegate\" button. Confirm and sign the transaction via Metamask.","title":"Delegate votes to another address:"},{"location":"old/dao-voting-and-delegation/delegate-votes/#confirm-your-delegation-status","text":"Start by navigating to your address's voter page. If you are among the top 100 addresses by voting power, you can link to your voter page through the \"top voters\" table at the bottom of the governance page. Alternatively, you can view your address's voter page by pasting the following link into your browser with the relevant details. https://www.withtally.com/voter/[your ethereum address]/governance/fei `` Once you've accessed your voter page, review the \"delegating to\" section on the right hand side. If you delegated votes to yourself (set up your address for direct voting), you should see \"self delegation\". If you delegated votes to another address, this section will display a link to that address's voter page.","title":"Confirm your delegation status:"},{"location":"old/dao-voting-and-delegation/disconnect-your-wallet/","text":"Disconnect Your Wallet If you wish to disconnect your wallet from Tally, or switch to an alternate wallet address, you can do this through your Metamask extension. Open the extension in your browser, then select the \"connected\" link in the upper left. On the pop up, choose your currently connected wallet and select the option to \"disconnect this account\". You can confirm your wallet has been disconnected by checking the top right corner of the Tally App, which should now show the option to \"connect wallet\".","title":"Disconnect Your Wallet"},{"location":"old/dao-voting-and-delegation/disconnect-your-wallet/#disconnect-your-wallet","text":"If you wish to disconnect your wallet from Tally, or switch to an alternate wallet address, you can do this through your Metamask extension. Open the extension in your browser, then select the \"connected\" link in the upper left. On the pop up, choose your currently connected wallet and select the option to \"disconnect this account\". You can confirm your wallet has been disconnected by checking the top right corner of the Tally App, which should now show the option to \"connect wallet\".","title":"Disconnect Your Wallet"},{"location":"old/dao-voting-and-delegation/vote-on-an-active-proposal/","text":"Vote on an Active Proposal Before getting started, ensure that you have connected your wallet. {% page-ref page=\"connect-your-wallet.md\" %} Also confirm you have voting power delegated to your address. {% hint style=\"warning\" %} Note that tokens you own are not active for voting until you delegate. You must delegate to yourself if you wish to vote on proposals directly with your own tokens. {% endhint %} {% page-ref page=\"delegate-votes.md\" %} How to Vote: Select the active proposal that you'd like to vote on. You can access this from the Fei Protocol Governance page, and then scroll down below the delegate voting power chart. Click on the \"vote\" button in the upper right corner of the page. On the voting pop up, select your preferred option and click the \"submit your vote\" button. Confirm and sign the transaction via Metamask. Confirm your vote status: Start by navigating to your address's voter page. If you are among the top 100 addresses by voting power, you can link to your voter page through the \"top voters\" table at the bottom of the Fei Protocol governance page. Alternatively, you can view your address's voter page by pasting the following link into your browser with the relevant details. https://www.withtally.com/voter/[your ethereum address]/Governance/Fei On your address's voting page, scroll down to the recent vote section. Your most recent vote will be displayed at the top of the table.","title":"Vote on an Active Proposal"},{"location":"old/dao-voting-and-delegation/vote-on-an-active-proposal/#vote-on-an-active-proposal","text":"Before getting started, ensure that you have connected your wallet. {% page-ref page=\"connect-your-wallet.md\" %} Also confirm you have voting power delegated to your address. {% hint style=\"warning\" %} Note that tokens you own are not active for voting until you delegate. You must delegate to yourself if you wish to vote on proposals directly with your own tokens. {% endhint %} {% page-ref page=\"delegate-votes.md\" %}","title":"Vote on an Active Proposal"},{"location":"old/dao-voting-and-delegation/vote-on-an-active-proposal/#how-to-vote","text":"Select the active proposal that you'd like to vote on. You can access this from the Fei Protocol Governance page, and then scroll down below the delegate voting power chart. Click on the \"vote\" button in the upper right corner of the page. On the voting pop up, select your preferred option and click the \"submit your vote\" button. Confirm and sign the transaction via Metamask.","title":"How to Vote:"},{"location":"old/dao-voting-and-delegation/vote-on-an-active-proposal/#confirm-your-vote-status","text":"Start by navigating to your address's voter page. If you are among the top 100 addresses by voting power, you can link to your voter page through the \"top voters\" table at the bottom of the Fei Protocol governance page. Alternatively, you can view your address's voter page by pasting the following link into your browser with the relevant details. https://www.withtally.com/voter/[your ethereum address]/Governance/Fei On your address's voting page, scroll down to the recent vote section. Your most recent vote will be displayed at the top of the table.","title":"Confirm your vote status:"},{"location":"old/governance/fei-dao/","text":"Fei DAO A core principle of Fei Protocol is its fully decentralized design and minimal dependence on any centralized assets or protocols on Ethereum. Fei Protocol has a DAO called the Fei DAO from the start. The DAO is responsible for utilizing all of the flexible and powerful features of Fei Protocol to continually enhance the protocol in an ever-evolving DeFi space. Responsibilities Fei Protocol design and implementation minimize the governance for peg maintenance related activities. Beyond the inherent need for the initial protocol tuning, the Fei DAO is primarily responsible for two things: upgrades and integrations. Parameter tuning and changes that the Fei DAO can make: grant/revoke roles add/remove incentive contracts for FEI exempt addresses from direct incentives Set the peg support incentive growth rate change PCV allocations update bonding curve buffer and Scale target adjust rewards from the staking pool upgrade oracles and other contracts throughout the system Design The Fei DAO is forked from the Compound Governor Alpha and Timelock . Parameter modifications from Compound implementation: 2.5% Quorum .25% proposal threshold 12 hour voting delay (3333 blocks) 36 hour voting period (10000 blocks) 24 hour timelock delay Instead of the COMP token, the Fei DAO is controlled by TRIBE The Guardian can transfer the Guardian role {% embed url=\"https://www.diffchecker.com/kXPkUHOo\" caption=\"Fei DAO vs Compound DAO\" %} Fei Protocol implementation enables a flexible access control system. The Timelock is appointed as a Governor\u2696\ufe0f, but it doesn't have to be the only one. It also doesn't have to be a Governor forever. Fei Protocol can appoint autonomous governors to adjust parameters and PCV based on market conditions. Additionally, a tiered governance structure can be implemented where certain changes require higher quorum thresholds and longer timelocks. Ultimately the Fei DAO makes all of these decisions as the protocol evolves.","title":"Fei DAO"},{"location":"old/governance/fei-dao/#fei-dao","text":"A core principle of Fei Protocol is its fully decentralized design and minimal dependence on any centralized assets or protocols on Ethereum. Fei Protocol has a DAO called the Fei DAO from the start. The DAO is responsible for utilizing all of the flexible and powerful features of Fei Protocol to continually enhance the protocol in an ever-evolving DeFi space.","title":"Fei DAO"},{"location":"old/governance/fei-dao/#responsibilities","text":"Fei Protocol design and implementation minimize the governance for peg maintenance related activities. Beyond the inherent need for the initial protocol tuning, the Fei DAO is primarily responsible for two things: upgrades and integrations. Parameter tuning and changes that the Fei DAO can make: grant/revoke roles add/remove incentive contracts for FEI exempt addresses from direct incentives Set the peg support incentive growth rate change PCV allocations update bonding curve buffer and Scale target adjust rewards from the staking pool upgrade oracles and other contracts throughout the system","title":"Responsibilities"},{"location":"old/governance/fei-dao/#design","text":"The Fei DAO is forked from the Compound Governor Alpha and Timelock . Parameter modifications from Compound implementation: 2.5% Quorum .25% proposal threshold 12 hour voting delay (3333 blocks) 36 hour voting period (10000 blocks) 24 hour timelock delay Instead of the COMP token, the Fei DAO is controlled by TRIBE The Guardian can transfer the Guardian role {% embed url=\"https://www.diffchecker.com/kXPkUHOo\" caption=\"Fei DAO vs Compound DAO\" %} Fei Protocol implementation enables a flexible access control system. The Timelock is appointed as a Governor\u2696\ufe0f, but it doesn't have to be the only one. It also doesn't have to be a Governor forever. Fei Protocol can appoint autonomous governors to adjust parameters and PCV based on market conditions. Additionally, a tiered governance structure can be implemented where certain changes require higher quorum thresholds and longer timelocks. Ultimately the Fei DAO makes all of these decisions as the protocol evolves.","title":"Design"},{"location":"old/governance/fei-guardian/","text":"Fei Guardian The Fei Guardian is the single address to be granted the Guardian\ud83d\udee1role at Genesis. Initially held by the Fei Core Team in a multi-sig, with the intention of either renouncing the role or transitioning to a community held multi-sig within a few months of launch. The rationale for a Guardian is that there could be issues in the protocol which are time sensitive. The minimum 3 day window between a proposal and execution for a fix coming through the Fei DAO could be too long. For instance, if there is a bug in the incentive calculation where an attacker can systematically make a profit, this functionality should be shut down as quickly as possible. The Guardian would step in and revoke the Minter\ud83d\udcb0role from the UniswapIncentive contract. The Guardian can only revoke or pause functionality, with the additional ability to force a reweight. {% hint style=\"info\" %} The Governor\u2696\ufe0f can revoke the Guardian\ud83d\udee1ability at any time {% endhint %} Responsibilities revoke any role from any contract, except Governor\u2696\ufe0f pause and unpause contracts force a reweight Pausability Any contract implementing CoreRef has the ability to be pausable. Any external method marked as pausable would revert when the contract is in the paused state. List of pausable methods by contract: EthBondingCurve allocate() purchase(address to, uint256 amountIn) Pause would prevent both purchasing FEI and allocating PCV from the bonding curve EthUniswapPCVDeposit deposit(uint256 ethAmount) withdraw(uint256 ethAmount) Pause would prevent new PCV from being provided as liquidity to Uniswap or withdrawn EthUniswapPCVController reweight() Pause would prevent external actors from triggering reweights when the criteria are met. {% hint style=\"info\" %} The forceReweight() function would still be available for the Guardian to manually support the peg {% endhint %} Fei burnFrom() mint() Pause would render all Minter\ud83d\udcb0and Burner\ud83d\udd25contracts unable to mint and burn FEI, respectively UniswapOracle read() update() Pause would render all Fei Protocol contracts which rely on this oracle unable to successfully execute function calls BondingCurveOracle read() Pause would render all Fei Protocol contracts which rely on this oracle unable to successfully execute function calls FeiRewardsDistributor drip() Pause would stop any future TRIBE reward distributions to FeiStakingRewards but leave the current reward cycle unchanged.","title":"Fei Guardian"},{"location":"old/governance/fei-guardian/#fei-guardian","text":"The Fei Guardian is the single address to be granted the Guardian\ud83d\udee1role at Genesis. Initially held by the Fei Core Team in a multi-sig, with the intention of either renouncing the role or transitioning to a community held multi-sig within a few months of launch. The rationale for a Guardian is that there could be issues in the protocol which are time sensitive. The minimum 3 day window between a proposal and execution for a fix coming through the Fei DAO could be too long. For instance, if there is a bug in the incentive calculation where an attacker can systematically make a profit, this functionality should be shut down as quickly as possible. The Guardian would step in and revoke the Minter\ud83d\udcb0role from the UniswapIncentive contract. The Guardian can only revoke or pause functionality, with the additional ability to force a reweight. {% hint style=\"info\" %} The Governor\u2696\ufe0f can revoke the Guardian\ud83d\udee1ability at any time {% endhint %}","title":"Fei Guardian"},{"location":"old/governance/fei-guardian/#responsibilities","text":"revoke any role from any contract, except Governor\u2696\ufe0f pause and unpause contracts force a reweight","title":"Responsibilities"},{"location":"old/governance/fei-guardian/#pausability","text":"Any contract implementing CoreRef has the ability to be pausable. Any external method marked as pausable would revert when the contract is in the paused state. List of pausable methods by contract:","title":"Pausability"},{"location":"old/governance/fei-guardian/#ethbondingcurve","text":"allocate() purchase(address to, uint256 amountIn) Pause would prevent both purchasing FEI and allocating PCV from the bonding curve","title":"EthBondingCurve"},{"location":"old/governance/fei-guardian/#ethuniswappcvdeposit","text":"deposit(uint256 ethAmount) withdraw(uint256 ethAmount) Pause would prevent new PCV from being provided as liquidity to Uniswap or withdrawn","title":"EthUniswapPCVDeposit"},{"location":"old/governance/fei-guardian/#ethuniswappcvcontroller","text":"reweight() Pause would prevent external actors from triggering reweights when the criteria are met. {% hint style=\"info\" %} The forceReweight() function would still be available for the Guardian to manually support the peg {% endhint %}","title":"EthUniswapPCVController"},{"location":"old/governance/fei-guardian/#fei","text":"burnFrom() mint() Pause would render all Minter\ud83d\udcb0and Burner\ud83d\udd25contracts unable to mint and burn FEI, respectively","title":"Fei"},{"location":"old/governance/fei-guardian/#uniswaporacle","text":"read() update() Pause would render all Fei Protocol contracts which rely on this oracle unable to successfully execute function calls","title":"UniswapOracle"},{"location":"old/governance/fei-guardian/#bondingcurveoracle","text":"read() Pause would render all Fei Protocol contracts which rely on this oracle unable to successfully execute function calls","title":"BondingCurveOracle"},{"location":"old/governance/fei-guardian/#feirewardsdistributor","text":"drip() Pause would stop any future TRIBE reward distributions to FeiStakingRewards but leave the current reward cycle unchanged.","title":"FeiRewardsDistributor"},{"location":"old/governance/snapshot-voting/","text":"Snapshot Voting What are Snapshot votes? Snapshot voting is a way to vote off-chain without spending any ETH to signal support for a given proposal or path forward for a DAO vote. {% hint style=\"warning\" %} Snapshot votes are NOT binding, all on-chain proposals must pass through the Fei DAO {% endhint %} Snapshot votes can calculate voting power at a certain point in time (block) and customized token balances, including delegations or tokens held in staked LP tokens, for example. How to Vote Head to https://snapshot.fei.money/#/ Click on \u201c Connect wallet \u201d button in top right corner. Connect with wallet provider where you hold TRIBE and/or FEI-TRIBE staked LP tokens Select the active proposal you wish to vote on After reading the proposal, select your preferred choice and \"vote\" Your wallet will prompt you to sign a message, this does not cost any ETH and will submit your vote. How Voting weight is calculated Voting weight is equal to the sum of your delegated, held, and staked TRIBE. For held TRIBE, if it is delegated, then it is not double-counted. The contract used to determine delegated + held balances is here . For staked FEI-TRIBE LP, only the TRIBE portion is counted and the unclaimed TRIBE does not count. How to make a proposal Anyone can make a proposal if their voting weight is more than 1000 TRIBE. Simply follow the snapshot guidelines to do so: https://docs.snapshot.org/proposals/create","title":"Snapshot Voting"},{"location":"old/governance/snapshot-voting/#snapshot-voting","text":"","title":"Snapshot Voting"},{"location":"old/governance/snapshot-voting/#what-are-snapshot-votes","text":"Snapshot voting is a way to vote off-chain without spending any ETH to signal support for a given proposal or path forward for a DAO vote. {% hint style=\"warning\" %} Snapshot votes are NOT binding, all on-chain proposals must pass through the Fei DAO {% endhint %} Snapshot votes can calculate voting power at a certain point in time (block) and customized token balances, including delegations or tokens held in staked LP tokens, for example.","title":"What are Snapshot votes?"},{"location":"old/governance/snapshot-voting/#how-to-vote","text":"Head to https://snapshot.fei.money/#/ Click on \u201c Connect wallet \u201d button in top right corner. Connect with wallet provider where you hold TRIBE and/or FEI-TRIBE staked LP tokens Select the active proposal you wish to vote on After reading the proposal, select your preferred choice and \"vote\" Your wallet will prompt you to sign a message, this does not cost any ETH and will submit your vote.","title":"How to Vote"},{"location":"old/governance/snapshot-voting/#how-voting-weight-is-calculated","text":"Voting weight is equal to the sum of your delegated, held, and staked TRIBE. For held TRIBE, if it is delegated, then it is not double-counted. The contract used to determine delegated + held balances is here . For staked FEI-TRIBE LP, only the TRIBE portion is counted and the unclaimed TRIBE does not count.","title":"How Voting weight is calculated"},{"location":"old/governance/snapshot-voting/#how-to-make-a-proposal","text":"Anyone can make a proposal if their voting weight is more than 1000 TRIBE. Simply follow the snapshot guidelines to do so: https://docs.snapshot.org/proposals/create","title":"How to make a proposal"},{"location":"old/governance/tribe/","text":"Tribe The TRIBE governance token is collectively responsible for managing the Fei DAO . Design TRIBE's total initial supply is 1 billion. The minting capability is controlled by an appointed minter address (this is different from the Minter\ud83d\udcb0 role). The minter is originally set to the Fei DAO Timelock. The code for TRIBE is forked from the Uniswap UNI token . The main difference is that UNI can only inflate 2% per year, whereas TRIBE has uncapped inflation. {% embed url=\"https://www.diffchecker.com/9OUwJBFS\" caption=\"TRIBE vs UNI diff\" %} Distribution The Fei Core team wants TRIBE to have a balanced distribution between Community, Team, and Investors while prioritizing the Community. We embedded both capital favoring and non-capital favoring distribution mechanisms, and emphasize equal opportunity through the Genesis Group. High-level TRIBE distribution: 40% DAO treasury 20% Initial DEX Offering 13% Fei Core Team 10% Genesis Group 10% Staking Rewards 5% Fei Core Team investors 2% Grants Medium announcement provides more details regarding the distribution. {% embed url=\"https://medium.com/fei-protocol/the-tribe-token-distribution-887f26169e44\" caption=\"\" %}","title":"Tribe"},{"location":"old/governance/tribe/#tribe","text":"The TRIBE governance token is collectively responsible for managing the Fei DAO .","title":"Tribe"},{"location":"old/governance/tribe/#design","text":"TRIBE's total initial supply is 1 billion. The minting capability is controlled by an appointed minter address (this is different from the Minter\ud83d\udcb0 role). The minter is originally set to the Fei DAO Timelock. The code for TRIBE is forked from the Uniswap UNI token . The main difference is that UNI can only inflate 2% per year, whereas TRIBE has uncapped inflation. {% embed url=\"https://www.diffchecker.com/9OUwJBFS\" caption=\"TRIBE vs UNI diff\" %}","title":"Design"},{"location":"old/governance/tribe/#distribution","text":"The Fei Core team wants TRIBE to have a balanced distribution between Community, Team, and Investors while prioritizing the Community. We embedded both capital favoring and non-capital favoring distribution mechanisms, and emphasize equal opportunity through the Genesis Group. High-level TRIBE distribution: 40% DAO treasury 20% Initial DEX Offering 13% Fei Core Team 10% Genesis Group 10% Staking Rewards 5% Fei Core Team investors 2% Grants Medium announcement provides more details regarding the distribution. {% embed url=\"https://medium.com/fei-protocol/the-tribe-token-distribution-887f26169e44\" caption=\"\" %}","title":"Distribution"},{"location":"old/protocol/changelog/","text":"Changelog FIP-5: Bonding Curve Allocation Update - May 18, 2021 FIP-5 updates the bonding curve allocation to send funds to the EthReserveStabilizer via the EthPCVDripper instead of to the EthUniswapPCVDeposit as before. It also includes an update to the EthUniswapPCVDeposit where deposits can only occur when the FEI-ETH spot price is within 1% of the oracle price. EthPCVDepositAdapter An adapter contract that allows ETH transfers to conform to the IPCVDeposit interface. {% page-ref page=\"protocol-controlled-value/ethpcvdepositadapter.md\" %} RatioPCVController A PCV controller that allows for withdrawals of a percentage rather than a raw amount of PCV. This is useful for contracts like the EthUniswapPCVDeposit where the ETH amount held varies based on market conditions. {% page-ref page=\"protocol-controlled-value/ratiopcvcontroller.md\" %} The code for these changes can be found here: https://github.com/fei-protocol/fei-protocol-core/pull/98 FIP-2: FEI Redemption and TRIBE Staking Rewards - April 29, 2021 FIP-2 allows FEI redemption at $0.95 and doubles the FEI-TRIBE LP staking rewards EthReserveStabilizer Responsible for exchanging FEI for ETH at $0.95 relative to the UniswapOracle price. Has the Burner\ud83d\udd25role so that approval is not needed to interact with it. ****Receives ETH in 5k batches from the EthPCVDripper every hour. {% page-ref page=\"protocol-controlled-value/ethreservestabilizer.md\" %} EthPCVDripper Drips ETH to the EthReserveStabilizer in 5k increments every hour. The dripper prevents the EthReserveStabilizer from holding more than 10k ETH allowing a smoother and safer release of potentially large amounts of ETH to target contracts. The drip can be called by any address and is not incentivized directly with FEI 300k ETH are sent to the EthPCVDripper from the EthUniswapPCVDeposit {% page-ref page=\"protocol-controlled-value/ethpcvdripper.md\" %} TribeDripper When the FeiRewardsDistributor receives new TRIBE, it allocates an amount proportional to all prior drips to the very first drip, frontloading the distribution. If the 100 million TRIBE are sent directly to the distributor then the following week would have 6x rewards (1x base rewards + 100% boost x 5 drips). To smoothen out the front-loading, the TribeDripper sends the 100 million TRIBE to the FeiRewardsDistributor over 3 weeks using 47m, 31m, and 22m TRIBE respectively. Week 1: 1x base rewards + 47% boost x 5 drips = ~3.35x Week 2: 1.47x base rewards + 31% x 6 drips = ~3.33x Week 3: 1.78x base rewards + 22% x 7 drips = ~3.32x Week 4+: 2x base rewards The TribeDripper is at https://etherscan.io/address/0x65b3Ea26c492de0c2f2D8Abe84eB831796d6eDb1 with an unincentivized function drip() that can be called weekly for 3 drips Pre-Launch - Feb 2021 Guardian\ud83d\udee1Role The Guardian maintains the ability to revoke roles, and pause certain contracts and methods. It can also force reweights. {% page-ref page=\"../governance/fei-guardian.md\" %} Thawing The white paper specification for the Genesis Group doesn\u2019t address the unintended effect that the average price paid is always lower than the \"next price\" which is the price that is listed on Uniswap. This creates a perverse incentive to participate in the Genesis Group to arbitrage the group. To solve this we have implemented \"thawing\" where the list price of FEI/ETH starts at the average genesis price and thaws up to the target peg over 2 weeks. {% page-ref page=\"oracles/\" %} Allocation In the white paper, bonding curve purchases of FEI directly fund (ETH) the PCV. Thanks to a recommendation from Ashwin Ramachandran, we are splitting this allocation to Uniswap into a separate flow available for keepers. This lowers bonding curve purchases to around 100k gas, a 66% reduction, making it cheaper than most Uniswap purchases! These batched transactions are always available and incentivized once a day for 500 FEI. {% page-ref page=\"bondingcurve/\" %} Reweight Reward PCV reweights receive a flat reward in FEI rather than the percentage approach mentioned in the white paper. {% page-ref page=\"protocol-controlled-value/\" %} Escape Genesis In the unlikely event that the GenesisGroup launch function is frozen in a bad state, we\u2019ve added a way to exit back into ETH. This opens 3 days post Genesis. {% page-ref page=\"genesis/\" %} Pre-Swap TRIBE To mitigate frontrunning of TRIBE in the DEX offering, we allow users to pre-swap a portion of their Genesis Group FEI stake to buy TRIBE. This gives users the ability to participate in the very first TRIBE purchase at the best IDO price. {% page-ref page=\"genesis/\" %} IDO Normalization Given that the pre-swap creates a large slippage and back-running opportunity, a trader could arbitrage the group by joining Genesis and pre-swapping 100% of the FEI for TRIBE with the intention of immediately selling back out. We now normalize the IDO price to what the Genesis Group pays including slippage by burning directly from the pool to prevent this backrunning opportunity. {% page-ref page=\"genesis/ido.md\" %} Bonding Curve Shift In the white paper, the bonding curve starts at a 0 price and approaches the peg at the scale target. To achieve lower undercollateralization in the PCV, we\u2019ve added a \u201ck\u201d shift to initiate the bonding curve higher up at an elevated starting price. {% page-ref page=\"bondingcurve/\" %} Sell Disincentive (Burn) Calculation The current implementation integrates the burn function from the white paper with respect to the distance from the peg. {% page-ref page=\"fei-stablecoin/uniswapincentive.md\" %} Router A custom Uniswap router that allows the user to bound their buy rewards or sell penalties when trading on the incentivized uniswap pool. {% page-ref page=\"trading/\" %} White paper - Jan 11, 2021 {% page-ref page=\"../whitepaper.md\" %}","title":"Changelog"},{"location":"old/protocol/changelog/#changelog","text":"","title":"Changelog"},{"location":"old/protocol/changelog/#fip-5-bonding-curve-allocation-update-may-18-2021","text":"FIP-5 updates the bonding curve allocation to send funds to the EthReserveStabilizer via the EthPCVDripper instead of to the EthUniswapPCVDeposit as before. It also includes an update to the EthUniswapPCVDeposit where deposits can only occur when the FEI-ETH spot price is within 1% of the oracle price. EthPCVDepositAdapter An adapter contract that allows ETH transfers to conform to the IPCVDeposit interface. {% page-ref page=\"protocol-controlled-value/ethpcvdepositadapter.md\" %} RatioPCVController A PCV controller that allows for withdrawals of a percentage rather than a raw amount of PCV. This is useful for contracts like the EthUniswapPCVDeposit where the ETH amount held varies based on market conditions. {% page-ref page=\"protocol-controlled-value/ratiopcvcontroller.md\" %} The code for these changes can be found here: https://github.com/fei-protocol/fei-protocol-core/pull/98","title":"FIP-5: Bonding Curve Allocation Update - May 18, 2021"},{"location":"old/protocol/changelog/#fip-2-fei-redemption-and-tribe-staking-rewards-april-29-2021","text":"FIP-2 allows FEI redemption at $0.95 and doubles the FEI-TRIBE LP staking rewards EthReserveStabilizer Responsible for exchanging FEI for ETH at $0.95 relative to the UniswapOracle price. Has the Burner\ud83d\udd25role so that approval is not needed to interact with it. ****Receives ETH in 5k batches from the EthPCVDripper every hour. {% page-ref page=\"protocol-controlled-value/ethreservestabilizer.md\" %}","title":"FIP-2: FEI Redemption and TRIBE Staking Rewards - April 29, 2021"},{"location":"old/protocol/changelog/#ethpcvdripper","text":"Drips ETH to the EthReserveStabilizer in 5k increments every hour. The dripper prevents the EthReserveStabilizer from holding more than 10k ETH allowing a smoother and safer release of potentially large amounts of ETH to target contracts. The drip can be called by any address and is not incentivized directly with FEI 300k ETH are sent to the EthPCVDripper from the EthUniswapPCVDeposit {% page-ref page=\"protocol-controlled-value/ethpcvdripper.md\" %}","title":"EthPCVDripper"},{"location":"old/protocol/changelog/#tribedripper","text":"When the FeiRewardsDistributor receives new TRIBE, it allocates an amount proportional to all prior drips to the very first drip, frontloading the distribution. If the 100 million TRIBE are sent directly to the distributor then the following week would have 6x rewards (1x base rewards + 100% boost x 5 drips). To smoothen out the front-loading, the TribeDripper sends the 100 million TRIBE to the FeiRewardsDistributor over 3 weeks using 47m, 31m, and 22m TRIBE respectively. Week 1: 1x base rewards + 47% boost x 5 drips = ~3.35x Week 2: 1.47x base rewards + 31% x 6 drips = ~3.33x Week 3: 1.78x base rewards + 22% x 7 drips = ~3.32x Week 4+: 2x base rewards The TribeDripper is at https://etherscan.io/address/0x65b3Ea26c492de0c2f2D8Abe84eB831796d6eDb1 with an unincentivized function drip() that can be called weekly for 3 drips","title":"TribeDripper"},{"location":"old/protocol/changelog/#pre-launch-feb-2021","text":"","title":"Pre-Launch - Feb 2021"},{"location":"old/protocol/changelog/#guardianrole","text":"The Guardian maintains the ability to revoke roles, and pause certain contracts and methods. It can also force reweights. {% page-ref page=\"../governance/fei-guardian.md\" %}","title":"Guardian\ud83d\udee1Role"},{"location":"old/protocol/changelog/#thawing","text":"The white paper specification for the Genesis Group doesn\u2019t address the unintended effect that the average price paid is always lower than the \"next price\" which is the price that is listed on Uniswap. This creates a perverse incentive to participate in the Genesis Group to arbitrage the group. To solve this we have implemented \"thawing\" where the list price of FEI/ETH starts at the average genesis price and thaws up to the target peg over 2 weeks. {% page-ref page=\"oracles/\" %}","title":"Thawing"},{"location":"old/protocol/changelog/#allocation","text":"In the white paper, bonding curve purchases of FEI directly fund (ETH) the PCV. Thanks to a recommendation from Ashwin Ramachandran, we are splitting this allocation to Uniswap into a separate flow available for keepers. This lowers bonding curve purchases to around 100k gas, a 66% reduction, making it cheaper than most Uniswap purchases! These batched transactions are always available and incentivized once a day for 500 FEI. {% page-ref page=\"bondingcurve/\" %}","title":"Allocation"},{"location":"old/protocol/changelog/#reweight-reward","text":"PCV reweights receive a flat reward in FEI rather than the percentage approach mentioned in the white paper. {% page-ref page=\"protocol-controlled-value/\" %}","title":"Reweight Reward"},{"location":"old/protocol/changelog/#escape-genesis","text":"In the unlikely event that the GenesisGroup launch function is frozen in a bad state, we\u2019ve added a way to exit back into ETH. This opens 3 days post Genesis. {% page-ref page=\"genesis/\" %}","title":"Escape Genesis"},{"location":"old/protocol/changelog/#pre-swap-tribe","text":"To mitigate frontrunning of TRIBE in the DEX offering, we allow users to pre-swap a portion of their Genesis Group FEI stake to buy TRIBE. This gives users the ability to participate in the very first TRIBE purchase at the best IDO price. {% page-ref page=\"genesis/\" %}","title":"Pre-Swap TRIBE"},{"location":"old/protocol/changelog/#ido-normalization","text":"Given that the pre-swap creates a large slippage and back-running opportunity, a trader could arbitrage the group by joining Genesis and pre-swapping 100% of the FEI for TRIBE with the intention of immediately selling back out. We now normalize the IDO price to what the Genesis Group pays including slippage by burning directly from the pool to prevent this backrunning opportunity. {% page-ref page=\"genesis/ido.md\" %}","title":"IDO Normalization"},{"location":"old/protocol/changelog/#bonding-curve-shift","text":"In the white paper, the bonding curve starts at a 0 price and approaches the peg at the scale target. To achieve lower undercollateralization in the PCV, we\u2019ve added a \u201ck\u201d shift to initiate the bonding curve higher up at an elevated starting price. {% page-ref page=\"bondingcurve/\" %}","title":"Bonding Curve Shift"},{"location":"old/protocol/changelog/#sell-disincentive-burn-calculation","text":"The current implementation integrates the burn function from the white paper with respect to the distance from the peg. {% page-ref page=\"fei-stablecoin/uniswapincentive.md\" %}","title":"Sell Disincentive (Burn) Calculation"},{"location":"old/protocol/changelog/#router","text":"A custom Uniswap router that allows the user to bound their buy rewards or sell penalties when trading on the incentivized uniswap pool. {% page-ref page=\"trading/\" %}","title":"Router"},{"location":"old/protocol/changelog/#white-paper-jan-11-2021","text":"{% page-ref page=\"../whitepaper.md\" %}","title":"White paper - Jan 11, 2021"},{"location":"old/protocol/contract-addresses/","text":"Contract Addresses {% hint style=\"info\" %} The contracts marked with \ud83d\udd04can be changed by governance, which would mean new addresses. {% endhint %} Contract Mainnet Address Core 0x8d5ED43dCa8C2F7dFB20CF7b53CC7E593635d7b9 Tribe 0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B \ud83d\udd04 Fei DAO 0xE087F94c3081e1832dC7a22B48c6f2b5fAaE579B \ud83d\udd04 Fei DAO Timelock 0x639572471f2f318464dc01066a56867130e45E25 Fei 0x956F47F50A910163D8BF957Cf5846D573E7f87CA \ud83d\udd04 UniswapIncentive 0xfe5b6c2a87A976dCe20130c423C679f4d6044cD7 \ud83d\udd04 EthBondingCurve 0xe1578B4a32Eaefcd563a9E6d0dc02a4213f673B7 \ud83d\udd04 EthUniswapPCVDeposit 0x5d6446880fcd004c851ea8920a628c70ca101117 \ud83d\udd04 EthUniswapPCVController 0x7a165F8518A9Ec7d5DA15f4B77B1d7128B5D9188 \ud83d\udd04 UniswapOracle 0x087F35bd241e41Fc28E43f0E8C58d283DD55bD65 \ud83d\udd04 BondingCurveOracle 0x89714d3AC9149426219a3568543200D1964101C4 FeiRewardsDistributor 0xEf1a94AF192A88859EAF3F3D8C1B9705542174C5 FeiStakingRewards 0x18305DaAe09Ea2F4D51fAa33318be5978D251aBd GenesisGroup 0xBFfB152b9392e38CdDc275D818a3Db7FE364596b FeiRouter 0x9271D303b57c204636C38Df0eD339b18Bf98f909 \ud83d\udd04 EthReserveStabilizer 0xa08A721dFB595753FFf335636674D76C455B275C \ud83d\udd04 EthPCVDripper 0xDa079A280FC3e33Eb11A78708B369D5Ca2da54fE \ud83d\udd04 RatioPCVController 0xfC1aD6eb84351597cD3b9B65179633697d65B920 \ud83d\udd04 EthPCVDepositAdapter 0xB72dDeD4Fa321e093E2083B596404A56ffC5b574 External Addresses Contract Mainnet Address FEI-ETH UniV2 Pair 0x94B0A3d511b6EcDb17eBF877278Ab030acb0A878 FEI-TRIBE UniV2 Pair 0x9928e4046d7c6513326cCeA028cD3e7a91c7590A","title":"Contract Addresses"},{"location":"old/protocol/contract-addresses/#contract-addresses","text":"{% hint style=\"info\" %} The contracts marked with \ud83d\udd04can be changed by governance, which would mean new addresses. {% endhint %} Contract Mainnet Address Core 0x8d5ED43dCa8C2F7dFB20CF7b53CC7E593635d7b9 Tribe 0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B \ud83d\udd04 Fei DAO 0xE087F94c3081e1832dC7a22B48c6f2b5fAaE579B \ud83d\udd04 Fei DAO Timelock 0x639572471f2f318464dc01066a56867130e45E25 Fei 0x956F47F50A910163D8BF957Cf5846D573E7f87CA \ud83d\udd04 UniswapIncentive 0xfe5b6c2a87A976dCe20130c423C679f4d6044cD7 \ud83d\udd04 EthBondingCurve 0xe1578B4a32Eaefcd563a9E6d0dc02a4213f673B7 \ud83d\udd04 EthUniswapPCVDeposit 0x5d6446880fcd004c851ea8920a628c70ca101117 \ud83d\udd04 EthUniswapPCVController 0x7a165F8518A9Ec7d5DA15f4B77B1d7128B5D9188 \ud83d\udd04 UniswapOracle 0x087F35bd241e41Fc28E43f0E8C58d283DD55bD65 \ud83d\udd04 BondingCurveOracle 0x89714d3AC9149426219a3568543200D1964101C4 FeiRewardsDistributor 0xEf1a94AF192A88859EAF3F3D8C1B9705542174C5 FeiStakingRewards 0x18305DaAe09Ea2F4D51fAa33318be5978D251aBd GenesisGroup 0xBFfB152b9392e38CdDc275D818a3Db7FE364596b FeiRouter 0x9271D303b57c204636C38Df0eD339b18Bf98f909 \ud83d\udd04 EthReserveStabilizer 0xa08A721dFB595753FFf335636674D76C455B275C \ud83d\udd04 EthPCVDripper 0xDa079A280FC3e33Eb11A78708B369D5Ca2da54fE \ud83d\udd04 RatioPCVController 0xfC1aD6eb84351597cD3b9B65179633697d65B920 \ud83d\udd04 EthPCVDepositAdapter 0xB72dDeD4Fa321e093E2083B596404A56ffC5b574","title":"Contract Addresses"},{"location":"old/protocol/contract-addresses/#external-addresses","text":"Contract Mainnet Address FEI-ETH UniV2 Pair 0x94B0A3d511b6EcDb17eBF877278Ab030acb0A878 FEI-TRIBE UniV2 Pair 0x9928e4046d7c6513326cCeA028cD3e7a91c7590A","title":"External Addresses"},{"location":"old/protocol/access-control/","text":"Access Control Fei Protocol uses access control to define the system's contracts responsibilities. System Roles: Governor \u2696\ufe0f Minter \ud83d\udcb0 Burner \ud83d\udd25 PCV Controller \u2699\ufe0f Guardian \ud83d\udee1\ufe0f The Fei Core contract manages access control. {% page-ref page=\"core.md\" %} Governor \u2696\ufe0f The Governor role is the most powerful role in Fei Protocol. It grants and revokes all other roles in the platform. It manages a multitude of protocol parameters unique to each contract (bonding curve targets, incentive formulas, oracle windows, and more). Implementing Governor as a role and not a single contract grants Fei Protocol flexibility to appoint automated governance contracts or different tiers of governance with varying degrees of difficulty for execution criteria. While the role technically belongs to the Timelock, it is valuable to think of the Fei DAO as the only Governor at launch, since the Fei DAO is the admin of the Timelock. {% page-ref page=\"../../governance/fei-dao.md\" %} Minter \ud83d\udcb0 Minters create (mint) Fei USD and add it to any address. Minting can be a reward for the actions of supporting the peg, or an issuance mechanism for funding PCV on a bonding curve. Minter Examples: {% page-ref page=\"../protocol-controlled-value/ethuniswappcvdeposit.md\" %} {% page-ref page=\"../bondingcurve/ethbondingcurve.md\" %} Burner \ud83d\udd25 Burners remove (burn) portions of Fei USD from any address. Burning occurs as a disincentive for the actions of hurting the peg. Burner Example: {% page-ref page=\"../fei-stablecoin/uniswapincentive.md\" %} PCV Controller \u2699\ufe0f PCV Controllers can move PCV from any contract and redeploy it elsewhere. This is done to reweight the peg, facilitate integrations, or protect against adverse conditions. PCV Controller Example: {% page-ref page=\"../protocol-controlled-value/ethuniswappcvcontroller.md\" %} Guardian \ud83d\udee1\ufe0f The Guardian enables quick feature shutdowns during unforeseen events. It can revoke any role from the above described role types. It can also shut off additional protocol functionality, and force reweights. It cannot manage PCV or mint FEI. {% page-ref page=\"../../governance/fei-guardian.md\" %}","title":"Access Control"},{"location":"old/protocol/access-control/#access-control","text":"Fei Protocol uses access control to define the system's contracts responsibilities. System Roles: Governor \u2696\ufe0f Minter \ud83d\udcb0 Burner \ud83d\udd25 PCV Controller \u2699\ufe0f Guardian \ud83d\udee1\ufe0f The Fei Core contract manages access control. {% page-ref page=\"core.md\" %}","title":"Access Control"},{"location":"old/protocol/access-control/#governor","text":"The Governor role is the most powerful role in Fei Protocol. It grants and revokes all other roles in the platform. It manages a multitude of protocol parameters unique to each contract (bonding curve targets, incentive formulas, oracle windows, and more). Implementing Governor as a role and not a single contract grants Fei Protocol flexibility to appoint automated governance contracts or different tiers of governance with varying degrees of difficulty for execution criteria. While the role technically belongs to the Timelock, it is valuable to think of the Fei DAO as the only Governor at launch, since the Fei DAO is the admin of the Timelock. {% page-ref page=\"../../governance/fei-dao.md\" %}","title":"Governor \u2696\ufe0f"},{"location":"old/protocol/access-control/#minter","text":"Minters create (mint) Fei USD and add it to any address. Minting can be a reward for the actions of supporting the peg, or an issuance mechanism for funding PCV on a bonding curve. Minter Examples: {% page-ref page=\"../protocol-controlled-value/ethuniswappcvdeposit.md\" %} {% page-ref page=\"../bondingcurve/ethbondingcurve.md\" %}","title":"Minter \ud83d\udcb0"},{"location":"old/protocol/access-control/#burner","text":"Burners remove (burn) portions of Fei USD from any address. Burning occurs as a disincentive for the actions of hurting the peg. Burner Example: {% page-ref page=\"../fei-stablecoin/uniswapincentive.md\" %}","title":"Burner \ud83d\udd25"},{"location":"old/protocol/access-control/#pcv-controller","text":"PCV Controllers can move PCV from any contract and redeploy it elsewhere. This is done to reweight the peg, facilitate integrations, or protect against adverse conditions. PCV Controller Example: {% page-ref page=\"../protocol-controlled-value/ethuniswappcvcontroller.md\" %}","title":"PCV Controller \u2699\ufe0f"},{"location":"old/protocol/access-control/#guardian","text":"The Guardian enables quick feature shutdowns during unforeseen events. It can revoke any role from the above described role types. It can also shut off additional protocol functionality, and force reweights. It cannot manage PCV or mint FEI. {% page-ref page=\"../../governance/fei-guardian.md\" %}","title":"Guardian \ud83d\udee1\ufe0f"},{"location":"old/protocol/access-control/core/","text":"Core Contract Core.sol implements ICore , Permissions Description The Core contract responsibilities: Access control Pointing to FEI , TRIBE , and GenesisGroup contracts Stores whether GenesisGroup has completed Escrowing DAO TRIBE treasury The access control module is managed by Permissions. {% page-ref page=\"permissions.md\" %} Most other Fei Protocol contracts should refer to Core by implementing the CoreRef contract. When Core is constructed and initialized it does the following: Set sender as governor Create and reference FEI and TRIBE contracts The governor will then set the genesis group contract. When the genesis group conditions are met, the GenesisGroup contract should complete the genesis group by calling completeGenesisGroup() Access Control Governor \u2696\ufe0f Events {% tabs %} {% tab title=\"FeiUpdate\" %} Governance change of FEI token address type param description address indexed _fei new FEI address {% endtab %} {% tab title=\"TribeUpdate\" %} Governance change of TRIBE token address type param description address indexed _tribe new TRIBE address {% endtab %} {% tab title=\"GenesisGroupUpdate\" %} Governance change of GenesisGroup address type param description address indexed _genesisGroup new Genesis Group address {% endtab %} {% tab title=\"TribeAllocation\" %} Governance deployment of TRIBE tokens from treasury type param description address indexed _to The address to receive TRIBE uint256 _amount The amount of TRIBE distributed {% endtab %} {% tab title=\"GenesisPeriodComplete\" %} Signals completion of Genesis Period and full launch of FEI protocol type param description uint256 _timestamp The block timestamp at Genesis completion {% endtab %} {% endtabs %} Read-Only Functions fei function fei() external view returns (IFei); returns the address of the FEI contract as an interface for consumption tribe function tribe() external view returns (IERC20); returns the address of the TRIBE contract as an interface for consumption genesisGroup function genesisGroup() external view returns (address); returns the address of the GenesisGroup contract hasGenesisGroupCompleted function hasGenesisGroupCompleted() external view returns (bool); returns true if after genesis period and launched, false otherwise Governor-Only\u2696\ufe0f State-Changing Functions setFei function setFei(address token) external; sets the reference FEI contract emits FeiUpdate setTribe function setTribe(address token) external; sets the reference TRIBE contract emits TribeUpdate setGenesisGroup function setGenesisGroup(address _genesisGroup) external; sets the reference GenesisGroup contract to _genesisGroup emits GenesisGroupUpdate allocateTribe function allocateTribe(address to, uint256 amount) external; distribute amount TRIBE from Core to an external address to emits TribeAllocation GenesisGroup-Only\ud83d\ude80 State-Changing Functions completeGenesisGroup function completeGenesisGroup() external; called during Fei Protocol launch to unlock the remaining protocol functionality emits GenesisPeriodComplete {% page-ref page=\"../genesis/genesisgroup.md\" %} ABIs {% file src=\"../../.gitbook/assets/core.json\" caption=\"Core ABI\" %} {% file src=\"../../.gitbook/assets/icore.json\" caption=\"Core Interface ABI\" %}","title":"Core"},{"location":"old/protocol/access-control/core/#core","text":"","title":"Core"},{"location":"old/protocol/access-control/core/#contract","text":"Core.sol implements ICore , Permissions","title":"Contract"},{"location":"old/protocol/access-control/core/#description","text":"The Core contract responsibilities: Access control Pointing to FEI , TRIBE , and GenesisGroup contracts Stores whether GenesisGroup has completed Escrowing DAO TRIBE treasury The access control module is managed by Permissions. {% page-ref page=\"permissions.md\" %} Most other Fei Protocol contracts should refer to Core by implementing the CoreRef contract. When Core is constructed and initialized it does the following: Set sender as governor Create and reference FEI and TRIBE contracts The governor will then set the genesis group contract. When the genesis group conditions are met, the GenesisGroup contract should complete the genesis group by calling completeGenesisGroup()","title":"Description"},{"location":"old/protocol/access-control/core/#access-control","text":"Governor \u2696\ufe0f","title":"Access Control"},{"location":"old/protocol/access-control/core/#events","text":"{% tabs %} {% tab title=\"FeiUpdate\" %} Governance change of FEI token address type param description address indexed _fei new FEI address {% endtab %} {% tab title=\"TribeUpdate\" %} Governance change of TRIBE token address type param description address indexed _tribe new TRIBE address {% endtab %} {% tab title=\"GenesisGroupUpdate\" %} Governance change of GenesisGroup address type param description address indexed _genesisGroup new Genesis Group address {% endtab %} {% tab title=\"TribeAllocation\" %} Governance deployment of TRIBE tokens from treasury type param description address indexed _to The address to receive TRIBE uint256 _amount The amount of TRIBE distributed {% endtab %} {% tab title=\"GenesisPeriodComplete\" %} Signals completion of Genesis Period and full launch of FEI protocol type param description uint256 _timestamp The block timestamp at Genesis completion {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/access-control/core/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/access-control/core/#fei","text":"function fei() external view returns (IFei); returns the address of the FEI contract as an interface for consumption","title":"fei"},{"location":"old/protocol/access-control/core/#tribe","text":"function tribe() external view returns (IERC20); returns the address of the TRIBE contract as an interface for consumption","title":"tribe"},{"location":"old/protocol/access-control/core/#genesisgroup","text":"function genesisGroup() external view returns (address); returns the address of the GenesisGroup contract","title":"genesisGroup"},{"location":"old/protocol/access-control/core/#hasgenesisgroupcompleted","text":"function hasGenesisGroupCompleted() external view returns (bool); returns true if after genesis period and launched, false otherwise","title":"hasGenesisGroupCompleted"},{"location":"old/protocol/access-control/core/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/access-control/core/#setfei","text":"function setFei(address token) external; sets the reference FEI contract emits FeiUpdate","title":"setFei"},{"location":"old/protocol/access-control/core/#settribe","text":"function setTribe(address token) external; sets the reference TRIBE contract emits TribeUpdate","title":"setTribe"},{"location":"old/protocol/access-control/core/#setgenesisgroup","text":"function setGenesisGroup(address _genesisGroup) external; sets the reference GenesisGroup contract to _genesisGroup emits GenesisGroupUpdate","title":"setGenesisGroup"},{"location":"old/protocol/access-control/core/#allocatetribe","text":"function allocateTribe(address to, uint256 amount) external; distribute amount TRIBE from Core to an external address to emits TribeAllocation","title":"allocateTribe"},{"location":"old/protocol/access-control/core/#genesisgroup-only-state-changing-functions","text":"","title":"GenesisGroup-Only\ud83d\ude80 State-Changing Functions"},{"location":"old/protocol/access-control/core/#completegenesisgroup","text":"function completeGenesisGroup() external; called during Fei Protocol launch to unlock the remaining protocol functionality emits GenesisPeriodComplete {% page-ref page=\"../genesis/genesisgroup.md\" %}","title":"completeGenesisGroup"},{"location":"old/protocol/access-control/core/#abis","text":"{% file src=\"../../.gitbook/assets/core.json\" caption=\"Core ABI\" %} {% file src=\"../../.gitbook/assets/icore.json\" caption=\"Core Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/access-control/permissions/","text":"Permissions Contract Permissions.sol implements IPermissions , AccessControl Description The access control module of the Core contract. It maintains which roles exist, role admins, and which addresses have which roles. The contract expands the OpenZeppelin Access Control contract with additional Fei Protocol-specific roles and functionality. {% embed url=\"https://docs.openzeppelin.com/contracts/3.x/api/access#AccessControl\" %} Granting and revoking roles is gated for only Governor \u2696\ufe0f access. The Guardian\ud83d\udee1role can also revoke roles in certain circumstances. Read-Only Functions isBurner function isBurner(address _address) external view returns (bool); returns true if _address has the Burner\ud83d\udd25role isMinter function isMinter(address _address) external view returns (bool); returns true if _address has the Minter\ud83d\udcb0role isGovernor function isGovernor(address _address) external view returns (bool); returns true if _address has the Governor\u2696\ufe0frole isGuardian function isGuardian(address _address) external view returns (bool); returns true if _address has the Guardian\ud83d\udee1role isPCVController function isPCVController(address _address) external view returns (bool); returns true if _address has the PCV Controller\u2699\ufe0frole Governor-Only\u2696\ufe0f State-Changing Functions createRole function createRole(bytes32 role, bytes32 adminRole) external; assigns role role a new admin role adminRole This function can be used either to create a new access control role or reassign an admin for an existing role. grantMinter function grantMinter(address minter) external; assigns Minter\ud83d\udcb0role to minter grantBurner function grantBurner(address burner) external; assigns Burner\ud83d\udd25role to burner grantPCVController function grantPCVController(address pcvController) external; assigns PCV Controller\u2699\ufe0f role to pcvController grantGovernor function grantGovernor(address governor) external; assigns Governor\u2696\ufe0frole to governor grantGuardian function grantGuardian(address guardian) external; assigns Guardian\ud83d\udee1role to guardian revokeMinter function revokeMinter(address minter) external; revokes Minter\ud83d\udcb0role from minter revokeBurner function revokeBurner(address burner) external; revokes Burner\ud83d\udd25role from burner revokePCVController function revokePCVController(address pcvController) external; revokes PCV Controller\u2699\ufe0f role from pcvController revokeGovernor function revokeGovernor(address governor) external; revokes Governor\u2696\ufe0frole from governor revokeGuardian function revokeGuardian(address guardian) external; revokes Guardian\ud83d\udee1role from guardian Guardian-Only\ud83d\udee1State-Changing Functions revokeOverride function revokeOverride(bytes32 role, address account) external; revokes role from account fails if role is equal to Governor\u2696\ufe0f ABIs {% file src=\"../../.gitbook/assets/permissions.json\" caption=\"Permissions ABI\" %} {% file src=\"../../.gitbook/assets/ipermissions.json\" caption=\"Permissions Interface ABI\" %}","title":"Permissions"},{"location":"old/protocol/access-control/permissions/#permissions","text":"","title":"Permissions"},{"location":"old/protocol/access-control/permissions/#contract","text":"Permissions.sol implements IPermissions , AccessControl","title":"Contract"},{"location":"old/protocol/access-control/permissions/#description","text":"The access control module of the Core contract. It maintains which roles exist, role admins, and which addresses have which roles. The contract expands the OpenZeppelin Access Control contract with additional Fei Protocol-specific roles and functionality. {% embed url=\"https://docs.openzeppelin.com/contracts/3.x/api/access#AccessControl\" %} Granting and revoking roles is gated for only Governor \u2696\ufe0f access. The Guardian\ud83d\udee1role can also revoke roles in certain circumstances.","title":"Description"},{"location":"old/protocol/access-control/permissions/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/access-control/permissions/#isburner","text":"function isBurner(address _address) external view returns (bool); returns true if _address has the Burner\ud83d\udd25role","title":"isBurner"},{"location":"old/protocol/access-control/permissions/#isminter","text":"function isMinter(address _address) external view returns (bool); returns true if _address has the Minter\ud83d\udcb0role","title":"isMinter"},{"location":"old/protocol/access-control/permissions/#isgovernor","text":"function isGovernor(address _address) external view returns (bool); returns true if _address has the Governor\u2696\ufe0frole","title":"isGovernor"},{"location":"old/protocol/access-control/permissions/#isguardian","text":"function isGuardian(address _address) external view returns (bool); returns true if _address has the Guardian\ud83d\udee1role","title":"isGuardian"},{"location":"old/protocol/access-control/permissions/#ispcvcontroller","text":"function isPCVController(address _address) external view returns (bool); returns true if _address has the PCV Controller\u2699\ufe0frole","title":"isPCVController"},{"location":"old/protocol/access-control/permissions/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/access-control/permissions/#createrole","text":"function createRole(bytes32 role, bytes32 adminRole) external; assigns role role a new admin role adminRole This function can be used either to create a new access control role or reassign an admin for an existing role.","title":"createRole"},{"location":"old/protocol/access-control/permissions/#grantminter","text":"function grantMinter(address minter) external; assigns Minter\ud83d\udcb0role to minter","title":"grantMinter"},{"location":"old/protocol/access-control/permissions/#grantburner","text":"function grantBurner(address burner) external; assigns Burner\ud83d\udd25role to burner","title":"grantBurner"},{"location":"old/protocol/access-control/permissions/#grantpcvcontroller","text":"function grantPCVController(address pcvController) external; assigns PCV Controller\u2699\ufe0f role to pcvController","title":"grantPCVController"},{"location":"old/protocol/access-control/permissions/#grantgovernor","text":"function grantGovernor(address governor) external; assigns Governor\u2696\ufe0frole to governor","title":"grantGovernor"},{"location":"old/protocol/access-control/permissions/#grantguardian","text":"function grantGuardian(address guardian) external; assigns Guardian\ud83d\udee1role to guardian","title":"grantGuardian"},{"location":"old/protocol/access-control/permissions/#revokeminter","text":"function revokeMinter(address minter) external; revokes Minter\ud83d\udcb0role from minter","title":"revokeMinter"},{"location":"old/protocol/access-control/permissions/#revokeburner","text":"function revokeBurner(address burner) external; revokes Burner\ud83d\udd25role from burner","title":"revokeBurner"},{"location":"old/protocol/access-control/permissions/#revokepcvcontroller","text":"function revokePCVController(address pcvController) external; revokes PCV Controller\u2699\ufe0f role from pcvController","title":"revokePCVController"},{"location":"old/protocol/access-control/permissions/#revokegovernor","text":"function revokeGovernor(address governor) external; revokes Governor\u2696\ufe0frole from governor","title":"revokeGovernor"},{"location":"old/protocol/access-control/permissions/#revokeguardian","text":"function revokeGuardian(address guardian) external; revokes Guardian\ud83d\udee1role from guardian","title":"revokeGuardian"},{"location":"old/protocol/access-control/permissions/#guardian-onlystate-changing-functions","text":"","title":"Guardian-Only\ud83d\udee1State-Changing Functions"},{"location":"old/protocol/access-control/permissions/#revokeoverride","text":"function revokeOverride(bytes32 role, address account) external; revokes role from account fails if role is equal to Governor\u2696\ufe0f","title":"revokeOverride"},{"location":"old/protocol/access-control/permissions/#abis","text":"{% file src=\"../../.gitbook/assets/permissions.json\" caption=\"Permissions ABI\" %} {% file src=\"../../.gitbook/assets/ipermissions.json\" caption=\"Permissions Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/bondingcurve/","text":"Bonding Curves Bonding Curves Bonding curves are price functions for a token that generally involve the token being minted by the bonding curve in exchange for an underlying asset. They can take in the current circulating supply as a parameter in the formula. They are generally monotonically increasing, facilitating greater incentives for early adopters. When coupled with a smart contract, bonding curves can escrow, buy and sell tokens in accordance with the price function. The contract can take fees for buying and selling as a fundraising mechanism for Protocol Controlled Value . Article by Linum Labs with more details: {% embed url=\"https://medium.com/linum-labs/intro-to-bonding-curves-and-shapes-bf326bc4e11a\" %} Fei Protocol Bonding Curves Fei Protocol's primary issuance mechanism for FEI are bonding curves. These bonding curves can have any parameterization but should follow this pattern: Use a curve with a desirable growth rate Have a \"shift\" that determines the starting price Have a \"Scale\" target at which the curve switches to fixed relative to the oracle peg Have a \"buffer\" which is a percentage premium above the peg that the curve trades at post-Scale {% hint style=\"success\" %} The Fei Core Team feels strongly that Fei Protocol should only issue bonding curves denominated in decentralized tokens {% endhint %} Fei Protocol bonding curves have unique features. They are buy-only, meaning that purchasers must go elsewhere to sell their FEI. The Fei Protocol prioritizes PCV liquidity with the assets it receives from the curve. Additionally, the price function of a bonding curve is not based on the total circulating supply of FEI but only based on the amount of FEI purchased on that specific bonding curve. Fei Protocol is launching with a single, ETH denominated bonding curve with plans for more as the protocol scales.","title":"Bonding Curves"},{"location":"old/protocol/bondingcurve/#bonding-curves","text":"","title":"Bonding Curves"},{"location":"old/protocol/bondingcurve/#bonding-curves_1","text":"Bonding curves are price functions for a token that generally involve the token being minted by the bonding curve in exchange for an underlying asset. They can take in the current circulating supply as a parameter in the formula. They are generally monotonically increasing, facilitating greater incentives for early adopters. When coupled with a smart contract, bonding curves can escrow, buy and sell tokens in accordance with the price function. The contract can take fees for buying and selling as a fundraising mechanism for Protocol Controlled Value . Article by Linum Labs with more details: {% embed url=\"https://medium.com/linum-labs/intro-to-bonding-curves-and-shapes-bf326bc4e11a\" %}","title":"Bonding Curves"},{"location":"old/protocol/bondingcurve/#fei-protocol-bonding-curves","text":"Fei Protocol's primary issuance mechanism for FEI are bonding curves. These bonding curves can have any parameterization but should follow this pattern: Use a curve with a desirable growth rate Have a \"shift\" that determines the starting price Have a \"Scale\" target at which the curve switches to fixed relative to the oracle peg Have a \"buffer\" which is a percentage premium above the peg that the curve trades at post-Scale {% hint style=\"success\" %} The Fei Core Team feels strongly that Fei Protocol should only issue bonding curves denominated in decentralized tokens {% endhint %} Fei Protocol bonding curves have unique features. They are buy-only, meaning that purchasers must go elsewhere to sell their FEI. The Fei Protocol prioritizes PCV liquidity with the assets it receives from the curve. Additionally, the price function of a bonding curve is not based on the total circulating supply of FEI but only based on the amount of FEI purchased on that specific bonding curve. Fei Protocol is launching with a single, ETH denominated bonding curve with plans for more as the protocol scales.","title":"Fei Protocol Bonding Curves"},{"location":"old/protocol/bondingcurve/bondingcurve/","text":"BondingCurve Contract BondingCurve.sol implements IBondingCurve , OracleRef , PCVSplitter Description An abstract bonding curve for purchasing FEI and routing of the purchased asset to PCV. The amount of PCV it takes in a purchase transaction to bring the curve to a total amount of FEI issued T is determined by integrating the price function between the current FEI amount issued C by the bonding curve and the target amount T after the transaction. The quantity T-C is the amount of FEI received by the transaction. Since C is a known constant, we solve for T by setting the formula equal to a PCV purchase quantity Q and rearranging terms. Post scale, the price should be $1 + b times the peg, where b is the variance buffer and the peg is reported as X per FEI. In the implementation, we use $1 - b because the peg is inverted so the price relationship is also inverted. Allocation Incoming PCV is held temporarily to allow for batch transactions via the allocate() function. The PCV allocation gets split into a weighted list of PCV deposit contracts, (see PCVSplitter ). While allocations can be called at any time, there is a 500 FEI incentive for calling it after each 24 hour window. To determine eligibility for the incentive, simply call isTimeEnded() on the contract. The time until the next incentive is available is remainingTime() . {% page-ref page=\"../references/timed.md\" %} Access Control Minter\ud83d\udcb0 Events {% tabs %} {% tab title=\"Purchase\" %} Purchase of FEI on bonding curve type param description address indexed _to recipient of FEI uint256 _amountIn amount of purchase asset uint256 _amountOut amount of FEI {% endtab %} {% tab title=\"Allocate\" %} Allocate held PCV type param description address indexed _caller the sender of the allocation transaction uint256 _amount the amount of PCV allocated {% endtab %} {% tab title=\"ScaleUpdate\" %} Governance change of Scale target type param description uint256 _scale new Scale target {% endtab %} {% tab title=\"BufferUpdate\" %} Governance change of Buffer type param description uint256 _buffer new buffer {% endtab %} {% tab title=\"IncentiveAmountUpdate\" %} Changes the FEI reward for calling allocate() type param description uint256 _incentiveAmount new incentive amount {% endtab %} {% endtabs %} Read-Only Functions getCurrentPrice function getCurrentPrice() external view returns (Decimal.D256 memory); Returns current instantaneous bonding curve price. The price reported as FEI per X, with X being the underlying asset. This is analogous to the peg reported by the oracle. {% page-ref page=\"../oracles/\" %} {% hint style=\"warning\" %} Can be inaccurate if outdated, need to call oracle().isOutdated() to check {% endhint %} getAverageUSDPrice function getAverageUSDPrice(uint256 amountIn) external view returns (Decimal.D256 memory); Returns the average price of a transaction of size amountIn ETH along bonding curve. The price here is reported as USD per FEI. {% hint style=\"warning\" %} Can be inaccurate if outdated, need to call oracle().isOutdated() to check {% endhint %} getAmountOut function getAmountOut(uint256 amountIn) external view returns (uint256 amountOut); Returns the amount amountOut of FEI received for a purchase of amountIn ETH. {% hint style=\"warning\" %} Can be inaccurate if outdated, need to call oracle().isOutdated() to check {% endhint %} scale function scale() external view returns (uint256); The target totalPurchased after which the bonding curve price switches to a fixed premium on the peg. atScale function atScale() external view returns (bool); Returns true when totalPurchased() is greater than scale() buffer function buffer() external view returns (uint256); The multiplier applied to the peg price when post-Scale. BUFFER_GRANULARITY function BUFFER_GRANULARITY() external view returns (uint256); The granularity of the buffer. Constant at 10,000. totalPurchased function totalPurchased() external view returns (uint256); Returns the cumulative amount of FEI issued via the bonding curve. Used in the bonding curve formula as the supply amount. getTotalPCVHeld function getTotalPCVHeld() external view returns (uint256); Returns the amount of PCV held in the contract and ready for allocation. incentiveAmount function incentiveAmount() external view returns (uint256); Returns the amount of FEI sent to the keeper who calls allocate() while the incentive is active. Public State-Changing Functions purchase function purchase(address to, uint256 amountIn) external payable returns (uint256 amountOut); Purchase amountOut FEI along the bonding curve for amountIn ETH and send the FEI to address to . emits Purchase {% hint style=\"info\" %} This method is pausable {% endhint %} EOA-Only \ud83d\udc64 State-Changing Functions allocate function allocate() external; Allocate the PCV held by the bonding curve to the weighted PCV allocations returned by getAllocation() . emits Allocate {% hint style=\"info\" %} This method is pausable {% endhint %} Governor-Only \u2696\ufe0f State-Changing Functions setBuffer function setBuffer(uint256 _buffer) external; Sets the buffer to _buffer . Must be less than BUFFER_GRANULARITY emits BufferUpdate setScale function setScale(uint256 _scale) external; Sets the Scale target to _scale emits ScaleUpdate setIncentiveAmount function setIncentiveAmount(uint256 _incentiveAmount) external; Sets the incentiveAmount to _incentiveAmount emits IncentiveAmountUpdate setIncentiveFrequency function setIncentiveFrequency(uint256 _frequency) external; Sets the Timed duration to _frequency emits DurationUpdate setAllocation function setAllocation( address[] calldata pcvDeposits, uint256[] calldata ratios ) external; Sets the PCV allocation to pcvDeposits with weights ratios . The ratios must sum to ALLOCATION_GRANULARITY which is constant at 10,000. ABIs {% file src=\"../../.gitbook/assets/bondingcurve.json\" caption=\"BondingCurve ABI\" %} {% file src=\"../../.gitbook/assets/ibondingcurve.json\" caption=\"BondingCurve Interface ABI\" %}","title":"BondingCurve"},{"location":"old/protocol/bondingcurve/bondingcurve/#bondingcurve","text":"","title":"BondingCurve"},{"location":"old/protocol/bondingcurve/bondingcurve/#contract","text":"BondingCurve.sol implements IBondingCurve , OracleRef , PCVSplitter","title":"Contract"},{"location":"old/protocol/bondingcurve/bondingcurve/#description","text":"An abstract bonding curve for purchasing FEI and routing of the purchased asset to PCV. The amount of PCV it takes in a purchase transaction to bring the curve to a total amount of FEI issued T is determined by integrating the price function between the current FEI amount issued C by the bonding curve and the target amount T after the transaction. The quantity T-C is the amount of FEI received by the transaction. Since C is a known constant, we solve for T by setting the formula equal to a PCV purchase quantity Q and rearranging terms. Post scale, the price should be $1 + b times the peg, where b is the variance buffer and the peg is reported as X per FEI. In the implementation, we use $1 - b because the peg is inverted so the price relationship is also inverted.","title":"Description"},{"location":"old/protocol/bondingcurve/bondingcurve/#allocation","text":"Incoming PCV is held temporarily to allow for batch transactions via the allocate() function. The PCV allocation gets split into a weighted list of PCV deposit contracts, (see PCVSplitter ). While allocations can be called at any time, there is a 500 FEI incentive for calling it after each 24 hour window. To determine eligibility for the incentive, simply call isTimeEnded() on the contract. The time until the next incentive is available is remainingTime() . {% page-ref page=\"../references/timed.md\" %}","title":"Allocation"},{"location":"old/protocol/bondingcurve/bondingcurve/#access-control","text":"Minter\ud83d\udcb0","title":"Access Control"},{"location":"old/protocol/bondingcurve/bondingcurve/#events","text":"{% tabs %} {% tab title=\"Purchase\" %} Purchase of FEI on bonding curve type param description address indexed _to recipient of FEI uint256 _amountIn amount of purchase asset uint256 _amountOut amount of FEI {% endtab %} {% tab title=\"Allocate\" %} Allocate held PCV type param description address indexed _caller the sender of the allocation transaction uint256 _amount the amount of PCV allocated {% endtab %} {% tab title=\"ScaleUpdate\" %} Governance change of Scale target type param description uint256 _scale new Scale target {% endtab %} {% tab title=\"BufferUpdate\" %} Governance change of Buffer type param description uint256 _buffer new buffer {% endtab %} {% tab title=\"IncentiveAmountUpdate\" %} Changes the FEI reward for calling allocate() type param description uint256 _incentiveAmount new incentive amount {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/bondingcurve/bondingcurve/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/bondingcurve/bondingcurve/#getcurrentprice","text":"function getCurrentPrice() external view returns (Decimal.D256 memory); Returns current instantaneous bonding curve price. The price reported as FEI per X, with X being the underlying asset. This is analogous to the peg reported by the oracle. {% page-ref page=\"../oracles/\" %} {% hint style=\"warning\" %} Can be inaccurate if outdated, need to call oracle().isOutdated() to check {% endhint %}","title":"getCurrentPrice"},{"location":"old/protocol/bondingcurve/bondingcurve/#getaverageusdprice","text":"function getAverageUSDPrice(uint256 amountIn) external view returns (Decimal.D256 memory); Returns the average price of a transaction of size amountIn ETH along bonding curve. The price here is reported as USD per FEI. {% hint style=\"warning\" %} Can be inaccurate if outdated, need to call oracle().isOutdated() to check {% endhint %}","title":"getAverageUSDPrice"},{"location":"old/protocol/bondingcurve/bondingcurve/#getamountout","text":"function getAmountOut(uint256 amountIn) external view returns (uint256 amountOut); Returns the amount amountOut of FEI received for a purchase of amountIn ETH. {% hint style=\"warning\" %} Can be inaccurate if outdated, need to call oracle().isOutdated() to check {% endhint %}","title":"getAmountOut"},{"location":"old/protocol/bondingcurve/bondingcurve/#scale","text":"function scale() external view returns (uint256); The target totalPurchased after which the bonding curve price switches to a fixed premium on the peg.","title":"scale"},{"location":"old/protocol/bondingcurve/bondingcurve/#atscale","text":"function atScale() external view returns (bool); Returns true when totalPurchased() is greater than scale()","title":"atScale"},{"location":"old/protocol/bondingcurve/bondingcurve/#buffer","text":"function buffer() external view returns (uint256); The multiplier applied to the peg price when post-Scale.","title":"buffer"},{"location":"old/protocol/bondingcurve/bondingcurve/#buffer_granularity","text":"function BUFFER_GRANULARITY() external view returns (uint256); The granularity of the buffer. Constant at 10,000.","title":"BUFFER_GRANULARITY"},{"location":"old/protocol/bondingcurve/bondingcurve/#totalpurchased","text":"function totalPurchased() external view returns (uint256); Returns the cumulative amount of FEI issued via the bonding curve. Used in the bonding curve formula as the supply amount.","title":"totalPurchased"},{"location":"old/protocol/bondingcurve/bondingcurve/#gettotalpcvheld","text":"function getTotalPCVHeld() external view returns (uint256); Returns the amount of PCV held in the contract and ready for allocation.","title":"getTotalPCVHeld"},{"location":"old/protocol/bondingcurve/bondingcurve/#incentiveamount","text":"function incentiveAmount() external view returns (uint256); Returns the amount of FEI sent to the keeper who calls allocate() while the incentive is active.","title":"incentiveAmount"},{"location":"old/protocol/bondingcurve/bondingcurve/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/bondingcurve/bondingcurve/#purchase","text":"function purchase(address to, uint256 amountIn) external payable returns (uint256 amountOut); Purchase amountOut FEI along the bonding curve for amountIn ETH and send the FEI to address to . emits Purchase {% hint style=\"info\" %} This method is pausable {% endhint %}","title":"purchase"},{"location":"old/protocol/bondingcurve/bondingcurve/#eoa-only-state-changing-functions","text":"","title":"EOA-Only \ud83d\udc64 State-Changing Functions"},{"location":"old/protocol/bondingcurve/bondingcurve/#allocate","text":"function allocate() external; Allocate the PCV held by the bonding curve to the weighted PCV allocations returned by getAllocation() . emits Allocate {% hint style=\"info\" %} This method is pausable {% endhint %}","title":"allocate"},{"location":"old/protocol/bondingcurve/bondingcurve/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/bondingcurve/bondingcurve/#setbuffer","text":"function setBuffer(uint256 _buffer) external; Sets the buffer to _buffer . Must be less than BUFFER_GRANULARITY emits BufferUpdate","title":"setBuffer"},{"location":"old/protocol/bondingcurve/bondingcurve/#setscale","text":"function setScale(uint256 _scale) external; Sets the Scale target to _scale emits ScaleUpdate","title":"setScale"},{"location":"old/protocol/bondingcurve/bondingcurve/#setincentiveamount","text":"function setIncentiveAmount(uint256 _incentiveAmount) external; Sets the incentiveAmount to _incentiveAmount emits IncentiveAmountUpdate","title":"setIncentiveAmount"},{"location":"old/protocol/bondingcurve/bondingcurve/#setincentivefrequency","text":"function setIncentiveFrequency(uint256 _frequency) external; Sets the Timed duration to _frequency emits DurationUpdate","title":"setIncentiveFrequency"},{"location":"old/protocol/bondingcurve/bondingcurve/#setallocation","text":"function setAllocation( address[] calldata pcvDeposits, uint256[] calldata ratios ) external; Sets the PCV allocation to pcvDeposits with weights ratios . The ratios must sum to ALLOCATION_GRANULARITY which is constant at 10,000.","title":"setAllocation"},{"location":"old/protocol/bondingcurve/bondingcurve/#abis","text":"{% file src=\"../../.gitbook/assets/bondingcurve.json\" caption=\"BondingCurve ABI\" %} {% file src=\"../../.gitbook/assets/ibondingcurve.json\" caption=\"BondingCurve Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/bondingcurve/ethbondingcurve/","text":"EthBondingCurve Contract EthBondingCurve.sol implements BondingCurve Description A bonding curve implementation for purchasing FEI with ETH. The price function used is: x - the current amount of FEI issued from the bonding curve S - the Scale target O - the oracle price reported as underlying per FEI The \"k\" shift is an additional feature since the white paper release. It shifts the starting price upward so the protocol can retain more PCV . k is initially set to S/3 which makes the starting price $0.50 per FEI. The amount of FEI out for a given quantity of ETH input Q is equal to the following: y is the cumulative amount of FEI sold by the bonding curve after the trade and C is the current cumulative, so their difference is the amount sent to the user. The Scale target is 100,000,000 FEI. \u200c Post-Scale, the Bonding curve sets the exchange rate at $1 + b, where b is a buffer. The buffer is initially set to 1% to allow for variance above $1. Governance can vote to converge b to 0 as the liquidity increases and volatility decreases. The oracle used is the UniswapOracle . Access Control Minter\ud83d\udcb0 ABIs {% file src=\"../../.gitbook/assets/ethbondingcurve.json\" caption=\"EthBondingCurve ABI\" %}","title":"EthBondingCurve"},{"location":"old/protocol/bondingcurve/ethbondingcurve/#ethbondingcurve","text":"","title":"EthBondingCurve"},{"location":"old/protocol/bondingcurve/ethbondingcurve/#contract","text":"EthBondingCurve.sol implements BondingCurve","title":"Contract"},{"location":"old/protocol/bondingcurve/ethbondingcurve/#description","text":"A bonding curve implementation for purchasing FEI with ETH. The price function used is: x - the current amount of FEI issued from the bonding curve S - the Scale target O - the oracle price reported as underlying per FEI The \"k\" shift is an additional feature since the white paper release. It shifts the starting price upward so the protocol can retain more PCV . k is initially set to S/3 which makes the starting price $0.50 per FEI. The amount of FEI out for a given quantity of ETH input Q is equal to the following: y is the cumulative amount of FEI sold by the bonding curve after the trade and C is the current cumulative, so their difference is the amount sent to the user. The Scale target is 100,000,000 FEI. \u200c Post-Scale, the Bonding curve sets the exchange rate at $1 + b, where b is a buffer. The buffer is initially set to 1% to allow for variance above $1. Governance can vote to converge b to 0 as the liquidity increases and volatility decreases. The oracle used is the UniswapOracle .","title":"Description"},{"location":"old/protocol/bondingcurve/ethbondingcurve/#access-control","text":"Minter\ud83d\udcb0","title":"Access Control"},{"location":"old/protocol/bondingcurve/ethbondingcurve/#abis","text":"{% file src=\"../../.gitbook/assets/ethbondingcurve.json\" caption=\"EthBondingCurve ABI\" %}","title":"ABIs"},{"location":"old/protocol/fei-stablecoin/","text":"Fei Stablecoin Design FEI (Fei USD) is designed to allow for flexible upgrades and arbitrary incentive mechanisms to support the $1 peg target. Its issuance is controlled by the Minter\ud83d\udcb0role, and any contract with this role can mint FEI to any address. The Burner\ud83d\udd25 role can burn FEI from any address, and is utilized for deflation and disincentives. Direct Incentives Fei Protocol uses the Direct Incentive approach to peg stability. This means that user actions can lead to a mint or burn of FEI from their wallet. The magnitude and direction of the incentive is based on the action taken and the market conditions at the time. The Direct Incentives are applied only when interacting with an incentivized address . When FEI is transferred to or from an __incentivized address, the corresponding incentive contract is called, which is either a Minter\ud83d\udcb0, a Burner\ud83d\udd25, or both. The only incentivized address at launch is the ETH/FEI Uniswap v2 Pair and its incentive contract is UniswapIncentive . The Governor\u2696\ufe0f can set and unset incentive contracts for any address. It can also exempt addresses from incentives. Inclusive Fee On Transfer Fees applied to incentivized trading or transfers can be either inclusive or exclusive. The inclusive fees are more commonly utilized in DeFi. Inclusive fees are applied \"in-flight\", meaning that the fee is extracted from the transfer or the trade amount itself. Exclusive fees are applied on top of the transfer or trade amount itself. The exclusive fee is commonly applied to the party initiating the transaction. Fei Protocol v1 uses an \"inclusive\" fee on transfers when applying Direct Incentives on Uniswap sells. There are certain considerations with this approach, the main one being that Fei Protocol cannot differentiate between selling and liquidity provision. Therefore the fee applies to all FEI transfers to the pool including providing LP. {% hint style=\"warning\" %} LPing the FEI/ETH Uniswap pool also incurs a burn penalty, because it transfers FEI into the pool like a sell would {% endhint %} Collateralization The FEI stablecoin is collateralized by a PCV reserve. Fei Protocol prioritizes liquidity when deploying this reserve to make sure users are able to trade FEI at high volume. Critically, FEI can be over- or under-collateralized depending on volatility on the PCV and other market conditions. The collateralization ratio of FEI at any time is calculated as follows, with the denominator being \"User controlled FEI\": The formula ignores \"Protocol controlled FEI\" because any FEI that the protocol holds will never be sold for PCV, only burned. Protocol controlled FEI can have second-order, short-term inflationary effects. For instance, FEI deposited into a lending market by Fei Protocol could increase the circulating supply when borrowed. The interest accrued and eventual withdrawal of that FEI ultimately have a net deflationary effect in the long term.","title":"Fei Stablecoin"},{"location":"old/protocol/fei-stablecoin/#fei-stablecoin","text":"","title":"Fei Stablecoin"},{"location":"old/protocol/fei-stablecoin/#design","text":"FEI (Fei USD) is designed to allow for flexible upgrades and arbitrary incentive mechanisms to support the $1 peg target. Its issuance is controlled by the Minter\ud83d\udcb0role, and any contract with this role can mint FEI to any address. The Burner\ud83d\udd25 role can burn FEI from any address, and is utilized for deflation and disincentives.","title":"Design"},{"location":"old/protocol/fei-stablecoin/#direct-incentives","text":"Fei Protocol uses the Direct Incentive approach to peg stability. This means that user actions can lead to a mint or burn of FEI from their wallet. The magnitude and direction of the incentive is based on the action taken and the market conditions at the time. The Direct Incentives are applied only when interacting with an incentivized address . When FEI is transferred to or from an __incentivized address, the corresponding incentive contract is called, which is either a Minter\ud83d\udcb0, a Burner\ud83d\udd25, or both. The only incentivized address at launch is the ETH/FEI Uniswap v2 Pair and its incentive contract is UniswapIncentive . The Governor\u2696\ufe0f can set and unset incentive contracts for any address. It can also exempt addresses from incentives.","title":"Direct Incentives"},{"location":"old/protocol/fei-stablecoin/#inclusive-fee-on-transfer","text":"Fees applied to incentivized trading or transfers can be either inclusive or exclusive. The inclusive fees are more commonly utilized in DeFi. Inclusive fees are applied \"in-flight\", meaning that the fee is extracted from the transfer or the trade amount itself. Exclusive fees are applied on top of the transfer or trade amount itself. The exclusive fee is commonly applied to the party initiating the transaction. Fei Protocol v1 uses an \"inclusive\" fee on transfers when applying Direct Incentives on Uniswap sells. There are certain considerations with this approach, the main one being that Fei Protocol cannot differentiate between selling and liquidity provision. Therefore the fee applies to all FEI transfers to the pool including providing LP. {% hint style=\"warning\" %} LPing the FEI/ETH Uniswap pool also incurs a burn penalty, because it transfers FEI into the pool like a sell would {% endhint %}","title":"Inclusive Fee On Transfer"},{"location":"old/protocol/fei-stablecoin/#collateralization","text":"The FEI stablecoin is collateralized by a PCV reserve. Fei Protocol prioritizes liquidity when deploying this reserve to make sure users are able to trade FEI at high volume. Critically, FEI can be over- or under-collateralized depending on volatility on the PCV and other market conditions. The collateralization ratio of FEI at any time is calculated as follows, with the denominator being \"User controlled FEI\": The formula ignores \"Protocol controlled FEI\" because any FEI that the protocol holds will never be sold for PCV, only burned. Protocol controlled FEI can have second-order, short-term inflationary effects. For instance, FEI deposited into a lending market by Fei Protocol could increase the circulating supply when borrowed. The interest accrued and eventual withdrawal of that FEI ultimately have a net deflationary effect in the long term.","title":"Collateralization"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/","text":"FEI (Fei USD) Contract Fei.sol implements IFei.sol , CoreRef , ERC20Burnable Description FEI is a regular ERC-20 token, based on the OpenZeppelin ERC-20Burnable code with the following modifications: Minting and burning to any address are uncapped and accessible by any address with the Minter\ud83d\udcb0and Burner\ud83d\udd25 role, respectively. At each transfer (or transferFrom) the following addresses are checked for a mapped incentive contract: FEI sender FEI receiver FEI operator (msg.sender) - commonly the same as the sender unless using transferFrom with an approved contract the zero address - represens an incentive to be applied on ALL transfers If an incentive contract is found, it is called with all of the transfer parameters. Any incentive is applied after the token balances update from the transfer. Events {% tabs %} {% tab title=\"Minting\" %} Minting FEI to an address type param description address indexed _to The recipient of the minted FEI address indexed _minter The contract that minted the FEI uint256 _amount The amount of FEI minted {% endtab %} {% tab title=\"Burning\" %} Burning FEI from an address type param description address indexed _to The target of the burned FEI address indexed _burner The contract that burned the FEI uint256 _amount The amount of FEI minted {% endtab %} {% tab title=\"IncentiveContractUpdate\" %} setting or unsetting an incentive contract for an incentivized address type param description address indexed _incentivized The incentivized address address indexed _incentiveContract The new incentive contract. address(0) to unset {% endtab %} {% endtabs %} Read-Only Functions incentiveContract function incentiveContract(address account) external view returns (address); returns the mapped incentive contract if account is an incentivized address, otherwise returns the 0 address. {% hint style=\"info\" %} if the 0 address has a mapped incentive contract, then this incentive contract is called for every single FEI transfer. {% endhint %} Burner-Only\ud83d\udd25 State-Changing Functions burnFrom function burnFrom(address account, uint256 amount) external; Burns amount FEI from account . Reverts if the FEI balance of account is less than amount emits Burning Minter-Only\ud83d\udcb0 State-Changing Functions mint function mint(address account, uint256 amount) external; Mints amount FEI to account emits Minting Governor-Only\u2696\ufe0f State-Changing Functions setIncentiveContract function setIncentiveContract(address account, address incentive) external; Sets the incentive contract incentive for account . If incentive is the 0 address this functions as an unset. emits IncentiveContractUpdate Public State-Changing Functions burn function burn(uint256 amount) external; Burns amount FEI from msg.sender . Reverts if the FEI balance of msg.sender is less than amount emits Burning permit function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external; Sets the allowance for a spender for value FEI from owner via signature. Reverts if called after deadline ABIs {% file src=\"../../.gitbook/assets/fei.json\" caption=\"Fei ABI\" %} {% file src=\"../../.gitbook/assets/ifei.json\" caption=\"Fei Interface ABI\" %}","title":"FEI \\(Fei USD\\)"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#fei-fei-usd","text":"","title":"FEI (Fei USD)"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#contract","text":"Fei.sol implements IFei.sol , CoreRef , ERC20Burnable","title":"Contract"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#description","text":"FEI is a regular ERC-20 token, based on the OpenZeppelin ERC-20Burnable code with the following modifications: Minting and burning to any address are uncapped and accessible by any address with the Minter\ud83d\udcb0and Burner\ud83d\udd25 role, respectively. At each transfer (or transferFrom) the following addresses are checked for a mapped incentive contract: FEI sender FEI receiver FEI operator (msg.sender) - commonly the same as the sender unless using transferFrom with an approved contract the zero address - represens an incentive to be applied on ALL transfers If an incentive contract is found, it is called with all of the transfer parameters. Any incentive is applied after the token balances update from the transfer.","title":"Description"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#events","text":"{% tabs %} {% tab title=\"Minting\" %} Minting FEI to an address type param description address indexed _to The recipient of the minted FEI address indexed _minter The contract that minted the FEI uint256 _amount The amount of FEI minted {% endtab %} {% tab title=\"Burning\" %} Burning FEI from an address type param description address indexed _to The target of the burned FEI address indexed _burner The contract that burned the FEI uint256 _amount The amount of FEI minted {% endtab %} {% tab title=\"IncentiveContractUpdate\" %} setting or unsetting an incentive contract for an incentivized address type param description address indexed _incentivized The incentivized address address indexed _incentiveContract The new incentive contract. address(0) to unset {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#incentivecontract","text":"function incentiveContract(address account) external view returns (address); returns the mapped incentive contract if account is an incentivized address, otherwise returns the 0 address. {% hint style=\"info\" %} if the 0 address has a mapped incentive contract, then this incentive contract is called for every single FEI transfer. {% endhint %}","title":"incentiveContract"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#burner-only-state-changing-functions","text":"","title":"Burner-Only\ud83d\udd25 State-Changing Functions"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#burnfrom","text":"function burnFrom(address account, uint256 amount) external; Burns amount FEI from account . Reverts if the FEI balance of account is less than amount emits Burning","title":"burnFrom"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#minter-only-state-changing-functions","text":"","title":"Minter-Only\ud83d\udcb0 State-Changing Functions"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#mint","text":"function mint(address account, uint256 amount) external; Mints amount FEI to account emits Minting","title":"mint"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#setincentivecontract","text":"function setIncentiveContract(address account, address incentive) external; Sets the incentive contract incentive for account . If incentive is the 0 address this functions as an unset. emits IncentiveContractUpdate","title":"setIncentiveContract"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#burn","text":"function burn(uint256 amount) external; Burns amount FEI from msg.sender . Reverts if the FEI balance of msg.sender is less than amount emits Burning","title":"burn"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#permit","text":"function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external; Sets the allowance for a spender for value FEI from owner via signature. Reverts if called after deadline","title":"permit"},{"location":"old/protocol/fei-stablecoin/fei-fei-usd/#abis","text":"{% file src=\"../../.gitbook/assets/fei.json\" caption=\"Fei ABI\" %} {% file src=\"../../.gitbook/assets/ifei.json\" caption=\"Fei Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/","text":"UniswapIncentive Contract UniswapIncentive.sol implements IUniswapIncentive , UniRef Description {% hint style=\"info\" %} Because this contract can be swapped for a new UniswapIncentive, for integrations we recommend calling incentiveContract(0x94B0A3d511b6EcDb17eBF877278Ab030acb0A878) on the FEI token to always read the currently applied UniswapIncentive on the ETH-FEI pair {% endhint %} The FEI incentive contract applied on transfers involving a Uniswap pair. The UniswapIncentive contract assumes that all transfers involving Uniswap are either a sell or a buy. In either case, the hypothetical start and end price are calculated then compared to the peg to capture the magnitude distance m . See UniRef for more details on how these formulas are derived. {% page-ref page=\"../references/uniref.md\" %} These parameters are fed into the incentive function to produce a mint (in the case of buy) or burn (in the case of sell) action. Any address can be exempted from incentives by governance. {% hint style=\"info\" %} The below incentives only apply to the FEI portion of the trade that would be below the peg. When calculating \"x\", the contract uses the \"distance from peg FEI\" method in UniRef . {% endhint %} Sell (Burn) All FEI transfers going TO the uniswap pool are treated as a sell. This has the counterintuitive effect of treating liquidity provision as a sell. The implementation integrates the burn function from the white paper with respect to the distance from the peg. This creates a nice path independent property where a trader is no better off doing one large trade or many small trades, ignoring fees. The burn formula for sell amount x is: The burn is only applied to trades below the peg when the incentive contract is appointed as a Burner\ud83d\udd25. The burn is taken from the in-flight trade amount. If the burn is 5% on a 100 FEI transfer then the recipient gets 95 FEI. {% hint style=\"info\" %} The entire trade size including the burn is used to calculate the slippage for the end deviation from the peg. This could lead to a higher than expected burn for large trades when below peg. {% endhint %} {% hint style=\"warning\" %} The trade will revert if the burn would be greater than or equal to the entire transfer amount {% endhint %} Buy (Mint) All transfers going FROM the uniswap pool are treated as a buy. This has the counterintuitive effect of treating liquidity withdrawal events as buys. The initial magnitude m deviation from the peg before the hypothetical trade is used to maximize the potential mint amount. w is the time weight we discuss in the next section. The mint formula for buy amount x is: The incentive formula is normally just the right-hand side of the above min function. It is linear in the time weight w(t) and the distance from the peg m When the incentive function for a trade reaches the same level as the burn for the same trade in reverse , the incentive function maxes out. This is because we don't want a trader to be able to profit by buying and selling with a flash loan under any circumstances. The mint should only apply if the trade starts below the peg and if the incentive contract is appointed as a Minter. Incentivized Amount The incentivized amount on Uniswap FEI-ETH trades is only calculated based on the amount that pushes FEI below the peg for a sell or up to the peg for a buy. For example say a trade starts 1% below the peg and ends 1% above, only approximately half of the trade will get the bonus. Time Weight The time weight w is a scaling factor utilized to make the incentive mint structured like an auction. The trader willing to accept the lowest mint will execute a buy before the reward gets higher. The time weight grows linearly at a rate of 75/100,000 per block, which equals 1 after approximately 5 hours. It should only grow while \"active\" and will only be active when the last trade ended below the peg. The rate can be changed by governance. Trades should update the time weight as follows: If ending above peg, set to 0 and deactivate If ending below the peg but starting above, set to 0 and activate If starting and ending below peg, update pro-rata with a buy based on percent towards peg. E.g., if a trade starts at 10% deviation and ends at 1%, time weight should be scaled by 1%/10% =.10. If starting and ending below the peg, cap the time weight at the max incentive for the ending distance Incentive Parity Incentive parity is defined as a boolean expression, which is true when the mint incentive equals its max for the current distance from the peg m . It simplifies down to the following: Parity is used as a trigger condition for reweights in the UniswapPCVController Access Control Minter\ud83d\udcb0 Burner\ud83d\udd25 Events {% tabs %} {% tab title=\"TimeWeightUpdate\" %} Time Weight change type param description uint256 _weight new time weight uint256 _active whether time weight is growing or not {% endtab %} {% tab title=\"GrowthRateUpdate\" %} Governance change of time weight growth weight type param description uint256 _growthRate new growth rate {% endtab %} {% tab title=\"ExemptAddressUpdate\" %} Governance change of an exempt address type param description address indexed _account the address to update bool _isExempt whether the account is exempt or not {% endtab %} {% tab title=\"SellAllowedAddressUpdate\" %} Governance change of a sell allowlisted address type param description address indexed _account the address to update bool _isSellAllowed whether the account is allowlisted or not {% endtab %} {% endtabs %} Read-Only Functions isIncentiveParity function isIncentiveParity() external view returns (bool); returns true if the conditions for incentive parity (see above) are met, otherwise false. isExemptAddress function isExemptAddress(address account) external view returns (bool); returns true if account is exempted from incentives, otherwise false TIME_WEIGHT_GRANULARITY function TIME_WEIGHT_GRANULARITY() external view returns (uint32); returns the granularity of the time weight variable, set as a constant to 100,000 getGrowthRate function getGrowthRate() external view returns (uint32); returns the current time weight growth rate, per block getTimeWeight function getTimeWeight() external view returns (uint32); returns the current time weight isTimeWeightActive function isTimeWeightActive() external view returns (bool); returns true if the time weight is active and growing getBuyIncentive function getBuyIncentive(uint256 amount) external view returns ( uint256 incentive, uint32 weight, Decimal.D256 memory initialDeviation, Decimal.D256 memory finalDeviation ); returns the buy incentive amount incentive for a FEI transfer of amount out of the FEI/ETH incentivized Uniswap pool. Also returns the updated time weight weight and the initialDeviation and finalDeviation which are equal to m start and end, respectively. getSellPenalty function getSellPenalty(uint256 amount) external view returns ( uint256 penalty, Decimal.D256 memory initialDeviation, Decimal.D256 memory finalDeviation ); returns the sell penalty amount penalty a FEI transfer of amount into the FEI/ETH incentivized Uniswap pool. Also returns the initialDeviation and finalDeviation which are equal to m start and end, respectively. getSellPenaltyMultiplier function getSellPenaltyMultiplier( Decimal.D256 calldata initialDeviation, Decimal.D256 calldata finalDeviation ) external view returns (Decimal.D256 memory); Returns the sell penalty multiplier applied to a trade which starts at initialDeviation from the peg and ends at finalDeviation from the peg. To return the instantaneous multiplier, set initial and final equal to each other. getBuyIncentiveMultiplier function getBuyIncentiveMultiplier( Decimal.D256 calldata initialDeviation, Decimal.D256 calldata finalDeviation ) external view returns (Decimal.D256 memory); Returns the buy incentive multiplier applied to a trade which starts at initialDeviation from the peg and ends at finalDeviation from the peg. To return the instantaneous multiplier, set initial and final equal to each other. {% hint style=\"info\" %} getBuyIncentiveMultiplier() uses the current time weight for calculating incentives. {% endhint %} Governor-Only\u2696\ufe0f State-Changing Functions setExemptAddress function setExemptAddress(address account, bool isExempt) external; set account incentive exempt status to isExempt emits ExemptAddressUpdate setTimeWeight function setTimeWeight( uint32 weight, uint32 growth, bool active ) external; set the current time weight to weight , growing at a rate growth and active flag to active starting from the current block. emits TimeWeightUpdate and GrowthRateUpdate if the growth rate changes Fei-Only\ud83c\udf32 incentivize function incentivize( address sender, address receiver, address operator, uint256 amountIn ) external updates the oracle at the beginning of the flow applies the buy reward based on amountIn if: below peg time weight non-zero contract is a Minter\ud83d\udcb0 sender is the ETH/FEI incentivized pair receiver is not exempt applies the sell penalty based on amountIn if: trade ends below peg contract is a Burner\ud83d\udd25 receiver is the ETH/FEI incentivized pair sender is not exempt ABIs {% file src=\"../../.gitbook/assets/uniswapincentive.json\" caption=\"UniswapIncentive ABI\" %} {% file src=\"../../.gitbook/assets/iuniswapincentive.json\" caption=\"UniswapIncentive Interface ABI\" %}","title":"UniswapIncentive"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#uniswapincentive","text":"","title":"UniswapIncentive"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#contract","text":"UniswapIncentive.sol implements IUniswapIncentive , UniRef","title":"Contract"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#description","text":"{% hint style=\"info\" %} Because this contract can be swapped for a new UniswapIncentive, for integrations we recommend calling incentiveContract(0x94B0A3d511b6EcDb17eBF877278Ab030acb0A878) on the FEI token to always read the currently applied UniswapIncentive on the ETH-FEI pair {% endhint %} The FEI incentive contract applied on transfers involving a Uniswap pair. The UniswapIncentive contract assumes that all transfers involving Uniswap are either a sell or a buy. In either case, the hypothetical start and end price are calculated then compared to the peg to capture the magnitude distance m . See UniRef for more details on how these formulas are derived. {% page-ref page=\"../references/uniref.md\" %} These parameters are fed into the incentive function to produce a mint (in the case of buy) or burn (in the case of sell) action. Any address can be exempted from incentives by governance. {% hint style=\"info\" %} The below incentives only apply to the FEI portion of the trade that would be below the peg. When calculating \"x\", the contract uses the \"distance from peg FEI\" method in UniRef . {% endhint %}","title":"Description"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#sell-burn","text":"All FEI transfers going TO the uniswap pool are treated as a sell. This has the counterintuitive effect of treating liquidity provision as a sell. The implementation integrates the burn function from the white paper with respect to the distance from the peg. This creates a nice path independent property where a trader is no better off doing one large trade or many small trades, ignoring fees. The burn formula for sell amount x is: The burn is only applied to trades below the peg when the incentive contract is appointed as a Burner\ud83d\udd25. The burn is taken from the in-flight trade amount. If the burn is 5% on a 100 FEI transfer then the recipient gets 95 FEI. {% hint style=\"info\" %} The entire trade size including the burn is used to calculate the slippage for the end deviation from the peg. This could lead to a higher than expected burn for large trades when below peg. {% endhint %} {% hint style=\"warning\" %} The trade will revert if the burn would be greater than or equal to the entire transfer amount {% endhint %}","title":"Sell (Burn)"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#buy-mint","text":"All transfers going FROM the uniswap pool are treated as a buy. This has the counterintuitive effect of treating liquidity withdrawal events as buys. The initial magnitude m deviation from the peg before the hypothetical trade is used to maximize the potential mint amount. w is the time weight we discuss in the next section. The mint formula for buy amount x is: The incentive formula is normally just the right-hand side of the above min function. It is linear in the time weight w(t) and the distance from the peg m When the incentive function for a trade reaches the same level as the burn for the same trade in reverse , the incentive function maxes out. This is because we don't want a trader to be able to profit by buying and selling with a flash loan under any circumstances. The mint should only apply if the trade starts below the peg and if the incentive contract is appointed as a Minter.","title":"Buy (Mint)"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#incentivized-amount","text":"The incentivized amount on Uniswap FEI-ETH trades is only calculated based on the amount that pushes FEI below the peg for a sell or up to the peg for a buy. For example say a trade starts 1% below the peg and ends 1% above, only approximately half of the trade will get the bonus.","title":"Incentivized Amount"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#time-weight","text":"The time weight w is a scaling factor utilized to make the incentive mint structured like an auction. The trader willing to accept the lowest mint will execute a buy before the reward gets higher. The time weight grows linearly at a rate of 75/100,000 per block, which equals 1 after approximately 5 hours. It should only grow while \"active\" and will only be active when the last trade ended below the peg. The rate can be changed by governance. Trades should update the time weight as follows: If ending above peg, set to 0 and deactivate If ending below the peg but starting above, set to 0 and activate If starting and ending below peg, update pro-rata with a buy based on percent towards peg. E.g., if a trade starts at 10% deviation and ends at 1%, time weight should be scaled by 1%/10% =.10. If starting and ending below the peg, cap the time weight at the max incentive for the ending distance","title":"Time Weight"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#incentive-parity","text":"Incentive parity is defined as a boolean expression, which is true when the mint incentive equals its max for the current distance from the peg m . It simplifies down to the following: Parity is used as a trigger condition for reweights in the UniswapPCVController","title":"Incentive Parity"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#access-control","text":"Minter\ud83d\udcb0 Burner\ud83d\udd25","title":"Access Control"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#events","text":"{% tabs %} {% tab title=\"TimeWeightUpdate\" %} Time Weight change type param description uint256 _weight new time weight uint256 _active whether time weight is growing or not {% endtab %} {% tab title=\"GrowthRateUpdate\" %} Governance change of time weight growth weight type param description uint256 _growthRate new growth rate {% endtab %} {% tab title=\"ExemptAddressUpdate\" %} Governance change of an exempt address type param description address indexed _account the address to update bool _isExempt whether the account is exempt or not {% endtab %} {% tab title=\"SellAllowedAddressUpdate\" %} Governance change of a sell allowlisted address type param description address indexed _account the address to update bool _isSellAllowed whether the account is allowlisted or not {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#isincentiveparity","text":"function isIncentiveParity() external view returns (bool); returns true if the conditions for incentive parity (see above) are met, otherwise false.","title":"isIncentiveParity"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#isexemptaddress","text":"function isExemptAddress(address account) external view returns (bool); returns true if account is exempted from incentives, otherwise false","title":"isExemptAddress"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#time_weight_granularity","text":"function TIME_WEIGHT_GRANULARITY() external view returns (uint32); returns the granularity of the time weight variable, set as a constant to 100,000","title":"TIME_WEIGHT_GRANULARITY"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#getgrowthrate","text":"function getGrowthRate() external view returns (uint32); returns the current time weight growth rate, per block","title":"getGrowthRate"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#gettimeweight","text":"function getTimeWeight() external view returns (uint32); returns the current time weight","title":"getTimeWeight"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#istimeweightactive","text":"function isTimeWeightActive() external view returns (bool); returns true if the time weight is active and growing","title":"isTimeWeightActive"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#getbuyincentive","text":"function getBuyIncentive(uint256 amount) external view returns ( uint256 incentive, uint32 weight, Decimal.D256 memory initialDeviation, Decimal.D256 memory finalDeviation ); returns the buy incentive amount incentive for a FEI transfer of amount out of the FEI/ETH incentivized Uniswap pool. Also returns the updated time weight weight and the initialDeviation and finalDeviation which are equal to m start and end, respectively.","title":"getBuyIncentive"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#getsellpenalty","text":"function getSellPenalty(uint256 amount) external view returns ( uint256 penalty, Decimal.D256 memory initialDeviation, Decimal.D256 memory finalDeviation ); returns the sell penalty amount penalty a FEI transfer of amount into the FEI/ETH incentivized Uniswap pool. Also returns the initialDeviation and finalDeviation which are equal to m start and end, respectively.","title":"getSellPenalty"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#getsellpenaltymultiplier","text":"function getSellPenaltyMultiplier( Decimal.D256 calldata initialDeviation, Decimal.D256 calldata finalDeviation ) external view returns (Decimal.D256 memory); Returns the sell penalty multiplier applied to a trade which starts at initialDeviation from the peg and ends at finalDeviation from the peg. To return the instantaneous multiplier, set initial and final equal to each other.","title":"getSellPenaltyMultiplier"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#getbuyincentivemultiplier","text":"function getBuyIncentiveMultiplier( Decimal.D256 calldata initialDeviation, Decimal.D256 calldata finalDeviation ) external view returns (Decimal.D256 memory); Returns the buy incentive multiplier applied to a trade which starts at initialDeviation from the peg and ends at finalDeviation from the peg. To return the instantaneous multiplier, set initial and final equal to each other. {% hint style=\"info\" %} getBuyIncentiveMultiplier() uses the current time weight for calculating incentives. {% endhint %}","title":"getBuyIncentiveMultiplier"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#setexemptaddress","text":"function setExemptAddress(address account, bool isExempt) external; set account incentive exempt status to isExempt emits ExemptAddressUpdate","title":"setExemptAddress"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#settimeweight","text":"function setTimeWeight( uint32 weight, uint32 growth, bool active ) external; set the current time weight to weight , growing at a rate growth and active flag to active starting from the current block. emits TimeWeightUpdate and GrowthRateUpdate if the growth rate changes","title":"setTimeWeight"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#fei-only","text":"","title":"Fei-Only\ud83c\udf32"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#incentivize","text":"function incentivize( address sender, address receiver, address operator, uint256 amountIn ) external updates the oracle at the beginning of the flow applies the buy reward based on amountIn if: below peg time weight non-zero contract is a Minter\ud83d\udcb0 sender is the ETH/FEI incentivized pair receiver is not exempt applies the sell penalty based on amountIn if: trade ends below peg contract is a Burner\ud83d\udd25 receiver is the ETH/FEI incentivized pair sender is not exempt","title":"incentivize"},{"location":"old/protocol/fei-stablecoin/uniswapincentive/#abis","text":"{% file src=\"../../.gitbook/assets/uniswapincentive.json\" caption=\"UniswapIncentive ABI\" %} {% file src=\"../../.gitbook/assets/iuniswapincentive.json\" caption=\"UniswapIncentive Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/genesis/","text":"Genesis Fei Protocol Genesis starts at 12:01 pm PT on March 31, 2021. It will last 3 days, ending April 3, 2021. Additional details about the Genesis event are available in our Medium announcement. Genesis Group The Genesis Group contract is the user entry point for Genesis participation. It provides users the ability to: Enter Genesis with an ETH commitment Optionally pre-swap TRIBE with Genesis FEI Launch Fei Protocol Redeem rewards after launch Emergency exit if the launch fails {% hint style=\"warning\" %} Genesis entry is one-way. There is no way to redeem committed ETH, unless the launch fails. Optional pre-swapping of TRIBE is one-way. There is no way to revert back to uncommitted Genesis ETH. {% endhint %} {% page-ref page=\"genesisgroup.md\" %} Initial DEX Offering (IDO) As part of the Genesis launch, Fei Protocol will supply liquidity for FEI and TRIBE on Uniswap. This will amount to 20% of the TRIBE initial token distribution . The corresponding FEI will be minted by the protocol equal to 20% of the FEI generated by Genesis. This sets the total TRIBE value equal to the value of FEI at Genesis. The liquidity for this IDO will be timelocked and owned by the Fei Core Team. {% page-ref page=\"ido.md\" %} {% page-ref page=\"../references/lineartokentimelock.md\" %} Fei Core Team Timelocks The Fei Core Team and early-backers will own timelocked TRIBE as well as the LP tokens associated with the IDO. These timelocks follow a linear release schedule over a 4 year window on the contract level. The Fei Core Team has elected a back-weighted 5 year timelock period. All tokens follow the 4 year timelock on the contract level. The difference for the team will be managed at the company level. The TRIBE will be held in a special timelock called the TimelockedDelegator which allows for sub-delegation of portions of the held tokens, even while timelocked. If you'd like to be considered as a sponsored delegate, reach out on Discord. {% page-ref page=\"timelockeddelegator.md\" %} {% page-ref page=\"../references/lineartokentimelock.md\" %}","title":"Genesis"},{"location":"old/protocol/genesis/#genesis","text":"Fei Protocol Genesis starts at 12:01 pm PT on March 31, 2021. It will last 3 days, ending April 3, 2021. Additional details about the Genesis event are available in our Medium announcement.","title":"Genesis"},{"location":"old/protocol/genesis/#genesis-group","text":"The Genesis Group contract is the user entry point for Genesis participation. It provides users the ability to: Enter Genesis with an ETH commitment Optionally pre-swap TRIBE with Genesis FEI Launch Fei Protocol Redeem rewards after launch Emergency exit if the launch fails {% hint style=\"warning\" %} Genesis entry is one-way. There is no way to redeem committed ETH, unless the launch fails. Optional pre-swapping of TRIBE is one-way. There is no way to revert back to uncommitted Genesis ETH. {% endhint %} {% page-ref page=\"genesisgroup.md\" %}","title":"Genesis Group"},{"location":"old/protocol/genesis/#initial-dex-offering-ido","text":"As part of the Genesis launch, Fei Protocol will supply liquidity for FEI and TRIBE on Uniswap. This will amount to 20% of the TRIBE initial token distribution . The corresponding FEI will be minted by the protocol equal to 20% of the FEI generated by Genesis. This sets the total TRIBE value equal to the value of FEI at Genesis. The liquidity for this IDO will be timelocked and owned by the Fei Core Team. {% page-ref page=\"ido.md\" %} {% page-ref page=\"../references/lineartokentimelock.md\" %}","title":"Initial DEX Offering (IDO)"},{"location":"old/protocol/genesis/#fei-core-team-timelocks","text":"The Fei Core Team and early-backers will own timelocked TRIBE as well as the LP tokens associated with the IDO. These timelocks follow a linear release schedule over a 4 year window on the contract level. The Fei Core Team has elected a back-weighted 5 year timelock period. All tokens follow the 4 year timelock on the contract level. The difference for the team will be managed at the company level. The TRIBE will be held in a special timelock called the TimelockedDelegator which allows for sub-delegation of portions of the held tokens, even while timelocked. If you'd like to be considered as a sponsored delegate, reach out on Discord. {% page-ref page=\"timelockeddelegator.md\" %} {% page-ref page=\"../references/lineartokentimelock.md\" %}","title":"Fei Core Team Timelocks"},{"location":"old/protocol/genesis/genesisgroup/","text":"GenesisGroup Contract GenesisGroup.sol implements IGenesisGroup , CoreRef , ERC20 , Timed Description The Genesis Group Contract is responsible for launching Fei Protocol. It allows for pro-rata access to the first bonding curve transaction and includes a TRIBE distribution. FGEN The user's Genesis balances are managed by an FGEN ERC-20 token. FGEN are a tokenized version of the committed ETH. FGEN tokens are fungible and can be transferred and even sold if secondary markets arise. FGEN are used to account for the user's final outcome in Genesis. Outcome determination {% hint style=\"info\" %} FGEN maps to \"committed ETH\" and converted-FGEN maps to \"pre-swapping\" TRIBE. {% endhint %} At redemption time, users could have a combination of FGEN and converted-FGEN (cFGEN) tokens. cFGEN are not ERC-20 tokens and are only utilized during Genesis. The ratios of FGEN and cFGEN to the totals determine how much FEI and TRIBE each user receives. The TRIBE can be further split into \"Genesis TRIBE\" which are the additional allocation to the Genesis Group and \"IDO TRIBE\" which come from exchanging pre-converted FEI in the IDO. Genesis allocation formulas: Both the held FGEN and pre-converted balance are used to determine ownership of the Genesis TRIBE. Only the held FGEN is used for determining FEI ownership because the pre-converted FGEN FEI allocation is used to swap for TRIBE. Of the IDO TRIBE allocation, users get the pro-rata percentage of their pre-converted FGEN over all of the pre-converted FGEN. Events {% tabs %} {% tab title=\"Purchase\" %} A purchase into the Genesis Group type param description address indexed _to the address to send Fei Genesis share tokens (FGEN) to uint256 _value the amount of ETH deposited {% endtab %} {% tab title=\"Commit\" %} Pre-commit Genesis share tokens (FGEN) to buy TRIBE in IDO type param description address indexed _from account with the FGEN to commit address indexed _to account to receive and redeem the rewards post-genesis uint256 _amount amount of FGEN committed {% endtab %} {% tab title=\"Redeem\" %} Redeem Fei Genesis share tokens (FGEN) for FEI and TRIBE type param description address indexed _to the address to send TRIBE and FEI to uint256 _amountIn amount of FGEN redeemed uint256 _amountFei amount of FEI received uint256 _amountTribe amount of TRIBE received {% endtab %} {% tab title=\"Launch\" %} The completion of the Genesis Group and launch of Fei Protocol. Only emitted once type param description uint256 _timestamp the block timestamp of deployment {% endtab %} {% endtabs %} Read-Only Functions getAmountOut function getAmountOut(uint256 amountIn, bool inclusive) external view returns (uint256 feiAmount, uint256 tribeAmount); Returns the hypothetical feiAmount of FEI and tribeAmount of TRIBE that the user would receive if they have amountIn FGEN and genesis were to launch immediately. The inclusive flag would signify that the amounIn is already a part of the existing FGEN total supply, otherwise it is added on to simulate a purchase. getAmountsToRedeem function getAmountsToRedeem(address to) external view returns ( uint256 feiAmount, uint256 genesisTribe, uint256 idoTribe ) For an address to , returns how much FEI is available for redemption feiAmount , how much TRIBE is available from the Genesis bonus genesisTribe , and how much TRIBE is available from the IDO pre-commitment idoTribe , if any. {% hint style=\"danger\" %} Reverts if called pre-launch, as there is no way to know the redeemable amount for a user {% endhint %} Public State-Changing Functions purchase function purchase(address to, uint256 value) external payable; Purchase awards the user with an ERC-20 token 1:1 for their ETH called FGEN. This amount equals to value . Only available during the Genesis Period. emits Purchase {% hint style=\"info\" %} purchase() maps to an \"ETH commitment\" which outputs FGEN. {% endhint %} commit function commit( address from, address to, uint256 amount ) external; Pre-commit amount of FGEN to have the associated Genesis FEI participate in the initial DEX offering of TRIBE on Uniswap. Burn FGEN from the from address and grant the pre-commitment rewards to the to address. This can only be done during the Genesis Period. emits Commit {% hint style=\"info\" %} commit () maps conceptually to a \"TRIBE pre-swap\" {% endhint %} {% hint style=\"warning\" %} When a user pre-converts, their FGEN is burned. This makes it a one-way action. {% endhint %} redeem function redeem(address to) external; Redeem FGEN and cFGEN from to for a pro rata share of the FEI purchased on the bonding curve and the Genesis TRIBE allocation. Any contract can redeem on behalf of a user if they have FGEN approval. Redemptions must be for the entire held balance of FGEN and cFGEN. emits Redeem emergencyExit function emergencyExit(address from, address payable to) external; Redeem all FGEN and cFGEN held by the address from for ETH 1:1, sending the ETH to address to . This is intended only for the scenario where the launch functionality is bricked as a way for users to get their ETH back. Only available 3 days AFTER the Genesis Period ends, if launch has not been called. EOA-Only \ud83d\udc64 State-Changing Functions launch function launch() external; Launching is only open at the end of the Genesis Period. The following actions happen at launch: Mark Genesis Group as completed in Core (for other contracts to reference) Initializing the BondingCurveOracle price for thawing Making the first bonding curve purchase of FEI with all held ETH. (needs to happen after oracle init so the FEI is deployed at right ratio on Uniswap) Allocate bonding curve ETH to the PCV deposit Initialize the FEI/TRIBE staking pool Deploy the IDO FEI/TRIBE funds to Uniswap. Execute the swap of FEI for pre-swappingTRIBE on the IDO emits Launch ABIs {% file src=\"../../.gitbook/assets/genesisgroup.json\" caption=\"GenesisGroup ABI\" %} {% file src=\"../../.gitbook/assets/igenesisgroup.json\" caption=\"GenesisGroup Interface ABI\" %}","title":"GenesisGroup"},{"location":"old/protocol/genesis/genesisgroup/#genesisgroup","text":"","title":"GenesisGroup"},{"location":"old/protocol/genesis/genesisgroup/#contract","text":"GenesisGroup.sol implements IGenesisGroup , CoreRef , ERC20 , Timed","title":"Contract"},{"location":"old/protocol/genesis/genesisgroup/#description","text":"The Genesis Group Contract is responsible for launching Fei Protocol. It allows for pro-rata access to the first bonding curve transaction and includes a TRIBE distribution.","title":"Description"},{"location":"old/protocol/genesis/genesisgroup/#fgen","text":"The user's Genesis balances are managed by an FGEN ERC-20 token. FGEN are a tokenized version of the committed ETH. FGEN tokens are fungible and can be transferred and even sold if secondary markets arise. FGEN are used to account for the user's final outcome in Genesis.","title":"FGEN"},{"location":"old/protocol/genesis/genesisgroup/#outcome-determination","text":"{% hint style=\"info\" %} FGEN maps to \"committed ETH\" and converted-FGEN maps to \"pre-swapping\" TRIBE. {% endhint %} At redemption time, users could have a combination of FGEN and converted-FGEN (cFGEN) tokens. cFGEN are not ERC-20 tokens and are only utilized during Genesis. The ratios of FGEN and cFGEN to the totals determine how much FEI and TRIBE each user receives. The TRIBE can be further split into \"Genesis TRIBE\" which are the additional allocation to the Genesis Group and \"IDO TRIBE\" which come from exchanging pre-converted FEI in the IDO. Genesis allocation formulas: Both the held FGEN and pre-converted balance are used to determine ownership of the Genesis TRIBE. Only the held FGEN is used for determining FEI ownership because the pre-converted FGEN FEI allocation is used to swap for TRIBE. Of the IDO TRIBE allocation, users get the pro-rata percentage of their pre-converted FGEN over all of the pre-converted FGEN.","title":"Outcome determination"},{"location":"old/protocol/genesis/genesisgroup/#events","text":"{% tabs %} {% tab title=\"Purchase\" %} A purchase into the Genesis Group type param description address indexed _to the address to send Fei Genesis share tokens (FGEN) to uint256 _value the amount of ETH deposited {% endtab %} {% tab title=\"Commit\" %} Pre-commit Genesis share tokens (FGEN) to buy TRIBE in IDO type param description address indexed _from account with the FGEN to commit address indexed _to account to receive and redeem the rewards post-genesis uint256 _amount amount of FGEN committed {% endtab %} {% tab title=\"Redeem\" %} Redeem Fei Genesis share tokens (FGEN) for FEI and TRIBE type param description address indexed _to the address to send TRIBE and FEI to uint256 _amountIn amount of FGEN redeemed uint256 _amountFei amount of FEI received uint256 _amountTribe amount of TRIBE received {% endtab %} {% tab title=\"Launch\" %} The completion of the Genesis Group and launch of Fei Protocol. Only emitted once type param description uint256 _timestamp the block timestamp of deployment {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/genesis/genesisgroup/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/genesis/genesisgroup/#getamountout","text":"function getAmountOut(uint256 amountIn, bool inclusive) external view returns (uint256 feiAmount, uint256 tribeAmount); Returns the hypothetical feiAmount of FEI and tribeAmount of TRIBE that the user would receive if they have amountIn FGEN and genesis were to launch immediately. The inclusive flag would signify that the amounIn is already a part of the existing FGEN total supply, otherwise it is added on to simulate a purchase.","title":"getAmountOut"},{"location":"old/protocol/genesis/genesisgroup/#getamountstoredeem","text":"function getAmountsToRedeem(address to) external view returns ( uint256 feiAmount, uint256 genesisTribe, uint256 idoTribe ) For an address to , returns how much FEI is available for redemption feiAmount , how much TRIBE is available from the Genesis bonus genesisTribe , and how much TRIBE is available from the IDO pre-commitment idoTribe , if any. {% hint style=\"danger\" %} Reverts if called pre-launch, as there is no way to know the redeemable amount for a user {% endhint %}","title":"getAmountsToRedeem"},{"location":"old/protocol/genesis/genesisgroup/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/genesis/genesisgroup/#purchase","text":"function purchase(address to, uint256 value) external payable; Purchase awards the user with an ERC-20 token 1:1 for their ETH called FGEN. This amount equals to value . Only available during the Genesis Period. emits Purchase {% hint style=\"info\" %} purchase() maps to an \"ETH commitment\" which outputs FGEN. {% endhint %}","title":"purchase"},{"location":"old/protocol/genesis/genesisgroup/#commit","text":"function commit( address from, address to, uint256 amount ) external; Pre-commit amount of FGEN to have the associated Genesis FEI participate in the initial DEX offering of TRIBE on Uniswap. Burn FGEN from the from address and grant the pre-commitment rewards to the to address. This can only be done during the Genesis Period. emits Commit {% hint style=\"info\" %} commit () maps conceptually to a \"TRIBE pre-swap\" {% endhint %} {% hint style=\"warning\" %} When a user pre-converts, their FGEN is burned. This makes it a one-way action. {% endhint %}","title":"commit"},{"location":"old/protocol/genesis/genesisgroup/#redeem","text":"function redeem(address to) external; Redeem FGEN and cFGEN from to for a pro rata share of the FEI purchased on the bonding curve and the Genesis TRIBE allocation. Any contract can redeem on behalf of a user if they have FGEN approval. Redemptions must be for the entire held balance of FGEN and cFGEN. emits Redeem","title":"redeem"},{"location":"old/protocol/genesis/genesisgroup/#emergencyexit","text":"function emergencyExit(address from, address payable to) external; Redeem all FGEN and cFGEN held by the address from for ETH 1:1, sending the ETH to address to . This is intended only for the scenario where the launch functionality is bricked as a way for users to get their ETH back. Only available 3 days AFTER the Genesis Period ends, if launch has not been called.","title":"emergencyExit"},{"location":"old/protocol/genesis/genesisgroup/#eoa-only-state-changing-functions","text":"","title":"EOA-Only \ud83d\udc64 State-Changing Functions"},{"location":"old/protocol/genesis/genesisgroup/#launch","text":"function launch() external; Launching is only open at the end of the Genesis Period. The following actions happen at launch: Mark Genesis Group as completed in Core (for other contracts to reference) Initializing the BondingCurveOracle price for thawing Making the first bonding curve purchase of FEI with all held ETH. (needs to happen after oracle init so the FEI is deployed at right ratio on Uniswap) Allocate bonding curve ETH to the PCV deposit Initialize the FEI/TRIBE staking pool Deploy the IDO FEI/TRIBE funds to Uniswap. Execute the swap of FEI for pre-swappingTRIBE on the IDO emits Launch","title":"launch"},{"location":"old/protocol/genesis/genesisgroup/#abis","text":"{% file src=\"../../.gitbook/assets/genesisgroup.json\" caption=\"GenesisGroup ABI\" %} {% file src=\"../../.gitbook/assets/igenesisgroup.json\" caption=\"GenesisGroup Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/genesis/ido/","text":"IDO Contract IDO.sol implements IDOInterface , UniRef , LinearTokenTimelock Description IDO is an Initial DeFi Offering contract for listing FEI and TRIBE at genesis launch. The IDO is deployed by the GenesisGroup contract. The GenesisGroup sets the initial exchange rate. The IDO should hold TRIBE tokens and mint the appropriate amount of FEI to match the given exchange rate. It will then send the TRIBE and FEI to Uniswap where it should be the only LP for the pair. The LP shares held by the contract timelock linearly to the Fei Core Team and early-backers over a 4 year window from contract creation. Normalization Because of slippage, when a Uniswap transaction occurs the next spot price is always higher than the price payed by the trader. For example, assume there are 100 FEI and 100 USDC in a pool. A trader sends 100 USDC to the pool to buy FEI and gets 50 FEI back. This is a 2:1 exchange rate. However now the reserves are 200 USDC and 50 FEI, implying a 4:1 spot exchange rate. An arbitrageur could estimate the true price is around 2:1 and back-run the trade to profit on the slippage. The IDO pre-swap will likely have a large amount of slippage and create a massive arbitrage opportunity. For this reason we will \"normalize\" the price to what the Genesis Group pays (2:1 in the above example). The IDO simply burns from the pool back to the rate payed and then \"syncs\" the pool using the low level Uniswap utility. Due to the symmetry in Uniswap trades, the burn amount is always equal to the amount of FEI swapped into the pool for TRIBE. Access Control Minter\ud83d\udcb0 Burner\ud83d\udd25 Events {% tabs %} {% tab title=\"Deploy\" %} The IDO initialization with FEI and TRIBE. Only emitted once type param description uint256 _amountFei the amount of FEI deployed in the IDO uint256 _amountTribe the amount of TRIBE deployed in the IDO {% endtab %} {% endtabs %} GenesisGroup-Only\ud83d\ude80 State-Changing Functions deploy function deploy(Decimal.D256 calldata feiRatio) external; Initializes the FEI/TRIBE Uniswap pool with liquidity based on the amount of TRIBE held by the contract and feiRatio times that amount worth of FEI. The FEI for this are minted by the IDO to itself. swapFei function swapFei(uint256 amountFei) external returns (uint256); Swaps amountFei worth of FEI from the GenesisGroup contract to the FEI/TRIBE Uniswap pool and back. The IDO must be approved for the FEI transfer. Includes the \"normalization\" burn after the trade executes. Governor-Only\u2696\ufe0f State-Changing Functions unlockLiquidity function unlockLiquidity() external; Unlocks all of the time-locked liquidity and early vests to the beneficiary. This function is intended to be used when upgrading the primary AMM for FEI-TRIBE liquidity by setting the beneficiary to a pre-set upgrade co ABIs {% file src=\"../../.gitbook/assets/ido (1).json\" caption=\"IDO ABI\" %} {% file src=\"../../.gitbook/assets/idointerface (1).json\" caption=\"IDO Interface ABI\" %}","title":"IDO"},{"location":"old/protocol/genesis/ido/#ido","text":"","title":"IDO"},{"location":"old/protocol/genesis/ido/#contract","text":"IDO.sol implements IDOInterface , UniRef , LinearTokenTimelock","title":"Contract"},{"location":"old/protocol/genesis/ido/#description","text":"IDO is an Initial DeFi Offering contract for listing FEI and TRIBE at genesis launch. The IDO is deployed by the GenesisGroup contract. The GenesisGroup sets the initial exchange rate. The IDO should hold TRIBE tokens and mint the appropriate amount of FEI to match the given exchange rate. It will then send the TRIBE and FEI to Uniswap where it should be the only LP for the pair. The LP shares held by the contract timelock linearly to the Fei Core Team and early-backers over a 4 year window from contract creation.","title":"Description"},{"location":"old/protocol/genesis/ido/#normalization","text":"Because of slippage, when a Uniswap transaction occurs the next spot price is always higher than the price payed by the trader. For example, assume there are 100 FEI and 100 USDC in a pool. A trader sends 100 USDC to the pool to buy FEI and gets 50 FEI back. This is a 2:1 exchange rate. However now the reserves are 200 USDC and 50 FEI, implying a 4:1 spot exchange rate. An arbitrageur could estimate the true price is around 2:1 and back-run the trade to profit on the slippage. The IDO pre-swap will likely have a large amount of slippage and create a massive arbitrage opportunity. For this reason we will \"normalize\" the price to what the Genesis Group pays (2:1 in the above example). The IDO simply burns from the pool back to the rate payed and then \"syncs\" the pool using the low level Uniswap utility. Due to the symmetry in Uniswap trades, the burn amount is always equal to the amount of FEI swapped into the pool for TRIBE.","title":"Normalization"},{"location":"old/protocol/genesis/ido/#access-control","text":"Minter\ud83d\udcb0 Burner\ud83d\udd25","title":"Access Control"},{"location":"old/protocol/genesis/ido/#events","text":"{% tabs %} {% tab title=\"Deploy\" %} The IDO initialization with FEI and TRIBE. Only emitted once type param description uint256 _amountFei the amount of FEI deployed in the IDO uint256 _amountTribe the amount of TRIBE deployed in the IDO {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/genesis/ido/#genesisgroup-only-state-changing-functions","text":"","title":"GenesisGroup-Only\ud83d\ude80 State-Changing Functions"},{"location":"old/protocol/genesis/ido/#deploy","text":"function deploy(Decimal.D256 calldata feiRatio) external; Initializes the FEI/TRIBE Uniswap pool with liquidity based on the amount of TRIBE held by the contract and feiRatio times that amount worth of FEI. The FEI for this are minted by the IDO to itself.","title":"deploy"},{"location":"old/protocol/genesis/ido/#swapfei","text":"function swapFei(uint256 amountFei) external returns (uint256); Swaps amountFei worth of FEI from the GenesisGroup contract to the FEI/TRIBE Uniswap pool and back. The IDO must be approved for the FEI transfer. Includes the \"normalization\" burn after the trade executes.","title":"swapFei"},{"location":"old/protocol/genesis/ido/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/genesis/ido/#unlockliquidity","text":"function unlockLiquidity() external; Unlocks all of the time-locked liquidity and early vests to the beneficiary. This function is intended to be used when upgrading the primary AMM for FEI-TRIBE liquidity by setting the beneficiary to a pre-set upgrade co","title":"unlockLiquidity"},{"location":"old/protocol/genesis/ido/#abis","text":"{% file src=\"../../.gitbook/assets/ido (1).json\" caption=\"IDO ABI\" %} {% file src=\"../../.gitbook/assets/idointerface (1).json\" caption=\"IDO Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/genesis/timelockeddelegator/","text":"TimelockedDelegator Contract TimelockedDelegator.sol implements ITimelockedDelegator , LinearTokenTimelock Description A TRIBE token timelock which allows subdelegation. Managed by the Fei Core Team to distribute vested TRIBE and voting rights to team members and investors. The contract receives TRIBE tokens that vest linearly over a 4 year schedule to a beneficiary. {% page-ref page=\"../references/lineartokentimelock.md\" %} Sub-Delegation During the elected timelock period, any TRIBE in the timelock can be sub-delegated to any address. The TimelockedDelegator creates a proxy delegate contract which escrows the TRIBE and sub-delegates. It can then withdraw voting rights at any time. The beneficiary decides where to delegate and undelegate. All TRIBE held in the timelock that is not sub-delegated is delegated to the beneficiary. Events {% tabs %} {% tab title=\"Delegate\" %} delegate TRIBE tokens from timelock type param description address indexed _delegatee delegatee to recieve the TRIBE votes uint256 _amount amount of TRIBE delegated {% endtab %} {% tab title=\"Undelegate\" %} Remove TRIBE votes from delegatee type param description address indexed _delegatee delegatee to remove TRIBE votes uint256 _amount amount of TRIBE undelegated {% endtab %} {% endtabs %} Read-Only Functions delegateContract function delegateContract(address delegatee) external view returns (address); Returns the contract address escrowing and delegating the TRIBE for delegatee . delegateAmount function delegateAmount(address delegatee) external view returns (uint256); Returns the amount of TRIBE delegated in the escrow contract for delegatee totalDelegated function totalDelegated() external view returns (uint256); Returns the total amount of TRIBE delegated in proxy contracts, excluding the TRIBE held natively in the TimelockedDelegator. tribe function tribe() external view returns (ITribe); A reference to the TRIBE contract. State-Changing Functions Beneficiary-Only\ud83d\udc51 delegate function delegate(address delegatee, uint256 amount) external; Delegates amount of TRIBE from the TimelockedDelegator to delegatee by creating a proxy and transferring TRIBE to it. If delegatee already has delegation, the TimelockedDelegator undelegates it and increments amount before sending to the proxy. emits Delegate and Undelegate if the delegatee already has some delegated undelegate function undelegate(address delegatee) external returns (uint256); Withdraws all TRIBE from the delegate proxy contract associated with delegatee and returns the amount received. emits Undelegate ABIs {% file src=\"../../.gitbook/assets/timelockeddelegator.json\" caption=\"TimelockedDelegator ABI\" %} {% file src=\"../../.gitbook/assets/itimelockeddelegator.json\" caption=\"TimelockedDelegator Interface ABI\" %}","title":"TimelockedDelegator"},{"location":"old/protocol/genesis/timelockeddelegator/#timelockeddelegator","text":"","title":"TimelockedDelegator"},{"location":"old/protocol/genesis/timelockeddelegator/#contract","text":"TimelockedDelegator.sol implements ITimelockedDelegator , LinearTokenTimelock","title":"Contract"},{"location":"old/protocol/genesis/timelockeddelegator/#description","text":"A TRIBE token timelock which allows subdelegation. Managed by the Fei Core Team to distribute vested TRIBE and voting rights to team members and investors. The contract receives TRIBE tokens that vest linearly over a 4 year schedule to a beneficiary. {% page-ref page=\"../references/lineartokentimelock.md\" %}","title":"Description"},{"location":"old/protocol/genesis/timelockeddelegator/#sub-delegation","text":"During the elected timelock period, any TRIBE in the timelock can be sub-delegated to any address. The TimelockedDelegator creates a proxy delegate contract which escrows the TRIBE and sub-delegates. It can then withdraw voting rights at any time. The beneficiary decides where to delegate and undelegate. All TRIBE held in the timelock that is not sub-delegated is delegated to the beneficiary.","title":"Sub-Delegation"},{"location":"old/protocol/genesis/timelockeddelegator/#events","text":"{% tabs %} {% tab title=\"Delegate\" %} delegate TRIBE tokens from timelock type param description address indexed _delegatee delegatee to recieve the TRIBE votes uint256 _amount amount of TRIBE delegated {% endtab %} {% tab title=\"Undelegate\" %} Remove TRIBE votes from delegatee type param description address indexed _delegatee delegatee to remove TRIBE votes uint256 _amount amount of TRIBE undelegated {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/genesis/timelockeddelegator/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/genesis/timelockeddelegator/#delegatecontract","text":"function delegateContract(address delegatee) external view returns (address); Returns the contract address escrowing and delegating the TRIBE for delegatee .","title":"delegateContract"},{"location":"old/protocol/genesis/timelockeddelegator/#delegateamount","text":"function delegateAmount(address delegatee) external view returns (uint256); Returns the amount of TRIBE delegated in the escrow contract for delegatee","title":"delegateAmount"},{"location":"old/protocol/genesis/timelockeddelegator/#totaldelegated","text":"function totalDelegated() external view returns (uint256); Returns the total amount of TRIBE delegated in proxy contracts, excluding the TRIBE held natively in the TimelockedDelegator.","title":"totalDelegated"},{"location":"old/protocol/genesis/timelockeddelegator/#tribe","text":"function tribe() external view returns (ITribe); A reference to the TRIBE contract.","title":"tribe"},{"location":"old/protocol/genesis/timelockeddelegator/#state-changing-functions","text":"","title":"State-Changing Functions "},{"location":"old/protocol/genesis/timelockeddelegator/#beneficiary-only","text":"","title":"Beneficiary-Only\ud83d\udc51"},{"location":"old/protocol/genesis/timelockeddelegator/#delegate","text":"function delegate(address delegatee, uint256 amount) external; Delegates amount of TRIBE from the TimelockedDelegator to delegatee by creating a proxy and transferring TRIBE to it. If delegatee already has delegation, the TimelockedDelegator undelegates it and increments amount before sending to the proxy. emits Delegate and Undelegate if the delegatee already has some delegated","title":"delegate"},{"location":"old/protocol/genesis/timelockeddelegator/#undelegate","text":"function undelegate(address delegatee) external returns (uint256); Withdraws all TRIBE from the delegate proxy contract associated with delegatee and returns the amount received. emits Undelegate","title":"undelegate"},{"location":"old/protocol/genesis/timelockeddelegator/#abis","text":"{% file src=\"../../.gitbook/assets/timelockeddelegator.json\" caption=\"TimelockedDelegator ABI\" %} {% file src=\"../../.gitbook/assets/itimelockeddelegator.json\" caption=\"TimelockedDelegator Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/oracles/","text":"Oracles Fei Protocol has two distinct oracles that different components in the system point to. The primary oracle reads the USDC/ETH 10 minute time-weighted average price (TWAP). This oracle uses a snapshot approach, so for each 10-minute interval the peg is fixed from the Fei Protocol perspective. The only contract in Fei Protocol that uses this primary oracle is the bonding curve . {% embed url=\"https://uniswap.org/docs/v2/core-concepts/oracles/\" caption=\"Uniswap Oracles\" %} All other components in the system use the secondary oracle, \"bonding curve oracle\". Pre-Scale, this oracle references the bonding curve price rather than the primary oracle price. E.g., if the bonding curve is at a multiplier of $0.75, then the direct peg incentives on uniswap are targeting the distance from a $0.75 FEI price rather than the long-term intended $1. Thawing An important feature of the bonding curve oracle is the ability to \"thaw\" from a lower target price up to the target bonding curve price. Thawing is used to mitigate arbitrage opportunities that arise due to Genesis participation. This type of arbitrage is a general feature of any system which has the following properties: A group of user transactions are bundled together There is open participation in the group There is slippage in the price The inverse transaction can be made immediately after the bundled transaction An arbitrageur could participate in the grouped transaction. The average price of the group transaction would necessarily be lower than the very next listing price. The arbitrageur, if first to sell, would capitalize on the spread between these two prices. E.g., a naive approach to the FEI bonding curve: The Genesis Group makes it to the Scale target with an average price of $0.80. If Fei Protocol immediately lists FEI at the current bonding curve price of $1.00, then an arbitrageur can participate in Genesis expecting to make a 20% profit, if able to sell first right after Genesis. The implemented thawing solution is to initiate the bonding curve oracle reporting the average Genesis price as opposed to the next bonding curve price. This mitigates any pure arbitrage opportunities for participating in Genesis. The bonding curve will linearly shift towards reporting the intended bonding curve peg price over a 2 week window. This means that all incentives and PCV deposits will apply to this lower price. The peg will gradually increase until the thawing period is over.","title":"Oracles"},{"location":"old/protocol/oracles/#oracles","text":"Fei Protocol has two distinct oracles that different components in the system point to. The primary oracle reads the USDC/ETH 10 minute time-weighted average price (TWAP). This oracle uses a snapshot approach, so for each 10-minute interval the peg is fixed from the Fei Protocol perspective. The only contract in Fei Protocol that uses this primary oracle is the bonding curve . {% embed url=\"https://uniswap.org/docs/v2/core-concepts/oracles/\" caption=\"Uniswap Oracles\" %} All other components in the system use the secondary oracle, \"bonding curve oracle\". Pre-Scale, this oracle references the bonding curve price rather than the primary oracle price. E.g., if the bonding curve is at a multiplier of $0.75, then the direct peg incentives on uniswap are targeting the distance from a $0.75 FEI price rather than the long-term intended $1.","title":"Oracles"},{"location":"old/protocol/oracles/#thawing","text":"An important feature of the bonding curve oracle is the ability to \"thaw\" from a lower target price up to the target bonding curve price. Thawing is used to mitigate arbitrage opportunities that arise due to Genesis participation. This type of arbitrage is a general feature of any system which has the following properties: A group of user transactions are bundled together There is open participation in the group There is slippage in the price The inverse transaction can be made immediately after the bundled transaction An arbitrageur could participate in the grouped transaction. The average price of the group transaction would necessarily be lower than the very next listing price. The arbitrageur, if first to sell, would capitalize on the spread between these two prices. E.g., a naive approach to the FEI bonding curve: The Genesis Group makes it to the Scale target with an average price of $0.80. If Fei Protocol immediately lists FEI at the current bonding curve price of $1.00, then an arbitrageur can participate in Genesis expecting to make a 20% profit, if able to sell first right after Genesis. The implemented thawing solution is to initiate the bonding curve oracle reporting the average Genesis price as opposed to the next bonding curve price. This mitigates any pure arbitrage opportunities for participating in Genesis. The bonding curve will linearly shift towards reporting the intended bonding curve peg price over a 2 week window. This means that all incentives and PCV deposits will apply to this lower price. The peg will gradually increase until the thawing period is over.","title":"Thawing"},{"location":"old/protocol/oracles/bondingcurveoracle/","text":"BondingCurveOracle Contract BondingCurveOracle.sol implements IBondingCurveOracle , CoreRef , Timed Description The BondingCurveOracle contract pegs to a linked bonding curve price pre Scale and to a normal UniswapOracle post Scale. The contract stores the bonding curve (pre-Scale) and Uniswap (post-scale) oracle contracts to reference. Updates to the bonding curve oracle update the linked uniswap oracle. Thawing Additionally, the contract includes the \"thawing\" process. Thawing implements the initial pegged price lower than the target uniswap/bonding curve price. The reported peg linearly converges on the target peg over a preset duration window. The duration window d is 2 weeks. At the beginning of the window it reports the peg at the initial price I and at the end it will report the peg at the target price T . Let t be the timestamp between [0,d]. The reported oracle price O during the thawing period is: Events {% tabs %} {% tab title=\"Update\" %} new reported peg type param description uint256 _peg new peg value {% endtab %} {% endtabs %} Read-Only Functions read function read() external view returns (Decimal.D256 memory, bool); Reads the oracle value and reports the peg as FEI per underlying. The boolean value returned informs whether the reported oracle value is valid. Invalid value means the oracle is uninitialized or the contract is paused. {% hint style=\"info\" %} This method is pausable . If paused, it won't revert but it will return valid as false {% endhint %} isOutdated function isOutdated() external view returns (bool); Pass through calls uniswapOracle.isOutdated() , if false, then multiple read functions relying on the oracle would be inaccurate. uniswapOracle function uniswapOracle() external returns (IOracle); The referenced Uniswap Oracle bondingCurve function bondingCurve() external returns (IBondingCurve); The referenced Bonding Curve initialUSDPrice function initialUSDPrice() external returns (Decimal.D256 memory); The initial price to thaw from during the thawing period reported as USD per FEI. {% hint style=\"info\" %} This is capped at $1 even if the genesis group pays more than $1 due to the buffer {% endhint %} Public State-Changing Functions update function update() external returns (bool); Pass-through updates uniswapOracle GenesisGroup-Only\ud83d\ude80 State-Changing Functions init function init(Decimal.D256 calldata initialPrice) external; called by the GenesisGroup with the initial price to thaw from ABIs {% file src=\"../../.gitbook/assets/bondingcurveoracle.json\" caption=\"BondingCurveOracle ABI\" %} {% file src=\"../../.gitbook/assets/ibondingcurveoracle.json\" caption=\"BondingCurveOracle Interface ABI\" %} {% file src=\"../../.gitbook/assets/ioracle.json\" caption=\"Oracle Interface ABI\" %}","title":"BondingCurveOracle"},{"location":"old/protocol/oracles/bondingcurveoracle/#bondingcurveoracle","text":"","title":"BondingCurveOracle"},{"location":"old/protocol/oracles/bondingcurveoracle/#contract","text":"BondingCurveOracle.sol implements IBondingCurveOracle , CoreRef , Timed","title":"Contract"},{"location":"old/protocol/oracles/bondingcurveoracle/#description","text":"The BondingCurveOracle contract pegs to a linked bonding curve price pre Scale and to a normal UniswapOracle post Scale. The contract stores the bonding curve (pre-Scale) and Uniswap (post-scale) oracle contracts to reference. Updates to the bonding curve oracle update the linked uniswap oracle.","title":"Description"},{"location":"old/protocol/oracles/bondingcurveoracle/#thawing","text":"Additionally, the contract includes the \"thawing\" process. Thawing implements the initial pegged price lower than the target uniswap/bonding curve price. The reported peg linearly converges on the target peg over a preset duration window. The duration window d is 2 weeks. At the beginning of the window it reports the peg at the initial price I and at the end it will report the peg at the target price T . Let t be the timestamp between [0,d]. The reported oracle price O during the thawing period is:","title":"Thawing"},{"location":"old/protocol/oracles/bondingcurveoracle/#events","text":"{% tabs %} {% tab title=\"Update\" %} new reported peg type param description uint256 _peg new peg value {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/oracles/bondingcurveoracle/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/oracles/bondingcurveoracle/#read","text":"function read() external view returns (Decimal.D256 memory, bool); Reads the oracle value and reports the peg as FEI per underlying. The boolean value returned informs whether the reported oracle value is valid. Invalid value means the oracle is uninitialized or the contract is paused. {% hint style=\"info\" %} This method is pausable . If paused, it won't revert but it will return valid as false {% endhint %}","title":"read"},{"location":"old/protocol/oracles/bondingcurveoracle/#isoutdated","text":"function isOutdated() external view returns (bool); Pass through calls uniswapOracle.isOutdated() , if false, then multiple read functions relying on the oracle would be inaccurate.","title":"isOutdated"},{"location":"old/protocol/oracles/bondingcurveoracle/#uniswaporacle","text":"function uniswapOracle() external returns (IOracle); The referenced Uniswap Oracle","title":"uniswapOracle"},{"location":"old/protocol/oracles/bondingcurveoracle/#bondingcurve","text":"function bondingCurve() external returns (IBondingCurve); The referenced Bonding Curve","title":"bondingCurve"},{"location":"old/protocol/oracles/bondingcurveoracle/#initialusdprice","text":"function initialUSDPrice() external returns (Decimal.D256 memory); The initial price to thaw from during the thawing period reported as USD per FEI. {% hint style=\"info\" %} This is capped at $1 even if the genesis group pays more than $1 due to the buffer {% endhint %}","title":"initialUSDPrice"},{"location":"old/protocol/oracles/bondingcurveoracle/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/oracles/bondingcurveoracle/#update","text":"function update() external returns (bool); Pass-through updates uniswapOracle","title":"update"},{"location":"old/protocol/oracles/bondingcurveoracle/#genesisgroup-only-state-changing-functions","text":"","title":"GenesisGroup-Only\ud83d\ude80 State-Changing Functions"},{"location":"old/protocol/oracles/bondingcurveoracle/#init","text":"function init(Decimal.D256 calldata initialPrice) external; called by the GenesisGroup with the initial price to thaw from","title":"init"},{"location":"old/protocol/oracles/bondingcurveoracle/#abis","text":"{% file src=\"../../.gitbook/assets/bondingcurveoracle.json\" caption=\"BondingCurveOracle ABI\" %} {% file src=\"../../.gitbook/assets/ibondingcurveoracle.json\" caption=\"BondingCurveOracle Interface ABI\" %} {% file src=\"../../.gitbook/assets/ioracle.json\" caption=\"Oracle Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/oracles/uniswaporacle/","text":"UniswapOracle Contract UniswapOracle.sol implements IUniswapOracle , CoreRef Description The UniswapOracle contract maintains a uniswap TWAP. It maintains a pair contract to reference and a flag for whether the target price is token0 or token1 of the pair. Has a timestamp duration that must be exceeded between oracle updates. The duration is set to 10 minutes at launch. Updates should: take the difference between the current and prior timestamp and make sure it exceeds the duration get the cumulative price difference between Eth and USDC and normalize by 10**12 (the decimal difference between them) divide the ratio between the cumulative price and timestamp to get a peg price, then divide by 2^112 to resolve an integer from the stored fixed point 112x112 that Uniswap uses. update the peg and prior cumulative and timestamp The Governor \u2696\ufe0fcan change the duration. Events {% tabs %} {% tab title=\"Update\" %} new reported peg type param description uint256 _peg new peg value {% endtab %} {% tab title=\"DurationUpdate\" %} New TWAP duration type param description uint256 _duration new value of the TWAP duration {% endtab %} {% endtabs %} Read-Only Functions read function read() external view returns (Decimal.D256 memory, bool); Reads the oracle value and reports the peg as FEI per underlying. The boolean value returned informs whether the reported value is valid. Invalid means the oracle is uninitialized or the contract is paused. {% hint style=\"info\" %} This method is pausable . If paused, it won't revert but it will return valid as false {% endhint %} isOutdated function isOutdated() external view returns (bool); Returns true, if the oracle is still within the duration window. If false, then most read functions relying on the oracle would be inaccurate. priorTimestamp function priorTimestamp() external returns (uint32); Returns the prior timestamp used in the time-weighted average price calculation from the Uniswap pair. priorCumulative function priorCumulative() external returns (uint256); Returns the prior cumulative price used in the time-weighted average price calculation from the Uniswap pair. duration function duration() external returns (uint256); Returns the duration of the time-weighted average price. pair function pair() external returns (IUniswapV2Pair); Returns the referenced Uniswap pair for the oracle. Public State-Changing Functions update function update() external returns (bool); Updates the oracle with new time-weighted average price data from Uniswap if the duration window has passed since the last update. Returns true if updated, and false otherwise. emits Update {% hint style=\"info\" %} This method is pausable {% endhint %} Governor-Only\u2696\ufe0f State-Changing Functions setDuration function setDuration(uint256 _duration) external; Changes the time-weighted average price to _duration second snapshots emits DurationUpdate ABIs {% file src=\"../../.gitbook/assets/uniswaporacle.json\" caption=\"Uniswap Oracle ABI\" %} {% file src=\"../../.gitbook/assets/iuniswaporacle.json\" caption=\"Uniswap Oracle Interface ABI\" %} {% file src=\"../../.gitbook/assets/ioracle.json\" caption=\"Oracle Interface ABI\" %}","title":"UniswapOracle"},{"location":"old/protocol/oracles/uniswaporacle/#uniswaporacle","text":"","title":"UniswapOracle"},{"location":"old/protocol/oracles/uniswaporacle/#contract","text":"UniswapOracle.sol implements IUniswapOracle , CoreRef","title":"Contract"},{"location":"old/protocol/oracles/uniswaporacle/#description","text":"The UniswapOracle contract maintains a uniswap TWAP. It maintains a pair contract to reference and a flag for whether the target price is token0 or token1 of the pair. Has a timestamp duration that must be exceeded between oracle updates. The duration is set to 10 minutes at launch. Updates should: take the difference between the current and prior timestamp and make sure it exceeds the duration get the cumulative price difference between Eth and USDC and normalize by 10**12 (the decimal difference between them) divide the ratio between the cumulative price and timestamp to get a peg price, then divide by 2^112 to resolve an integer from the stored fixed point 112x112 that Uniswap uses. update the peg and prior cumulative and timestamp The Governor \u2696\ufe0fcan change the duration.","title":"Description"},{"location":"old/protocol/oracles/uniswaporacle/#events","text":"{% tabs %} {% tab title=\"Update\" %} new reported peg type param description uint256 _peg new peg value {% endtab %} {% tab title=\"DurationUpdate\" %} New TWAP duration type param description uint256 _duration new value of the TWAP duration {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/oracles/uniswaporacle/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/oracles/uniswaporacle/#read","text":"function read() external view returns (Decimal.D256 memory, bool); Reads the oracle value and reports the peg as FEI per underlying. The boolean value returned informs whether the reported value is valid. Invalid means the oracle is uninitialized or the contract is paused. {% hint style=\"info\" %} This method is pausable . If paused, it won't revert but it will return valid as false {% endhint %}","title":"read"},{"location":"old/protocol/oracles/uniswaporacle/#isoutdated","text":"function isOutdated() external view returns (bool); Returns true, if the oracle is still within the duration window. If false, then most read functions relying on the oracle would be inaccurate.","title":"isOutdated"},{"location":"old/protocol/oracles/uniswaporacle/#priortimestamp","text":"function priorTimestamp() external returns (uint32); Returns the prior timestamp used in the time-weighted average price calculation from the Uniswap pair.","title":"priorTimestamp"},{"location":"old/protocol/oracles/uniswaporacle/#priorcumulative","text":"function priorCumulative() external returns (uint256); Returns the prior cumulative price used in the time-weighted average price calculation from the Uniswap pair.","title":"priorCumulative"},{"location":"old/protocol/oracles/uniswaporacle/#duration","text":"function duration() external returns (uint256); Returns the duration of the time-weighted average price.","title":"duration"},{"location":"old/protocol/oracles/uniswaporacle/#pair","text":"function pair() external returns (IUniswapV2Pair); Returns the referenced Uniswap pair for the oracle.","title":"pair"},{"location":"old/protocol/oracles/uniswaporacle/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/oracles/uniswaporacle/#update","text":"function update() external returns (bool); Updates the oracle with new time-weighted average price data from Uniswap if the duration window has passed since the last update. Returns true if updated, and false otherwise. emits Update {% hint style=\"info\" %} This method is pausable {% endhint %}","title":"update"},{"location":"old/protocol/oracles/uniswaporacle/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/oracles/uniswaporacle/#setduration","text":"function setDuration(uint256 _duration) external; Changes the time-weighted average price to _duration second snapshots emits DurationUpdate","title":"setDuration"},{"location":"old/protocol/oracles/uniswaporacle/#abis","text":"{% file src=\"../../.gitbook/assets/uniswaporacle.json\" caption=\"Uniswap Oracle ABI\" %} {% file src=\"../../.gitbook/assets/iuniswaporacle.json\" caption=\"Uniswap Oracle Interface ABI\" %} {% file src=\"../../.gitbook/assets/ioracle.json\" caption=\"Oracle Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/protocol-controlled-value/","text":"Protocol Controlled Value Protocol Controlled Value ****(PCV) is a categorization of Total Value Locked (TVL) which represents all assets that are ultimately not redeemable by users. Commonly used examples of PCV are DAO treasuries and insurance funds. PCV can be conceptually extended to include any algorithmic management of the protocol-owned assets in order to facilitate protocol goals such as liquidity and stability. PCV Funding Generally, there are two ways for a protocol to fund PCV: Fees for functionality e.g., Compound and Aave insurance pools funded by a spread on borrowing interest rates Issuing a token e.g., NXM token issuance, or other governance tokens in which the protocol holds some as a DAO treasury The Fei Protocol primarily funds PCV via bonding curve FEI issuance. The bonding curve mints FEI in exchange for PCV at an oracle determined ETH exchange rate. It escrows this PCV until a keeper (Section 5.1.1) allocates it to various PCV Deposit contracts. {% page-ref page=\"../bondingcurve/\" %} Generalized PCV Fei Protocol is designed to support generalized Protocol Controlled Value. The protocol can fundraise PCV in any ERC-20 token by issuing a bonding curve denominated in that asset, contingent upon a reliable oracle to handle asset pricing. PCV Controllers manage PCV among the various PCV Deposits. Future Fei Protocol upgrades can algorithmically adjust PCV based on market conditions or include unique two-way integrations with other protocols. These integrations can leverage the utility tokens of other platforms or their functionality with other ERC-20 tokens held by the protocol.","title":"Protocol Controlled Value"},{"location":"old/protocol/protocol-controlled-value/#protocol-controlled-value","text":"Protocol Controlled Value ****(PCV) is a categorization of Total Value Locked (TVL) which represents all assets that are ultimately not redeemable by users. Commonly used examples of PCV are DAO treasuries and insurance funds. PCV can be conceptually extended to include any algorithmic management of the protocol-owned assets in order to facilitate protocol goals such as liquidity and stability.","title":"Protocol Controlled Value"},{"location":"old/protocol/protocol-controlled-value/#pcv-funding","text":"Generally, there are two ways for a protocol to fund PCV: Fees for functionality e.g., Compound and Aave insurance pools funded by a spread on borrowing interest rates Issuing a token e.g., NXM token issuance, or other governance tokens in which the protocol holds some as a DAO treasury The Fei Protocol primarily funds PCV via bonding curve FEI issuance. The bonding curve mints FEI in exchange for PCV at an oracle determined ETH exchange rate. It escrows this PCV until a keeper (Section 5.1.1) allocates it to various PCV Deposit contracts. {% page-ref page=\"../bondingcurve/\" %}","title":"PCV Funding"},{"location":"old/protocol/protocol-controlled-value/#generalized-pcv","text":"Fei Protocol is designed to support generalized Protocol Controlled Value. The protocol can fundraise PCV in any ERC-20 token by issuing a bonding curve denominated in that asset, contingent upon a reliable oracle to handle asset pricing. PCV Controllers manage PCV among the various PCV Deposits. Future Fei Protocol upgrades can algorithmically adjust PCV based on market conditions or include unique two-way integrations with other protocols. These integrations can leverage the utility tokens of other platforms or their functionality with other ERC-20 tokens held by the protocol.","title":"Generalized PCV"},{"location":"old/protocol/protocol-controlled-value/ethpcvdepositadapter/","text":"EthPCVDepositAdapter Contract EthPCVDepositAdapter Description Allows contracts which can receive ETH but do not conform to the IPCVDeposit interface to still receive those ETH deposits in a PCV compatible way. Likewise allows native ETH transfers to conform to the IPCVDeposit interface of a contract that does conform to that interface. e.g. sending ETH to the EthPCVDripper from the EthBondingCurve Access Control None Events None Read-Only Functions target function target() external view returns (address); Returns the target address to transfer ETH to Public State-Changing Functions deposit function deposit(uint256 amount) public payable; sends amount ETH to target ABIs {% file src=\"../../.gitbook/assets/ethpcvdepositadapter.json\" caption=\"EthPCVDepositAdapter\" %}","title":"EthPCVDepositAdapter"},{"location":"old/protocol/protocol-controlled-value/ethpcvdepositadapter/#ethpcvdepositadapter","text":"","title":"EthPCVDepositAdapter"},{"location":"old/protocol/protocol-controlled-value/ethpcvdepositadapter/#contract","text":"EthPCVDepositAdapter","title":"Contract"},{"location":"old/protocol/protocol-controlled-value/ethpcvdepositadapter/#description","text":"Allows contracts which can receive ETH but do not conform to the IPCVDeposit interface to still receive those ETH deposits in a PCV compatible way. Likewise allows native ETH transfers to conform to the IPCVDeposit interface of a contract that does conform to that interface. e.g. sending ETH to the EthPCVDripper from the EthBondingCurve","title":"Description"},{"location":"old/protocol/protocol-controlled-value/ethpcvdepositadapter/#access-control","text":"None","title":"Access Control"},{"location":"old/protocol/protocol-controlled-value/ethpcvdepositadapter/#events","text":"None","title":"Events"},{"location":"old/protocol/protocol-controlled-value/ethpcvdepositadapter/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/protocol-controlled-value/ethpcvdepositadapter/#target","text":"function target() external view returns (address); Returns the target address to transfer ETH to","title":"target"},{"location":"old/protocol/protocol-controlled-value/ethpcvdepositadapter/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/ethpcvdepositadapter/#deposit","text":"function deposit(uint256 amount) public payable; sends amount ETH to target","title":"deposit"},{"location":"old/protocol/protocol-controlled-value/ethpcvdepositadapter/#abis","text":"{% file src=\"../../.gitbook/assets/ethpcvdepositadapter.json\" caption=\"EthPCVDepositAdapter\" %}","title":"ABIs"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/","text":"EthPCVDripper Contract EthPCVDripper implements CoreRef , Timed Description Drips fixed size batches of held ETH to a target contract with a certain frequency. {% hint style=\"info\" %} If the target has at least the batch size ( amountToDrip ) then the drip will fail {% endhint %} The dripper prevents a target contract from holding more than 2x the batch size of ETH effectively allowing a smoother release of potentially large amounts of ETH to target contracts. This has a few advantages: Allowing the Guardian to intervene in the event of an issue Mitigating oracle manipulation risk Preventing large ETH supply shocks to happen instantaneously Parameterization Param Value amountToDrip 5000000000000000000000 (5000 ETH) duration 3600 (1 hour) target 0xa08A721dFB595753FFf335636674D76C455B275C ( EthReserveStabilizer ) Access Control None Events {% tabs %} {% tab title=\"Dripped\" %} A drip to the target type param description uint256 amount amount ETH dripped {% endtab %} {% tab title=\"Withdrawal\" %} Withdrawal of PCV type param description address indexed _to the recipient address of the PCV uint256 _amount amount withdrawn {% endtab %} {% endtabs %} Read-Only Functions isTargetBalanceLow function isTargetBalanceLow() external view returns (bool); Returns true when the target balance is less than amountToDrip target function target() external view returns (address); Returns the target address to drip to amountToDrip Returns the amount dripped to the target on each drip call Public State-Changing Functions drip function drip() external; Sends amountToDrip() ETH to target() if the following conditions are met: duration seconds have passed since the last drip the contract is not paused by the Guardian isTargetBalanceLow() is true emits Dripped PCV Controller-Only \u2699\ufe0f State-Changing Functions withdraw function withdrawETH(address payable to, uint256 amount) external; Withdraws amount ETH to address to from the EthPCVDripper emits Withdrawal ABIs {% file src=\"../../.gitbook/assets/ethpcvdripper.json\" caption=\"EthPCVDripper ABI\" %}","title":"EthPCVDripper"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#ethpcvdripper","text":"","title":"EthPCVDripper"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#contract","text":"EthPCVDripper implements CoreRef , Timed","title":"Contract"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#description","text":"Drips fixed size batches of held ETH to a target contract with a certain frequency. {% hint style=\"info\" %} If the target has at least the batch size ( amountToDrip ) then the drip will fail {% endhint %} The dripper prevents a target contract from holding more than 2x the batch size of ETH effectively allowing a smoother release of potentially large amounts of ETH to target contracts. This has a few advantages: Allowing the Guardian to intervene in the event of an issue Mitigating oracle manipulation risk Preventing large ETH supply shocks to happen instantaneously","title":"Description"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#parameterization","text":"Param Value amountToDrip 5000000000000000000000 (5000 ETH) duration 3600 (1 hour) target 0xa08A721dFB595753FFf335636674D76C455B275C ( EthReserveStabilizer )","title":"Parameterization"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#access-control","text":"None","title":"Access Control"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#events","text":"{% tabs %} {% tab title=\"Dripped\" %} A drip to the target type param description uint256 amount amount ETH dripped {% endtab %} {% tab title=\"Withdrawal\" %} Withdrawal of PCV type param description address indexed _to the recipient address of the PCV uint256 _amount amount withdrawn {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#istargetbalancelow","text":"function isTargetBalanceLow() external view returns (bool); Returns true when the target balance is less than amountToDrip","title":"isTargetBalanceLow"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#target","text":"function target() external view returns (address); Returns the target address to drip to","title":"target"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#amounttodrip","text":"Returns the amount dripped to the target on each drip call","title":"amountToDrip"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#drip","text":"function drip() external; Sends amountToDrip() ETH to target() if the following conditions are met: duration seconds have passed since the last drip the contract is not paused by the Guardian isTargetBalanceLow() is true emits Dripped","title":"drip"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#pcv-controller-only-state-changing-functions","text":"","title":"PCV Controller-Only \u2699\ufe0f State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#withdraw","text":"function withdrawETH(address payable to, uint256 amount) external; Withdraws amount ETH to address to from the EthPCVDripper emits Withdrawal","title":"withdraw"},{"location":"old/protocol/protocol-controlled-value/ethpcvdripper/#abis","text":"{% file src=\"../../.gitbook/assets/ethpcvdripper.json\" caption=\"EthPCVDripper ABI\" %}","title":"ABIs"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/","text":"EthReserveStabilizer Contract EthReserveStabilizer.sol implements IReserveStabilizer , OracleRef Description A contract for exchanging FEI for ETH from reserves at some USD price relative to an oracle. For example if ETH is $2500 and the usd exchange rate for FEI is $0.90 then ~2777 FEI can be exchanged for 1 ETH. Receives ETH from the EthPCVDripper in batches {% page-ref page=\"ethpcvdripper.md\" %} Parameterization Param Value usdPerFeiBasisPoints 95000 (95%) oracle 0x087F35bd241e41Fc28E43f0E8C58d283DD55bD65 (UniswapOracle) Access Control Burner\ud83d\udd25 Events {% tabs %} {% tab title=\"FeiExchange\" %} Exchange FEI for ETH from the PCV type param description address indexed to address of the exchanger uint256 feiAmount amount of FEI exchanged uint256 amountOut amount of ETH received {% endtab %} {% tab title=\"Withdrawal\" %} Withdrawal of PCV type param description address indexed _caller the PCV controller calling this function address indexed _to the recipient address of the PCV uint256 _amount amount withdrawn {% endtab %} {% tab title=\"UsdPerFeiRateUpdate\" %} Update of the conversion rate between USD and FEI type param description uint256 basisPoints amount of basis points in USD per FEI terms {% endtab %} {% endtabs %} Read-Only Functions getAmountOut function getAmountOut(uint256 amountFeiIn) external view returns (uint256); Returns the amount of ETH received for a FEI exchange of size amountFeiIn Multiplies the amountFeiIn by the inverted peg and the usdPerFeiBasisPoints / 10000 {% hint style=\"warning\" %} Can be inaccurate if outdated, need to call oracle().isOutdated() to check {% endhint %} usdPerFeiBasisPoints function usdPerFeiBasisPoints() external view returns (uint256); returns the usdPerFeiBasisPoints exchange rate between FEI and $1 worth of ETH denominated in basis points (1/10000) Public State-Changing Functions exchangeFei function exchangeFei(uint256 feiAmount) external returns (uint256); Burns feiAmount FEI from the caller then sends getAmountOut(feiAmount) of ETH to the caller and returns that value emits FeiExchange PCV Controller-Only \u2699\ufe0f State-Changing Functions withdraw function withdraw(address to, uint256 amount) external; Withdraws amount ETH to address to from the EthReserveStabilizer emits Withdrawal Governor-Only\u2696\ufe0f State-Changing Functions function setUsdPerFeiRate(uint256 exchangeRateBasisPoints) external; Sets the usdPerFeiBasisPoints to exchangeRateBasisPoints emits UsdPerFeiRateUpdate ABIs {% file src=\"../../.gitbook/assets/ethreservestabilizer.json\" caption=\"EthReserveStabilizer ABI\" %} {% file src=\"../../.gitbook/assets/ireservestabilizer.json\" caption=\"IReserveStabilizer ABI\" %}","title":"EthReserveStabilizer"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#ethreservestabilizer","text":"","title":"EthReserveStabilizer"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#contract","text":"EthReserveStabilizer.sol implements IReserveStabilizer , OracleRef","title":"Contract"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#description","text":"A contract for exchanging FEI for ETH from reserves at some USD price relative to an oracle. For example if ETH is $2500 and the usd exchange rate for FEI is $0.90 then ~2777 FEI can be exchanged for 1 ETH. Receives ETH from the EthPCVDripper in batches {% page-ref page=\"ethpcvdripper.md\" %}","title":"Description"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#parameterization","text":"Param Value usdPerFeiBasisPoints 95000 (95%) oracle 0x087F35bd241e41Fc28E43f0E8C58d283DD55bD65 (UniswapOracle)","title":"Parameterization"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#access-control","text":"Burner\ud83d\udd25","title":"Access Control"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#events","text":"{% tabs %} {% tab title=\"FeiExchange\" %} Exchange FEI for ETH from the PCV type param description address indexed to address of the exchanger uint256 feiAmount amount of FEI exchanged uint256 amountOut amount of ETH received {% endtab %} {% tab title=\"Withdrawal\" %} Withdrawal of PCV type param description address indexed _caller the PCV controller calling this function address indexed _to the recipient address of the PCV uint256 _amount amount withdrawn {% endtab %} {% tab title=\"UsdPerFeiRateUpdate\" %} Update of the conversion rate between USD and FEI type param description uint256 basisPoints amount of basis points in USD per FEI terms {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#getamountout","text":"function getAmountOut(uint256 amountFeiIn) external view returns (uint256); Returns the amount of ETH received for a FEI exchange of size amountFeiIn Multiplies the amountFeiIn by the inverted peg and the usdPerFeiBasisPoints / 10000 {% hint style=\"warning\" %} Can be inaccurate if outdated, need to call oracle().isOutdated() to check {% endhint %}","title":"getAmountOut"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#usdperfeibasispoints","text":"function usdPerFeiBasisPoints() external view returns (uint256); returns the usdPerFeiBasisPoints exchange rate between FEI and $1 worth of ETH denominated in basis points (1/10000)","title":"usdPerFeiBasisPoints"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#exchangefei","text":"function exchangeFei(uint256 feiAmount) external returns (uint256); Burns feiAmount FEI from the caller then sends getAmountOut(feiAmount) of ETH to the caller and returns that value emits FeiExchange","title":"exchangeFei"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#pcv-controller-only-state-changing-functions","text":"","title":"PCV Controller-Only \u2699\ufe0f State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#withdraw","text":"function withdraw(address to, uint256 amount) external; Withdraws amount ETH to address to from the EthReserveStabilizer emits Withdrawal","title":"withdraw"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#governor-only-state-changing-functions","text":"function setUsdPerFeiRate(uint256 exchangeRateBasisPoints) external; Sets the usdPerFeiBasisPoints to exchangeRateBasisPoints emits UsdPerFeiRateUpdate","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/ethreservestabilizer/#abis","text":"{% file src=\"../../.gitbook/assets/ethreservestabilizer.json\" caption=\"EthReserveStabilizer ABI\" %} {% file src=\"../../.gitbook/assets/ireservestabilizer.json\" caption=\"IReserveStabilizer ABI\" %}","title":"ABIs"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/","text":"EthUniswapPCVController Contract EthUniswapPCVController.sol implements IUniswapPCVController , UniRef Description A contract for moving reweighting Uniswap prices to the peg from a Uniswap PCV Deposit. ETH specific implementation. Reweight Reweights are used to return the Uniswap spot price of an associated PCV Deposit to the peg. The algorithm is as follows: withdraw 99% of the ETH from the UniswapPCVDeposit execute a trade with held ETH to bring the spot price back up to peg deposit remaining ETH balance back into the Uniswap PCV Deposit burn excess held FEI {% hint style=\"info\" %} Only 99% is withdrawn because if there are no other LPs there could be rounding errors against dust {% endhint %} Reweight eligibility The reweight is open to a keeper when both of the following conditions are met: the distance from the peg is at least the minimum (initially 1%) the UniswapIncentive contract is at incentive parity Governor\u2696\ufe0fand Guardian\ud83d\udee1contracts can force a reweight at any time, or update the minimum distance requirement. Reweight incentives Reweight executions are incentivized with 500 FEI if the controller is appointed as a Minter\ud83d\udcb0. Governance can adjust this incentive amount. Access Control Minter\ud83d\udcb0 PCV Controller\u2699\ufe0f Events {% tabs %} {% tab title=\"Reweight\" %} A Uniswap Reweight event type param description address indexed _caller the address triggering the reweight {% endtab %} {% tab title=\"PCVDepositUpdate\" %} Change the PCV Deposit contract type param description address indexed _pcvDeposit new pcv deposit contract {% endtab %} {% tab title=\"ReweightIncentiveUpdate\" %} Change the FEI reward for reweighting type param description uint256 _amount FEI reward amount {% endtab %} {% tab title=\"ReweightMinDistanceUpdate\" %} Change the min distance for a reweight type param description uint256 _basisPoints Minimum reweight amount in basis points (i.e. 1/10000) {% endtab %} {% tab title=\"ReweightWithdrawBPsUpdate\" %} Change the amount of PCV withdrawn during a reweight type param description uint256 _reweightWithdrawBPs amount of PCV withdrawn for a reweight in basis point terms (1/10000). {% endtab %} {% endtabs %} Read-Only Functions pcvDeposit function pcvDeposit() external returns (IPCVDeposit); Returns the PCV Deposit address this controller focuses on reweighting. incentiveContract function incentiveContract() external returns (IUniswapIncentive); Returns the UniswapIncentive contract used to determine reweight eligibility. reweightIncentiveAmount function reweightIncentiveAmount() external returns (uint256); Returns the amount of FEI received by any keeper who successfully executes a reweight. reweightWithdrawBPs function reweightWithdrawBPs() external returns (uint256); Returns the amount of PCV withdrawn during a reweight in basis points terms. reweightEligible function reweightEligible() external view returns (bool); Returns true when the distance from the peg is at least the minimum (initially 1%) and the UniswapIncentive contract is at incentive parity, otherwise false. minDistanceForReweight function minDistanceForReweight() external view returns (Decimal.D256 memory); Returns the minimum percent distance from the peg needed for keepers to reweight the peg. EOA-Only \ud83d\udc64 State-Changing Functions reweight function reweight() external; Executes a reweight if reweightEligible. Rewards the caller with 500 FEI. {% hint style=\"info\" %} This method is pausable {% endhint %} Governor- Or Guardian-Only\u2696\ufe0f\ud83d\udee1 State-Changing Functions forceReweight function forceReweight() external; Forces a reweight execution. No FEI incentive for doing this. Fails if the Uniswap spot price is already at or above the peg. Governor-Only\u2696\ufe0f State-Changing Functions setReweightMinDistance function setReweightMinDistance(uint256 basisPoints) external; Sets the minimum distance from the peg for a reweight to be eligible to basisPoints , measured in basis points (i.e. 1/10000). emits ReweightMinDistanceUpdate setReweightWithdrawBPs function setReweightWithdrawBPs(uint256 _reweightWithdrawBPs) external; Sets the percentage of the PCV withdrawn when executing a reweight in terms of basis points emits ReweightWithdrawBPsUpdate setPCVDeposit function setPCVDeposit(address _pcvDeposit) external; Sets the target PCV Deposit contract for reweight to _pcvDeposit emits PCVDepositUpdate setReweightIncentive function setReweightIncentive(uint256 amount) external; Sets the keeper incentive for executing a reweight to amount of FEI emits ReweightIncentiveUpdate ABIs {% file src=\"../../.gitbook/assets/ethuniswappcvcontroller.json\" caption=\"EthUniswapPCVController ABI\" %} {% file src=\"../../.gitbook/assets/iuniswappcvcontroller.json\" caption=\"UniswapPCVController Interface ABI\" %}","title":"EthUniswapPCVController"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#ethuniswappcvcontroller","text":"","title":"EthUniswapPCVController"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#contract","text":"EthUniswapPCVController.sol implements IUniswapPCVController , UniRef","title":"Contract"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#description","text":"A contract for moving reweighting Uniswap prices to the peg from a Uniswap PCV Deposit. ETH specific implementation.","title":"Description"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#reweight","text":"Reweights are used to return the Uniswap spot price of an associated PCV Deposit to the peg. The algorithm is as follows: withdraw 99% of the ETH from the UniswapPCVDeposit execute a trade with held ETH to bring the spot price back up to peg deposit remaining ETH balance back into the Uniswap PCV Deposit burn excess held FEI {% hint style=\"info\" %} Only 99% is withdrawn because if there are no other LPs there could be rounding errors against dust {% endhint %}","title":"Reweight"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#reweight-eligibility","text":"The reweight is open to a keeper when both of the following conditions are met: the distance from the peg is at least the minimum (initially 1%) the UniswapIncentive contract is at incentive parity Governor\u2696\ufe0fand Guardian\ud83d\udee1contracts can force a reweight at any time, or update the minimum distance requirement.","title":"Reweight eligibility"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#reweight-incentives","text":"Reweight executions are incentivized with 500 FEI if the controller is appointed as a Minter\ud83d\udcb0. Governance can adjust this incentive amount.","title":"Reweight incentives"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#access-control","text":"Minter\ud83d\udcb0 PCV Controller\u2699\ufe0f","title":"Access Control"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#events","text":"{% tabs %} {% tab title=\"Reweight\" %} A Uniswap Reweight event type param description address indexed _caller the address triggering the reweight {% endtab %} {% tab title=\"PCVDepositUpdate\" %} Change the PCV Deposit contract type param description address indexed _pcvDeposit new pcv deposit contract {% endtab %} {% tab title=\"ReweightIncentiveUpdate\" %} Change the FEI reward for reweighting type param description uint256 _amount FEI reward amount {% endtab %} {% tab title=\"ReweightMinDistanceUpdate\" %} Change the min distance for a reweight type param description uint256 _basisPoints Minimum reweight amount in basis points (i.e. 1/10000) {% endtab %} {% tab title=\"ReweightWithdrawBPsUpdate\" %} Change the amount of PCV withdrawn during a reweight type param description uint256 _reweightWithdrawBPs amount of PCV withdrawn for a reweight in basis point terms (1/10000). {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#pcvdeposit","text":"function pcvDeposit() external returns (IPCVDeposit); Returns the PCV Deposit address this controller focuses on reweighting.","title":"pcvDeposit"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#incentivecontract","text":"function incentiveContract() external returns (IUniswapIncentive); Returns the UniswapIncentive contract used to determine reweight eligibility.","title":"incentiveContract"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#reweightincentiveamount","text":"function reweightIncentiveAmount() external returns (uint256); Returns the amount of FEI received by any keeper who successfully executes a reweight.","title":"reweightIncentiveAmount"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#reweightwithdrawbps","text":"function reweightWithdrawBPs() external returns (uint256); Returns the amount of PCV withdrawn during a reweight in basis points terms.","title":"reweightWithdrawBPs"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#reweighteligible","text":"function reweightEligible() external view returns (bool); Returns true when the distance from the peg is at least the minimum (initially 1%) and the UniswapIncentive contract is at incentive parity, otherwise false.","title":"reweightEligible"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#mindistanceforreweight","text":"function minDistanceForReweight() external view returns (Decimal.D256 memory); Returns the minimum percent distance from the peg needed for keepers to reweight the peg.","title":"minDistanceForReweight"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#eoa-only-state-changing-functions","text":"","title":"EOA-Only \ud83d\udc64 State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#reweight_1","text":"function reweight() external; Executes a reweight if reweightEligible. Rewards the caller with 500 FEI. {% hint style=\"info\" %} This method is pausable {% endhint %}","title":"reweight"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#governor-or-guardian-only-state-changing-functions","text":"","title":"Governor- Or Guardian-Only\u2696\ufe0f\ud83d\udee1 State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#forcereweight","text":"function forceReweight() external; Forces a reweight execution. No FEI incentive for doing this. Fails if the Uniswap spot price is already at or above the peg.","title":"forceReweight"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#setreweightmindistance","text":"function setReweightMinDistance(uint256 basisPoints) external; Sets the minimum distance from the peg for a reweight to be eligible to basisPoints , measured in basis points (i.e. 1/10000). emits ReweightMinDistanceUpdate","title":"setReweightMinDistance"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#setreweightwithdrawbps","text":"function setReweightWithdrawBPs(uint256 _reweightWithdrawBPs) external; Sets the percentage of the PCV withdrawn when executing a reweight in terms of basis points emits ReweightWithdrawBPsUpdate","title":"setReweightWithdrawBPs"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#setpcvdeposit","text":"function setPCVDeposit(address _pcvDeposit) external; Sets the target PCV Deposit contract for reweight to _pcvDeposit emits PCVDepositUpdate","title":"setPCVDeposit"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#setreweightincentive","text":"function setReweightIncentive(uint256 amount) external; Sets the keeper incentive for executing a reweight to amount of FEI emits ReweightIncentiveUpdate","title":"setReweightIncentive"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvcontroller/#abis","text":"{% file src=\"../../.gitbook/assets/ethuniswappcvcontroller.json\" caption=\"EthUniswapPCVController ABI\" %} {% file src=\"../../.gitbook/assets/iuniswappcvcontroller.json\" caption=\"UniswapPCVController Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvdeposit/","text":"EthUniswapPCVDeposit Contract EthUniswapPCVDeposit.sol implements UniswapPCVDeposit Description An ETH implementation of UniswapPCVDeposit. {% page-ref page=\"uniswappcvdeposit.md\" %} Access Control Minter\ud83d\udcb0 ABIs {% file src=\"../../.gitbook/assets/ethuniswappcvdeposit.json\" caption=\"EthUniswapPCVDeposit ABI\" %}","title":"EthUniswapPCVDeposit"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvdeposit/#ethuniswappcvdeposit","text":"","title":"EthUniswapPCVDeposit"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvdeposit/#contract","text":"EthUniswapPCVDeposit.sol implements UniswapPCVDeposit","title":"Contract"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvdeposit/#description","text":"An ETH implementation of UniswapPCVDeposit. {% page-ref page=\"uniswappcvdeposit.md\" %}","title":"Description"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvdeposit/#access-control","text":"Minter\ud83d\udcb0","title":"Access Control"},{"location":"old/protocol/protocol-controlled-value/ethuniswappcvdeposit/#abis","text":"{% file src=\"../../.gitbook/assets/ethuniswappcvdeposit.json\" caption=\"EthUniswapPCVDeposit ABI\" %}","title":"ABIs"},{"location":"old/protocol/protocol-controlled-value/ratiopcvcontroller/","text":"RatioPCVController Contract RatioPCVController implements CoreRef Description Enables withdrawing a percentage of PCV from a IPCVDeposit contract. This is useful when the amount of PCV in the contract can change during the voting and execution windows of a proposal. e.g. sending ETH to the EthPCVDripper from the EthBondingCurve Access Control PCVController\u2699\ufe0f Events {% tabs %} {% tab title=\"Withdraw\" %} A withdrawal of PCV to a target type param description address indexed pcvDeposit The PCV deposit to withdraw from address indexed to the target to send PCV to uint256 amount amount withdrawn {% endtab %} {% endtabs %} Public State-Changing Functions withdrawRatio function withdrawRatio(IPCVDeposit pcvDeposit, address to, uint256 basisPoints) public; Withdraws basisPoints / 10000 PCV from pcvDeposit and sends to address to Calculates the amount of PCV by calling totalValue() on the pcvDeposit and multiplying by the ratio emits Withdraw","title":"RatioPCVController"},{"location":"old/protocol/protocol-controlled-value/ratiopcvcontroller/#ratiopcvcontroller","text":"","title":"RatioPCVController"},{"location":"old/protocol/protocol-controlled-value/ratiopcvcontroller/#contract","text":"RatioPCVController implements CoreRef","title":"Contract"},{"location":"old/protocol/protocol-controlled-value/ratiopcvcontroller/#description","text":"Enables withdrawing a percentage of PCV from a IPCVDeposit contract. This is useful when the amount of PCV in the contract can change during the voting and execution windows of a proposal. e.g. sending ETH to the EthPCVDripper from the EthBondingCurve","title":"Description"},{"location":"old/protocol/protocol-controlled-value/ratiopcvcontroller/#access-control","text":"PCVController\u2699\ufe0f","title":"Access Control"},{"location":"old/protocol/protocol-controlled-value/ratiopcvcontroller/#events","text":"{% tabs %} {% tab title=\"Withdraw\" %} A withdrawal of PCV to a target type param description address indexed pcvDeposit The PCV deposit to withdraw from address indexed to the target to send PCV to uint256 amount amount withdrawn {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/protocol-controlled-value/ratiopcvcontroller/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/ratiopcvcontroller/#withdrawratio","text":"function withdrawRatio(IPCVDeposit pcvDeposit, address to, uint256 basisPoints) public; Withdraws basisPoints / 10000 PCV from pcvDeposit and sends to address to Calculates the amount of PCV by calling totalValue() on the pcvDeposit and multiplying by the ratio emits Withdraw","title":"withdrawRatio"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/","text":"UniswapPCVDeposit Contract UniswapPCVDeposit.sol implements IPCVDeposit , UniRef Description An abstract contract for storing PCV in a Uniswap FEI liquidity pair Uniswap PCV deposits receive PCV, mint the corresponding amount of FEI to match the Uniswap spot price, and deposit to Uniswap. They can withdraw and read in the amount of non-FEI PCV on Uniswap held in the contract. When withdrawing, any excess FEI held is burned. When depositing, if no existing LP exists, the oracle price is used. The oracle is a BondingCurveOracle subject to thawing and the bonding curve price. Access Control Minter\ud83d\udcb0 Events {% tabs %} {% tab title=\"Deposit\" %} Deposit to the PCV type param description address indexed _from address of the depositor uint256 _amount amount deposited {% endtab %} {% tab title=\"Withdrawal\" %} Withdrawal of PCV type param description address indexed _caller the PCV controller calling this function address indexed _to the recipient address of the PCV uint256 _amount amount withdrawn {% endtab %} {% tab title=\"MaxBasisPointsFromPegLPUpdate\" %} update to maxBasisPointsFromPegLP type param description uint256 oldMaxBasisPointsFromPegLP old maxBasisPointsFromPegLP uint256 newMaxBasisPointsFromPegLP new maxBasisPointsFromPegLP {% endtab %} {% endtabs %} Read-Only Functions totalValue function totalValue() external view returns (uint256); Returns the effective amount of non-FEI PCV held by the contract. E.g., if the deposit holds 50% of all ETH/FEI liquidity on Uniswap, and there are 100,000 ETH in Uniswap, the function should return 50,000e18 wei. maxBasisPointsFromPegLP function maxBasisPointsFromPegLP() external view returns (uint256); Returns an amount of basis points (1/10000) beyond which if the FEI-ETH spot price is trading outside of the peg, the deposit function will fail. Public State-Changing Functions deposit function deposit(uint256 amount) external payable; Deposits amount PCV into Uniswap by minting the necessary amount of FEI to make the liquidity provision. E.g., if there are 50,000 ETH and 100,000,000 FEI on Uniswap, and the protocol receives another 500 ETH to deposit, the protocol will mint another 1,000,000 FEI to deposit at the current 2000 FEI/ETH spot price. PCV Controller-Only \u2699\ufe0f State-Changing Functions withdraw function withdraw(address to, uint256 amount) external; Withdraws amount PCV from Uniswap to address to by withdrawing the necessary amount of liquidity and burning the corresponding FEI. E.g., if the protocol owns 50,000 ETH and 100,000,000 FEI worth of liquidity on Uniswap, a withdrawal of 500 ETH would liquidate 1% of the LP shares and burn the extra 1,000,000 FEI received before transferring the 500 ETH. Governor-Only\u2696\ufe0f State-Changing Functions setMaxBasisPointsFromPegLP function setMaxBasisPointsFromPegLP(uint256 _maxBasisPointsFromPegLP) external view; Sets the new maxBasisPointsFromPegLP emits MaxBasisPointsFromPegLPUpdate ABIs {% file src=\"../../.gitbook/assets/uniswappcvdeposit.json\" caption=\"UniswapPCVDeposit ABI\" %} {% file src=\"../../.gitbook/assets/ipcvdeposit.json\" caption=\"PCVDeposit Interface ABI\" %}","title":"UniswapPCVDeposit"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#uniswappcvdeposit","text":"","title":"UniswapPCVDeposit"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#contract","text":"UniswapPCVDeposit.sol implements IPCVDeposit , UniRef","title":"Contract"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#description","text":"An abstract contract for storing PCV in a Uniswap FEI liquidity pair Uniswap PCV deposits receive PCV, mint the corresponding amount of FEI to match the Uniswap spot price, and deposit to Uniswap. They can withdraw and read in the amount of non-FEI PCV on Uniswap held in the contract. When withdrawing, any excess FEI held is burned. When depositing, if no existing LP exists, the oracle price is used. The oracle is a BondingCurveOracle subject to thawing and the bonding curve price.","title":"Description"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#access-control","text":"Minter\ud83d\udcb0","title":"Access Control"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#events","text":"{% tabs %} {% tab title=\"Deposit\" %} Deposit to the PCV type param description address indexed _from address of the depositor uint256 _amount amount deposited {% endtab %} {% tab title=\"Withdrawal\" %} Withdrawal of PCV type param description address indexed _caller the PCV controller calling this function address indexed _to the recipient address of the PCV uint256 _amount amount withdrawn {% endtab %} {% tab title=\"MaxBasisPointsFromPegLPUpdate\" %} update to maxBasisPointsFromPegLP type param description uint256 oldMaxBasisPointsFromPegLP old maxBasisPointsFromPegLP uint256 newMaxBasisPointsFromPegLP new maxBasisPointsFromPegLP {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#totalvalue","text":"function totalValue() external view returns (uint256); Returns the effective amount of non-FEI PCV held by the contract. E.g., if the deposit holds 50% of all ETH/FEI liquidity on Uniswap, and there are 100,000 ETH in Uniswap, the function should return 50,000e18 wei.","title":"totalValue"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#maxbasispointsfrompeglp","text":"function maxBasisPointsFromPegLP() external view returns (uint256); Returns an amount of basis points (1/10000) beyond which if the FEI-ETH spot price is trading outside of the peg, the deposit function will fail.","title":"maxBasisPointsFromPegLP"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#deposit","text":"function deposit(uint256 amount) external payable; Deposits amount PCV into Uniswap by minting the necessary amount of FEI to make the liquidity provision. E.g., if there are 50,000 ETH and 100,000,000 FEI on Uniswap, and the protocol receives another 500 ETH to deposit, the protocol will mint another 1,000,000 FEI to deposit at the current 2000 FEI/ETH spot price.","title":"deposit"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#pcv-controller-only-state-changing-functions","text":"","title":"PCV Controller-Only \u2699\ufe0f State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#withdraw","text":"function withdraw(address to, uint256 amount) external; Withdraws amount PCV from Uniswap to address to by withdrawing the necessary amount of liquidity and burning the corresponding FEI. E.g., if the protocol owns 50,000 ETH and 100,000,000 FEI worth of liquidity on Uniswap, a withdrawal of 500 ETH would liquidate 1% of the LP shares and burn the extra 1,000,000 FEI received before transferring the 500 ETH.","title":"withdraw"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#setmaxbasispointsfrompeglp","text":"function setMaxBasisPointsFromPegLP(uint256 _maxBasisPointsFromPegLP) external view; Sets the new maxBasisPointsFromPegLP emits MaxBasisPointsFromPegLPUpdate","title":"setMaxBasisPointsFromPegLP"},{"location":"old/protocol/protocol-controlled-value/uniswappcvdeposit/#abis","text":"{% file src=\"../../.gitbook/assets/uniswappcvdeposit.json\" caption=\"UniswapPCVDeposit ABI\" %} {% file src=\"../../.gitbook/assets/ipcvdeposit.json\" caption=\"PCVDeposit Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/references/","text":"References/Utils References Reference contracts (refs) are extensions to feature contracts that provide utilities related to certain functionality. There are 3 reference contracts in Fei Protocol: {% page-ref page=\"coreref.md\" %} {% page-ref page=\"oracleref.md\" %} {% page-ref page=\"uniref.md\" %} Utils The two main utility contracts are the LinearTokenTimelock, which is used for storing Fei Core Team and investor tokens, and the Timed contract which is used to add time windows to various protocol functionality (including the timelock) {% page-ref page=\"lineartokentimelock.md\" %} {% page-ref page=\"timed.md\" %}","title":"References/Utils"},{"location":"old/protocol/references/#referencesutils","text":"","title":"References/Utils"},{"location":"old/protocol/references/#references","text":"Reference contracts (refs) are extensions to feature contracts that provide utilities related to certain functionality. There are 3 reference contracts in Fei Protocol: {% page-ref page=\"coreref.md\" %} {% page-ref page=\"oracleref.md\" %} {% page-ref page=\"uniref.md\" %}","title":"References"},{"location":"old/protocol/references/#utils","text":"The two main utility contracts are the LinearTokenTimelock, which is used for storing Fei Core Team and investor tokens, and the Timed contract which is used to add time windows to various protocol functionality (including the timelock) {% page-ref page=\"lineartokentimelock.md\" %} {% page-ref page=\"timed.md\" %}","title":"Utils"},{"location":"old/protocol/references/coreref/","text":"CoreRef Contract CoreRef.sol implements ICoreRef , Pausable Description CoreRef is an abstract contract which references Core. It defines basic modifiers and utilities useful for contracts referencing Core. Most of all Fei Protocol contracts implement the CoreRef contract. The contract defines modifiers of the following types: restrict access to certain roles conditional execution if a role is held restrict access to certain contracts (Fei, Core, GenesisGroup) restrict access to post genesis period It allows the governor of a currently referenced Core contract to update to a new referenced Core contract It can read in referenced contract addresses including Core, Fei, Tribe or get token balances. {% page-ref page=\"../access-control/core.md\" %} Events {% tabs %} {% tab title=\"CoreUpdate\" %} Referenced Fei Core contract update type param description address indexed _core new Fei Core {% endtab %} {% endtabs %} Read-Only Functions core function core() external view returns (ICore); Returns the referenced Fei Core address as an interface. fei function fei() external view returns (IFei); Returns the FEI token address as an interface. tribe function tribe() external view returns (IERC20); Returns the TRIBE token address as an interface. feiBalance function feiBalance() external view returns (uint256); Returns the amount of FEI held by this contract tribeBalance function tribeBalance() external view returns (uint256); Returns the amount of TRIBE held by this contract Governor-Only\u2696\ufe0f State-Changing Functions setCore function setCore(address core) external; Sets the currently referenced Fei Core contract to core emits CoreUpdate Guardian- Or Governor-Only\ud83d\udee1\u2696\ufe0f State-Changing Functions pause function pause() external; Puts the contract in the paused state which can shut down pausable external functions unpause function unpause() external; Puts the contract in the unpaused state which can reopen pausable external functions ABIs {% file src=\"../../.gitbook/assets/coreref.json\" caption=\"CoreRef ABI\" %} {% file src=\"../../.gitbook/assets/icoreref.json\" caption=\"CoreRef Interface ABI\" %}","title":"CoreRef"},{"location":"old/protocol/references/coreref/#coreref","text":"","title":"CoreRef"},{"location":"old/protocol/references/coreref/#contract","text":"CoreRef.sol implements ICoreRef , Pausable","title":"Contract"},{"location":"old/protocol/references/coreref/#description","text":"CoreRef is an abstract contract which references Core. It defines basic modifiers and utilities useful for contracts referencing Core. Most of all Fei Protocol contracts implement the CoreRef contract. The contract defines modifiers of the following types: restrict access to certain roles conditional execution if a role is held restrict access to certain contracts (Fei, Core, GenesisGroup) restrict access to post genesis period It allows the governor of a currently referenced Core contract to update to a new referenced Core contract It can read in referenced contract addresses including Core, Fei, Tribe or get token balances. {% page-ref page=\"../access-control/core.md\" %}","title":"Description"},{"location":"old/protocol/references/coreref/#events","text":"{% tabs %} {% tab title=\"CoreUpdate\" %} Referenced Fei Core contract update type param description address indexed _core new Fei Core {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/references/coreref/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/references/coreref/#core","text":"function core() external view returns (ICore); Returns the referenced Fei Core address as an interface.","title":"core"},{"location":"old/protocol/references/coreref/#fei","text":"function fei() external view returns (IFei); Returns the FEI token address as an interface.","title":"fei"},{"location":"old/protocol/references/coreref/#tribe","text":"function tribe() external view returns (IERC20); Returns the TRIBE token address as an interface.","title":"tribe"},{"location":"old/protocol/references/coreref/#feibalance","text":"function feiBalance() external view returns (uint256); Returns the amount of FEI held by this contract","title":"feiBalance"},{"location":"old/protocol/references/coreref/#tribebalance","text":"function tribeBalance() external view returns (uint256); Returns the amount of TRIBE held by this contract","title":"tribeBalance"},{"location":"old/protocol/references/coreref/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/references/coreref/#setcore","text":"function setCore(address core) external; Sets the currently referenced Fei Core contract to core emits CoreUpdate","title":"setCore"},{"location":"old/protocol/references/coreref/#guardian-or-governor-only-state-changing-functions","text":"","title":"Guardian- Or Governor-Only\ud83d\udee1\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/references/coreref/#pause","text":"function pause() external; Puts the contract in the paused state which can shut down pausable external functions","title":"pause"},{"location":"old/protocol/references/coreref/#unpause","text":"function unpause() external; Puts the contract in the unpaused state which can reopen pausable external functions","title":"unpause"},{"location":"old/protocol/references/coreref/#abis","text":"{% file src=\"../../.gitbook/assets/coreref.json\" caption=\"CoreRef ABI\" %} {% file src=\"../../.gitbook/assets/icoreref.json\" caption=\"CoreRef Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/references/lineartokentimelock/","text":"LinearTokenTimelock Contract LinearTokenTimelock.sol implements Timed Description A timelock for releasing tokens over a continuous linear schedule. There is an appointed beneficiary who controls the tokens when vested. The beneficiary can set a new one if needed using the offer-accept pattern. Release Calculation Uses Timed to have a fixed period d of release. The elapsed time t is on the range [0,d]. The contract maintains the following: T - a total token amount which includes any already released and locked tokens. It can increase if new tokens enter the timelock but it cannot decrease. C - the current held tokens in the contract The portion of T available for release is T*t/d . The already released amount is T - C . The net amount available for release is the total available minus already released. The beneficiary can claim these at any time, and distribute to any address. Events {% tabs %} {% tab title=\"Release\" %} A release of timelocked tokens type param description address indexed _beneficiary the address that owns the timelocked tokens address indexed _recipient the address receiving this unlocked distribution uint256 _amount the amount of unlocked tokens released {% endtab %} {% tab title=\"BeneficiaryUpdate\" %} A change in beneficiary to the timelock type param description address indexed _beneficiary the new beneficiary address {% endtab %} {% tab title=\"PendingBeneficiaryUpdate\" %} A change in pending beneficiary to the timelock type param description address indexed _pendingBeneficiary the new beneficiary address {% endtab %} {% endtabs %} Read-Only Functions lockedToken function lockedToken() external view returns (IERC20); Returns the address of the locked token casted as an IERC20 interface. beneficiary function beneficiary() external view returns (address); Returns the current beneficiary address. pendingBeneficiary function pendingBeneficiary() external view returns (address); Returns the pending beneficiary, which could assume the beneficiary role at any time by calling acceptBeneficiary() initialBalance function initialBalance() external view returns (uint256); Returns the initial total amount of locked tokens. If new tokens are dropped into the timelock, this number increases to prevent accounting errors. availableForRelease function availableForRelease() external view returns (uint256); The amount of lockedToken available to be released by the beneficiary. totalToken function totalToken() external view returns(uint256); Returns the total amount of tokens held by the timelock pending release. alreadyReleasedAmount function alreadyReleasedAmount() external view returns (uint256); The amount of lockedToken already released by the beneficiary. Public State-Changing Functions acceptBeneficiary function acceptBeneficiary() external; Accepts the beneficiary role for msg.sender . Must already be the pending beneficiary. emits BeneficiaryUpdate Beneficiary-Only\ud83d\udc51 State-Changing Functions function release(address to, uint amount) external; Releases amount of timelocked tokens to address to . The amount must be less than or equal to the released amount of tokens. emits Release setPendingBeneficiary function setPendingBeneficiary(address _pendingBeneficiary) external; Sets the pending beneficiary to _pendingBeneficiary . emits PendingBeneficiaryUpdate ABIs {% file src=\"../../.gitbook/assets/lineartokentimelock.json\" caption=\"LinearTokenTimelock ABI\" %} {% file src=\"../../.gitbook/assets/ilineartokentimelock.json\" caption=\"LinearTokenTimelock Interface ABI\" %}","title":"LinearTokenTimelock"},{"location":"old/protocol/references/lineartokentimelock/#lineartokentimelock","text":"","title":"LinearTokenTimelock"},{"location":"old/protocol/references/lineartokentimelock/#contract","text":"LinearTokenTimelock.sol implements Timed","title":"Contract"},{"location":"old/protocol/references/lineartokentimelock/#description","text":"A timelock for releasing tokens over a continuous linear schedule. There is an appointed beneficiary who controls the tokens when vested. The beneficiary can set a new one if needed using the offer-accept pattern.","title":"Description"},{"location":"old/protocol/references/lineartokentimelock/#release-calculation","text":"Uses Timed to have a fixed period d of release. The elapsed time t is on the range [0,d]. The contract maintains the following: T - a total token amount which includes any already released and locked tokens. It can increase if new tokens enter the timelock but it cannot decrease. C - the current held tokens in the contract The portion of T available for release is T*t/d . The already released amount is T - C . The net amount available for release is the total available minus already released. The beneficiary can claim these at any time, and distribute to any address.","title":"Release Calculation"},{"location":"old/protocol/references/lineartokentimelock/#events","text":"{% tabs %} {% tab title=\"Release\" %} A release of timelocked tokens type param description address indexed _beneficiary the address that owns the timelocked tokens address indexed _recipient the address receiving this unlocked distribution uint256 _amount the amount of unlocked tokens released {% endtab %} {% tab title=\"BeneficiaryUpdate\" %} A change in beneficiary to the timelock type param description address indexed _beneficiary the new beneficiary address {% endtab %} {% tab title=\"PendingBeneficiaryUpdate\" %} A change in pending beneficiary to the timelock type param description address indexed _pendingBeneficiary the new beneficiary address {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/references/lineartokentimelock/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/references/lineartokentimelock/#lockedtoken","text":"function lockedToken() external view returns (IERC20); Returns the address of the locked token casted as an IERC20 interface.","title":"lockedToken"},{"location":"old/protocol/references/lineartokentimelock/#beneficiary","text":"function beneficiary() external view returns (address); Returns the current beneficiary address.","title":"beneficiary"},{"location":"old/protocol/references/lineartokentimelock/#pendingbeneficiary","text":"function pendingBeneficiary() external view returns (address); Returns the pending beneficiary, which could assume the beneficiary role at any time by calling acceptBeneficiary()","title":"pendingBeneficiary"},{"location":"old/protocol/references/lineartokentimelock/#initialbalance","text":"function initialBalance() external view returns (uint256); Returns the initial total amount of locked tokens. If new tokens are dropped into the timelock, this number increases to prevent accounting errors.","title":"initialBalance"},{"location":"old/protocol/references/lineartokentimelock/#availableforrelease","text":"function availableForRelease() external view returns (uint256); The amount of lockedToken available to be released by the beneficiary.","title":"availableForRelease"},{"location":"old/protocol/references/lineartokentimelock/#totaltoken","text":"function totalToken() external view returns(uint256); Returns the total amount of tokens held by the timelock pending release.","title":"totalToken"},{"location":"old/protocol/references/lineartokentimelock/#alreadyreleasedamount","text":"function alreadyReleasedAmount() external view returns (uint256); The amount of lockedToken already released by the beneficiary.","title":"alreadyReleasedAmount"},{"location":"old/protocol/references/lineartokentimelock/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/references/lineartokentimelock/#acceptbeneficiary","text":"function acceptBeneficiary() external; Accepts the beneficiary role for msg.sender . Must already be the pending beneficiary. emits BeneficiaryUpdate","title":"acceptBeneficiary"},{"location":"old/protocol/references/lineartokentimelock/#beneficiary-only-state-changing-functions","text":"function release(address to, uint amount) external; Releases amount of timelocked tokens to address to . The amount must be less than or equal to the released amount of tokens. emits Release","title":"Beneficiary-Only\ud83d\udc51 State-Changing Functions"},{"location":"old/protocol/references/lineartokentimelock/#setpendingbeneficiary","text":"function setPendingBeneficiary(address _pendingBeneficiary) external; Sets the pending beneficiary to _pendingBeneficiary . emits PendingBeneficiaryUpdate","title":"setPendingBeneficiary"},{"location":"old/protocol/references/lineartokentimelock/#abis","text":"{% file src=\"../../.gitbook/assets/lineartokentimelock.json\" caption=\"LinearTokenTimelock ABI\" %} {% file src=\"../../.gitbook/assets/ilineartokentimelock.json\" caption=\"LinearTokenTimelock Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/references/oracleref/","text":"OracleRef Contract OracleRef.sol implements IOracleRef , CoreRef Description OracleRef is an abstract contract which references an oracle. It defines some basic utilities useful for contracts referencing an oracle. The contract allows for updating or reading from the oracle. The oracle price is reported as FEI per X where X is some other asset like ETH, USDC, or USD depending on the oracle needs. It allows Governor\u2696\ufe0fto change the referenced Oracle {% page-ref page=\"../oracles/\" %} Events {% tabs %} {% tab title=\"OracleUpdate\" %} Referenced oracle contract update type param description address indexed _oracle new oracle {% endtab %} {% endtabs %} Read-Only Functions oracle function oracle() external view returns (IOracle); Returns the address of the referenced oracle as an interface. peg function peg() external view returns (Decimal.D256 memory); Returns the output of oracle().read() , reverts if the oracle is invalid. invert function invert(Decimal.D256 calldata price) external pure returns (Decimal.D256 memory); Inverts a price to be reported in the reverse direction. When applied to peg it reports X per FEI wher X is some underlying asset. Public State-Changing Functions updateOracle function updateOracle() external returns (bool); Pass-through updates the referenced oracle. Governor-Only\u2696\ufe0f State-Changing Functions setOracle function setOracle(address _oracle) external; Sets the address of the referenced oracle to _oracle . emits OracleUpdate ABIs {% file src=\"../../.gitbook/assets/oracleref.json\" caption=\"OracleRef ABI\" %} {% file src=\"../../.gitbook/assets/ioracleref.json\" caption=\"OracleRef Interface ABI\" %}","title":"OracleRef"},{"location":"old/protocol/references/oracleref/#oracleref","text":"","title":"OracleRef"},{"location":"old/protocol/references/oracleref/#contract","text":"OracleRef.sol implements IOracleRef , CoreRef","title":"Contract"},{"location":"old/protocol/references/oracleref/#description","text":"OracleRef is an abstract contract which references an oracle. It defines some basic utilities useful for contracts referencing an oracle. The contract allows for updating or reading from the oracle. The oracle price is reported as FEI per X where X is some other asset like ETH, USDC, or USD depending on the oracle needs. It allows Governor\u2696\ufe0fto change the referenced Oracle {% page-ref page=\"../oracles/\" %}","title":"Description"},{"location":"old/protocol/references/oracleref/#events","text":"{% tabs %} {% tab title=\"OracleUpdate\" %} Referenced oracle contract update type param description address indexed _oracle new oracle {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/references/oracleref/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/references/oracleref/#oracle","text":"function oracle() external view returns (IOracle); Returns the address of the referenced oracle as an interface.","title":"oracle"},{"location":"old/protocol/references/oracleref/#peg","text":"function peg() external view returns (Decimal.D256 memory); Returns the output of oracle().read() , reverts if the oracle is invalid.","title":"peg"},{"location":"old/protocol/references/oracleref/#invert","text":"function invert(Decimal.D256 calldata price) external pure returns (Decimal.D256 memory); Inverts a price to be reported in the reverse direction. When applied to peg it reports X per FEI wher X is some underlying asset.","title":"invert"},{"location":"old/protocol/references/oracleref/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/references/oracleref/#updateoracle","text":"function updateOracle() external returns (bool); Pass-through updates the referenced oracle.","title":"updateOracle"},{"location":"old/protocol/references/oracleref/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/references/oracleref/#setoracle","text":"function setOracle(address _oracle) external; Sets the address of the referenced oracle to _oracle . emits OracleUpdate","title":"setOracle"},{"location":"old/protocol/references/oracleref/#abis","text":"{% file src=\"../../.gitbook/assets/oracleref.json\" caption=\"OracleRef ABI\" %} {% file src=\"../../.gitbook/assets/ioracleref.json\" caption=\"OracleRef Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/references/timed/","text":"Timed Contract Timed.sol Description Abstract contract for managing timed events that complete after a period The contract has a duration d denominated in seconds. It has an effective timestamp t on the range [0,d]. After the period has ended, t stays fixed at d . When it is initialized, it sets the current block timestamp to t=0 . The remaining time is d-t and the completion condition is remaining = 0 ( t=d ). Events {% tabs %} {% tab title=\"DurationUpdate\" %} Change in the duration of the timer type param description uint256 _duration new duration {% endtab %} {% tab title=\"TimerReset\" %} A reset of the timer type param description uint256 _startTime new timer start {% endtab %} {% endtabs %} Read-Only Functions isTimeEnded function isTimeEnded() external view returns (bool); Returns true if elapsed time t is equal to the duration d. startTime function startTime() external view returns (uint256); Returns the starting block timestamp of the window. duration function duration() external view returns (uint256); Returns the duration d of the window. timeSinceStart function timeSinceStart() external view returns (uint256); Returns the elapsed time t since the startTime, with d as the maximum. remainingTime function remainingTime() external view returns (uint256); Returns the time remaining in the window t - d . ABIs {% file src=\"../../.gitbook/assets/timed.json\" caption=\"Timed\" %}","title":"Timed"},{"location":"old/protocol/references/timed/#timed","text":"","title":"Timed"},{"location":"old/protocol/references/timed/#contract","text":"Timed.sol","title":"Contract"},{"location":"old/protocol/references/timed/#description","text":"Abstract contract for managing timed events that complete after a period The contract has a duration d denominated in seconds. It has an effective timestamp t on the range [0,d]. After the period has ended, t stays fixed at d . When it is initialized, it sets the current block timestamp to t=0 . The remaining time is d-t and the completion condition is remaining = 0 ( t=d ).","title":"Description"},{"location":"old/protocol/references/timed/#events","text":"{% tabs %} {% tab title=\"DurationUpdate\" %} Change in the duration of the timer type param description uint256 _duration new duration {% endtab %} {% tab title=\"TimerReset\" %} A reset of the timer type param description uint256 _startTime new timer start {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/references/timed/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/references/timed/#istimeended","text":"function isTimeEnded() external view returns (bool); Returns true if elapsed time t is equal to the duration d.","title":"isTimeEnded"},{"location":"old/protocol/references/timed/#starttime","text":"function startTime() external view returns (uint256); Returns the starting block timestamp of the window.","title":"startTime"},{"location":"old/protocol/references/timed/#duration","text":"function duration() external view returns (uint256); Returns the duration d of the window.","title":"duration"},{"location":"old/protocol/references/timed/#timesincestart","text":"function timeSinceStart() external view returns (uint256); Returns the elapsed time t since the startTime, with d as the maximum.","title":"timeSinceStart"},{"location":"old/protocol/references/timed/#remainingtime","text":"function remainingTime() external view returns (uint256); Returns the time remaining in the window t - d .","title":"remainingTime"},{"location":"old/protocol/references/timed/#abis","text":"{% file src=\"../../.gitbook/assets/timed.json\" caption=\"Timed\" %}","title":"ABIs"},{"location":"old/protocol/references/uniref/","text":"UniRef Contract UniRef.sol implements IUniRef , OracleRef Description UniRef is an abstract contract which references a Uniswap pool. It defines basic utilities for contracts referencing Uniswap. It leverages the OracleRef contract to calculate various quantities relating to spot vs peg price. Let R be the reserves of the referenced Uniswap pair, FEI/ETH for example. The UniRef calculates the price at the start and end of a hypothetical trade of size x via the below formulas. It can then calculate the magnitude of the distance from the peg m given an oracle price O: It has other utilities relating to the peg O : Check whether below peg or not Get amount of a certain asset (fei or other) to trade to bring back to peg. This can be done by setting the end price in the above formula to O and solving for x , replacing the FEI reserves with the target asset reserves and ETH reserves with the other asset reserves. We take the absolute value here and infer the direction based on whether above or below peg. {% hint style=\"info\" %} When calculating the magnitude distance from the peg, the protocol only needs to know the deviation when underpegged. Therefore at or above the peg UniRef returns 0 for the deviation. {% endhint %} Events {% tabs %} {% tab title=\"PairUpdate\" %} Referenced Uniswap pair contract update type param description address indexed _pair new Uniswap pair contract {% endtab %} {% endtabs %} Read-Only Functions router function router() external view returns (IUniswapV2Router02); Returns the address of the UniswapV2Router as an interface. {% embed url=\"https://uniswap.org/docs/v2/smart-contracts/router02/\" caption=\"UniswapV2Router02\" %} pair function pair() external view returns (IUniswapV2Pair); Returns the referenced UniswapV2Pair contract as an interface. {% embed url=\"https://uniswap.org/docs/v2/smart-contracts/pair/\" caption=\"UniswapV2Pair\" %} token function token() external view returns (address); Returns the address of the ERC-20 token held in the UniswapV2Pair that is not FEI. getReserves function getReserves() external view returns (uint256 feiReserves, uint256 tokenReserves); Returns the reserves of the referenced UniswapV2Pair contract, ordered as FEI, and the other token. liquidityOwned function liquidityOwned() external view returns (uint256); Returns the amount of UniswapV2Pair liquidity provider tokens owned by this contract. deviationBelowPeg function deviationBelowPeg( Decimal.D256 calldata price, Decimal.D256 calldata peg ) external pure returns (Decimal.D256 memory); Returns the percent deviation from the peg \"m\" in the above formulas. Assumes prices are reported as FEI per X e.g. 1720.95 FEI per ETH and pegs are reported as USD per X. If the price of FEI is above the peg (meaning the input value is below the input peg), then the function returns 0; Governor-Only\u2696\ufe0f State-Changing Functions setPair function setPair(address _pair) external; Sets the referenced Uniswap pair contract to _pair emits PairUpdate ABIs {% file src=\"../../.gitbook/assets/uniref.json\" caption=\"UniRef ABI\" %} {% file src=\"../../.gitbook/assets/iuniref.json\" caption=\"UniRef Interface ABI\" %}","title":"UniRef"},{"location":"old/protocol/references/uniref/#uniref","text":"","title":"UniRef"},{"location":"old/protocol/references/uniref/#contract","text":"UniRef.sol implements IUniRef , OracleRef","title":"Contract"},{"location":"old/protocol/references/uniref/#description","text":"UniRef is an abstract contract which references a Uniswap pool. It defines basic utilities for contracts referencing Uniswap. It leverages the OracleRef contract to calculate various quantities relating to spot vs peg price. Let R be the reserves of the referenced Uniswap pair, FEI/ETH for example. The UniRef calculates the price at the start and end of a hypothetical trade of size x via the below formulas. It can then calculate the magnitude of the distance from the peg m given an oracle price O: It has other utilities relating to the peg O : Check whether below peg or not Get amount of a certain asset (fei or other) to trade to bring back to peg. This can be done by setting the end price in the above formula to O and solving for x , replacing the FEI reserves with the target asset reserves and ETH reserves with the other asset reserves. We take the absolute value here and infer the direction based on whether above or below peg. {% hint style=\"info\" %} When calculating the magnitude distance from the peg, the protocol only needs to know the deviation when underpegged. Therefore at or above the peg UniRef returns 0 for the deviation. {% endhint %}","title":"Description"},{"location":"old/protocol/references/uniref/#events","text":"{% tabs %} {% tab title=\"PairUpdate\" %} Referenced Uniswap pair contract update type param description address indexed _pair new Uniswap pair contract {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/references/uniref/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/references/uniref/#router","text":"function router() external view returns (IUniswapV2Router02); Returns the address of the UniswapV2Router as an interface. {% embed url=\"https://uniswap.org/docs/v2/smart-contracts/router02/\" caption=\"UniswapV2Router02\" %}","title":"router"},{"location":"old/protocol/references/uniref/#pair","text":"function pair() external view returns (IUniswapV2Pair); Returns the referenced UniswapV2Pair contract as an interface. {% embed url=\"https://uniswap.org/docs/v2/smart-contracts/pair/\" caption=\"UniswapV2Pair\" %}","title":"pair"},{"location":"old/protocol/references/uniref/#token","text":"function token() external view returns (address); Returns the address of the ERC-20 token held in the UniswapV2Pair that is not FEI.","title":"token"},{"location":"old/protocol/references/uniref/#getreserves","text":"function getReserves() external view returns (uint256 feiReserves, uint256 tokenReserves); Returns the reserves of the referenced UniswapV2Pair contract, ordered as FEI, and the other token.","title":"getReserves"},{"location":"old/protocol/references/uniref/#liquidityowned","text":"function liquidityOwned() external view returns (uint256); Returns the amount of UniswapV2Pair liquidity provider tokens owned by this contract.","title":"liquidityOwned"},{"location":"old/protocol/references/uniref/#deviationbelowpeg","text":"function deviationBelowPeg( Decimal.D256 calldata price, Decimal.D256 calldata peg ) external pure returns (Decimal.D256 memory); Returns the percent deviation from the peg \"m\" in the above formulas. Assumes prices are reported as FEI per X e.g. 1720.95 FEI per ETH and pegs are reported as USD per X. If the price of FEI is above the peg (meaning the input value is below the input peg), then the function returns 0;","title":"deviationBelowPeg"},{"location":"old/protocol/references/uniref/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/references/uniref/#setpair","text":"function setPair(address _pair) external; Sets the referenced Uniswap pair contract to _pair emits PairUpdate","title":"setPair"},{"location":"old/protocol/references/uniref/#abis","text":"{% file src=\"../../.gitbook/assets/uniref.json\" caption=\"UniRef ABI\" %} {% file src=\"../../.gitbook/assets/iuniref.json\" caption=\"UniRef Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/staking/","text":"Staking Fei Protocol has a staking pool in which FEI/TRIBE Uniswap LP tokens are deposited and TRIBE is earned over time. Rewards Distribution As of FIP-2, the total reward balance is 200,000,000 TRIBE, distributed over 2 years. This represents 20% of the initial TRIBE supply. The rewards distribution rate decreases linearly. Distribution is gated by the FeiRewardsDistributor. It calculates the amount which should be released at any given time and drips it to FeiStakingRewards weekly. {% hint style=\"success\" %} The drip can be called by any user or contract, the caller is rewarded a 500 FEI incentive for triggering the call. {% endhint %} Staking Fei Protocol staking allows users to earn TRIBE tokens while providing liquidity for TRIBE. This is commonly referred to as a Pool 2 in terms of yield farming. The rewards are split evenly among all participants at any given time. Staking is completely fluid. Users can deposit liquidity assets (stake), earn TRIBE for a few blocks, claim earned TRIBE, then withdraw staked tokens at will. There are no lockups on staked tokens. Users are staking FEI/TRIBE Uniswap v2 LP tokens to earn the TRIBE rewards. The Fei DAO can adjust the distribution rate and the staked token if the need arises. {% hint style=\"info\" %} Fei Protocol uses the StakingRewards contract used by Synthetix, Yams, and Set Protocol among others. {% endhint %}","title":"Staking"},{"location":"old/protocol/staking/#staking","text":"Fei Protocol has a staking pool in which FEI/TRIBE Uniswap LP tokens are deposited and TRIBE is earned over time.","title":"Staking"},{"location":"old/protocol/staking/#rewards-distribution","text":"As of FIP-2, the total reward balance is 200,000,000 TRIBE, distributed over 2 years. This represents 20% of the initial TRIBE supply. The rewards distribution rate decreases linearly. Distribution is gated by the FeiRewardsDistributor. It calculates the amount which should be released at any given time and drips it to FeiStakingRewards weekly. {% hint style=\"success\" %} The drip can be called by any user or contract, the caller is rewarded a 500 FEI incentive for triggering the call. {% endhint %}","title":"Rewards Distribution"},{"location":"old/protocol/staking/#staking_1","text":"Fei Protocol staking allows users to earn TRIBE tokens while providing liquidity for TRIBE. This is commonly referred to as a Pool 2 in terms of yield farming. The rewards are split evenly among all participants at any given time. Staking is completely fluid. Users can deposit liquidity assets (stake), earn TRIBE for a few blocks, claim earned TRIBE, then withdraw staked tokens at will. There are no lockups on staked tokens. Users are staking FEI/TRIBE Uniswap v2 LP tokens to earn the TRIBE rewards. The Fei DAO can adjust the distribution rate and the staked token if the need arises. {% hint style=\"info\" %} Fei Protocol uses the StakingRewards contract used by Synthetix, Yams, and Set Protocol among others. {% endhint %}","title":"Staking"},{"location":"old/protocol/staking/feirewardsdistributor/","text":"FeiRewardsDistributor Contract FeiRewardsDistributor.sol implements IRewardsDistributor , CoreRef , Timed Description The FeiRewardsDistributor contract is responsible for sending rewards to the FeiStakingRewards contract each week. It has one public method exposed for keepers to execute this drip functionality, which rewards the caller with a fixed amount of FEI . {% page-ref page=\"feistakingrewards.md\" %} Release Schedule The release schedule for the total reward amount R of TRIBE is a linearly decreasing TRIBE distribution. The distribution function is: This function has a duration of d before it hits a 0 distribution rate. The area under the curve is R, because the y-intercept is 2R/d, by simply multiplying base times height times 1/2. Set the \"unreleased function\" U(t) equal to the area under this curve between the current elapsed time t and the total duration d. Note that for t=d the output is equal to 0 as all of the TRIBE should be released. The formula is: Events {% tabs %} {% tab title=\"Drip\" %} Sent TRIBE to the FeiStakingRewards contract type param description address indexed _caller account that triggered the drip uint256 _amount amount of TRIBE dripped {% endtab %} {% tab title=\"TribeWithdraw\" %} A withdrawal of TRIBE from the distributor type param description uint256 _amount amount withdrawn {% endtab %} {% tab title=\"FrequencyUpdate\" %} Change the drip frequency type param description uint256 _amountReward new drip frequency {% endtab %} {% tab title=\"IncentiveUpdate\" %} Change in the FEI reward for dripping type param description uint256 _incentiveAmount new incentive amount {% endtab %} {% tab title=\"StakingContractUpdate\" %} A change in the staking contract to send TRIBE to. type param description address indexed _stakingContract the new staking contract {% endtab %} {% endtabs %} Read-Only Functions incentiveAmount function incentiveAmount() external view returns (uint256); Returns the amount of FEI sent to the caller of drip() . dripFrequency function dripFrequency() external view returns (uint256); The minimum frequency allowed between rewards distribution. isDripAvailable function isDripAvailable() external view returns (bool); Returns true if nextDripAvailable() preceeds the current block timestamp nextDripAvailable function nextDripAvailable() external view returns (uint256); The next block timestamp when reward distribution is allowed by the contract. Equals lastDistributionTime() + dripFrequency() lastDistributionTime function lastDistributionTime() external view returns (uint256); The last block timestamp when rewards were distributed from the contract. stakingContract function stakingContract() external view returns (IStakingRewards); The FeiStakingRewards contract address totalReward function totalReward() external view returns (uint256); Returns the total amount of rewards released over the entire window, including claimed, released, and unreleased. releasedReward function releasedReward() external view returns (uint256); Returns the amount of rewardToken available for claiming by the pool. Calculated as rewardBalance() - unreleasedReward() . unreleasedReward function unreleasedReward() external view returns (uint256); The unreleased reward function following the formula shown in the Release Schedule section above. It starts at the totalReward() amount and then wind down to 0 over the duration of the window. rewardBalance function rewardBalance() external view returns (uint256); The amount of TRIBE held by the contract, released or unreleased. distributedRewards function distributedRewards() external view returns (uint256); The total amount of TRIBE already distributed to FeiStakingRewards . EOA-Only \ud83d\udc64 State-Changing Functions drip function drip() external returns (uint256); Sends releasedReward() TRIBE to the stakingRewards() contract and updates the reward rate. Incentivizes the caller with incentiveAmount() FEI . {% hint style=\"info\" %} Only callable when nextDripAvailable() is below the current block timestamp and the contract is not paused {% endhint %} Governor-Only\u2696\ufe0f State-Changing Functions governorWithdrawTribe function governorWithdraw(uint256 amount) external; Withdraws amount TRIBE tokens from the pool to Fei Core. governorRecover function governorRecover(address tokenAddress, address to, uint256 amount) external; Recovers tokenAddress ERC20 tokens from the FeiStakingRewards contract to address to . This is used if there were AMM rewards distributed. setDripFrequency function setDripFrequency(uint256 _frequency) external; Sets the frequency with which the contract calls the FeiStakingRewards. setIncentiveAmount function setIncentiveAmount(uint256 _incentiveAmount) external; Sets the incentive amount for calling drip() . setStakingContract function setStakingContract(address _stakingRewards) external; Sets the staking contract to send TRIBE to. ABIs {% file src=\"../../.gitbook/assets/feirewardsdistributor.json\" caption=\"FeiRewardsDistributor ABI\" %} {% file src=\"../../.gitbook/assets/irewardsdistributor.json\" caption=\"RewardsDistributor Interface ABI\" %}","title":"FeiRewardsDistributor"},{"location":"old/protocol/staking/feirewardsdistributor/#feirewardsdistributor","text":"","title":"FeiRewardsDistributor"},{"location":"old/protocol/staking/feirewardsdistributor/#contract","text":"FeiRewardsDistributor.sol implements IRewardsDistributor , CoreRef , Timed","title":"Contract"},{"location":"old/protocol/staking/feirewardsdistributor/#description","text":"The FeiRewardsDistributor contract is responsible for sending rewards to the FeiStakingRewards contract each week. It has one public method exposed for keepers to execute this drip functionality, which rewards the caller with a fixed amount of FEI . {% page-ref page=\"feistakingrewards.md\" %}","title":"Description"},{"location":"old/protocol/staking/feirewardsdistributor/#release-schedule","text":"The release schedule for the total reward amount R of TRIBE is a linearly decreasing TRIBE distribution. The distribution function is: This function has a duration of d before it hits a 0 distribution rate. The area under the curve is R, because the y-intercept is 2R/d, by simply multiplying base times height times 1/2. Set the \"unreleased function\" U(t) equal to the area under this curve between the current elapsed time t and the total duration d. Note that for t=d the output is equal to 0 as all of the TRIBE should be released. The formula is:","title":"Release Schedule"},{"location":"old/protocol/staking/feirewardsdistributor/#events","text":"{% tabs %} {% tab title=\"Drip\" %} Sent TRIBE to the FeiStakingRewards contract type param description address indexed _caller account that triggered the drip uint256 _amount amount of TRIBE dripped {% endtab %} {% tab title=\"TribeWithdraw\" %} A withdrawal of TRIBE from the distributor type param description uint256 _amount amount withdrawn {% endtab %} {% tab title=\"FrequencyUpdate\" %} Change the drip frequency type param description uint256 _amountReward new drip frequency {% endtab %} {% tab title=\"IncentiveUpdate\" %} Change in the FEI reward for dripping type param description uint256 _incentiveAmount new incentive amount {% endtab %} {% tab title=\"StakingContractUpdate\" %} A change in the staking contract to send TRIBE to. type param description address indexed _stakingContract the new staking contract {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/staking/feirewardsdistributor/#read-only-functions","text":"","title":"Read-Only Functions"},{"location":"old/protocol/staking/feirewardsdistributor/#incentiveamount","text":"function incentiveAmount() external view returns (uint256); Returns the amount of FEI sent to the caller of drip() .","title":"incentiveAmount"},{"location":"old/protocol/staking/feirewardsdistributor/#dripfrequency","text":"function dripFrequency() external view returns (uint256); The minimum frequency allowed between rewards distribution.","title":"dripFrequency"},{"location":"old/protocol/staking/feirewardsdistributor/#isdripavailable","text":"function isDripAvailable() external view returns (bool); Returns true if nextDripAvailable() preceeds the current block timestamp","title":"isDripAvailable"},{"location":"old/protocol/staking/feirewardsdistributor/#nextdripavailable","text":"function nextDripAvailable() external view returns (uint256); The next block timestamp when reward distribution is allowed by the contract. Equals lastDistributionTime() + dripFrequency()","title":"nextDripAvailable"},{"location":"old/protocol/staking/feirewardsdistributor/#lastdistributiontime","text":"function lastDistributionTime() external view returns (uint256); The last block timestamp when rewards were distributed from the contract.","title":"lastDistributionTime"},{"location":"old/protocol/staking/feirewardsdistributor/#stakingcontract","text":"function stakingContract() external view returns (IStakingRewards); The FeiStakingRewards contract address","title":"stakingContract"},{"location":"old/protocol/staking/feirewardsdistributor/#totalreward","text":"function totalReward() external view returns (uint256); Returns the total amount of rewards released over the entire window, including claimed, released, and unreleased.","title":"totalReward"},{"location":"old/protocol/staking/feirewardsdistributor/#releasedreward","text":"function releasedReward() external view returns (uint256); Returns the amount of rewardToken available for claiming by the pool. Calculated as rewardBalance() - unreleasedReward() .","title":"releasedReward"},{"location":"old/protocol/staking/feirewardsdistributor/#unreleasedreward","text":"function unreleasedReward() external view returns (uint256); The unreleased reward function following the formula shown in the Release Schedule section above. It starts at the totalReward() amount and then wind down to 0 over the duration of the window.","title":"unreleasedReward"},{"location":"old/protocol/staking/feirewardsdistributor/#rewardbalance","text":"function rewardBalance() external view returns (uint256); The amount of TRIBE held by the contract, released or unreleased.","title":"rewardBalance"},{"location":"old/protocol/staking/feirewardsdistributor/#distributedrewards","text":"function distributedRewards() external view returns (uint256); The total amount of TRIBE already distributed to FeiStakingRewards .","title":"distributedRewards"},{"location":"old/protocol/staking/feirewardsdistributor/#eoa-only-state-changing-functions","text":"","title":"EOA-Only \ud83d\udc64 State-Changing Functions"},{"location":"old/protocol/staking/feirewardsdistributor/#drip","text":"function drip() external returns (uint256); Sends releasedReward() TRIBE to the stakingRewards() contract and updates the reward rate. Incentivizes the caller with incentiveAmount() FEI . {% hint style=\"info\" %} Only callable when nextDripAvailable() is below the current block timestamp and the contract is not paused {% endhint %}","title":"drip"},{"location":"old/protocol/staking/feirewardsdistributor/#governor-only-state-changing-functions","text":"","title":"Governor-Only\u2696\ufe0f State-Changing Functions"},{"location":"old/protocol/staking/feirewardsdistributor/#governorwithdrawtribe","text":"function governorWithdraw(uint256 amount) external; Withdraws amount TRIBE tokens from the pool to Fei Core.","title":"governorWithdrawTribe"},{"location":"old/protocol/staking/feirewardsdistributor/#governorrecover","text":"function governorRecover(address tokenAddress, address to, uint256 amount) external; Recovers tokenAddress ERC20 tokens from the FeiStakingRewards contract to address to . This is used if there were AMM rewards distributed.","title":"governorRecover"},{"location":"old/protocol/staking/feirewardsdistributor/#setdripfrequency","text":"function setDripFrequency(uint256 _frequency) external; Sets the frequency with which the contract calls the FeiStakingRewards.","title":"setDripFrequency"},{"location":"old/protocol/staking/feirewardsdistributor/#setincentiveamount","text":"function setIncentiveAmount(uint256 _incentiveAmount) external; Sets the incentive amount for calling drip() .","title":"setIncentiveAmount"},{"location":"old/protocol/staking/feirewardsdistributor/#setstakingcontract","text":"function setStakingContract(address _stakingRewards) external; Sets the staking contract to send TRIBE to.","title":"setStakingContract"},{"location":"old/protocol/staking/feirewardsdistributor/#abis","text":"{% file src=\"../../.gitbook/assets/feirewardsdistributor.json\" caption=\"FeiRewardsDistributor ABI\" %} {% file src=\"../../.gitbook/assets/irewardsdistributor.json\" caption=\"RewardsDistributor Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/staking/feistakingrewards/","text":"FeiStakingRewards Contract FeiStakingRewards implements StakingRewardsV2 Events {% tabs %} {% tab title=\"RewardAdded\" %} Amount of reward token added to contract type param description uint256 reward account of rewards sent to the contract {% endtab %} {% tab title=\"Staked\" %} Tokens staked by user type param description address indexed user account staked to uint256 amount amount staked {% endtab %} {% tab title=\"Withdrawn\" %} Staked tokens withdrawn by user type param description address indexed user account withdrawn from uint256 amount amount withdrawn {% endtab %} {% tab title=\"RewardPaid\" %} Rewards redeemed by user type param description address indexed user account receiving rewards uint256 reward amount of reward {% endtab %} {% tab title=\"Recovered\" %} ERC20 recovered by the distributor type param description address indexed tokenAddress ERC-20 address address indexed to destination for tokens uint256 amount amount recovered {% endtab %} {% endtabs %} Functions Documented on the Synthetix website: {% embed url=\"https://docs.synthetix.io/contracts/source/contracts/StakingRewards/\" %} ABIs {% file src=\"../../.gitbook/assets/feistakingrewards.json\" caption=\"FeiStakingRewards ABI\" %} {% file src=\"../../.gitbook/assets/istakingrewards.json\" caption=\"StakingRewards Interface ABI\" %}","title":"FeiStakingRewards"},{"location":"old/protocol/staking/feistakingrewards/#feistakingrewards","text":"","title":"FeiStakingRewards"},{"location":"old/protocol/staking/feistakingrewards/#contract","text":"FeiStakingRewards implements StakingRewardsV2","title":"Contract"},{"location":"old/protocol/staking/feistakingrewards/#events","text":"{% tabs %} {% tab title=\"RewardAdded\" %} Amount of reward token added to contract type param description uint256 reward account of rewards sent to the contract {% endtab %} {% tab title=\"Staked\" %} Tokens staked by user type param description address indexed user account staked to uint256 amount amount staked {% endtab %} {% tab title=\"Withdrawn\" %} Staked tokens withdrawn by user type param description address indexed user account withdrawn from uint256 amount amount withdrawn {% endtab %} {% tab title=\"RewardPaid\" %} Rewards redeemed by user type param description address indexed user account receiving rewards uint256 reward amount of reward {% endtab %} {% tab title=\"Recovered\" %} ERC20 recovered by the distributor type param description address indexed tokenAddress ERC-20 address address indexed to destination for tokens uint256 amount amount recovered {% endtab %} {% endtabs %}","title":"Events"},{"location":"old/protocol/staking/feistakingrewards/#functions","text":"Documented on the Synthetix website: {% embed url=\"https://docs.synthetix.io/contracts/source/contracts/StakingRewards/\" %}","title":"Functions"},{"location":"old/protocol/staking/feistakingrewards/#abis","text":"{% file src=\"../../.gitbook/assets/feistakingrewards.json\" caption=\"FeiStakingRewards ABI\" %} {% file src=\"../../.gitbook/assets/istakingrewards.json\" caption=\"StakingRewards Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/trading/","text":"Trading This section applies to buying and selling FEI from the protocol or on incentivized FEI Uniswap pools. Users can always buy and sell on secondary markets where they exist. Buying FEI Users can acquire FEI in the following (non-exhaustive) ways: Using the FeiRouter , exposed on app.fei.money Buying from the bonding curve Buying directly on the ETH/FEI Uniswap pool The bonding curve is currently not exposed via app.fei.money . The Fei Core Team is considering a feature to optimize the trading price of Fei Protocol UI by going to the bonding curve if offers a better deal. Selling FEI The router is exposed on app.fei.money , with parameters to protect against slippage and bound penalties.","title":"Trading"},{"location":"old/protocol/trading/#trading","text":"This section applies to buying and selling FEI from the protocol or on incentivized FEI Uniswap pools. Users can always buy and sell on secondary markets where they exist.","title":"Trading"},{"location":"old/protocol/trading/#buying-fei","text":"Users can acquire FEI in the following (non-exhaustive) ways: Using the FeiRouter , exposed on app.fei.money Buying from the bonding curve Buying directly on the ETH/FEI Uniswap pool The bonding curve is currently not exposed via app.fei.money . The Fei Core Team is considering a feature to optimize the trading price of Fei Protocol UI by going to the bonding curve if offers a better deal.","title":"Buying FEI"},{"location":"old/protocol/trading/#selling-fei","text":"The router is exposed on app.fei.money , with parameters to protect against slippage and bound penalties.","title":"Selling FEI"},{"location":"old/protocol/trading/feirouter/","text":"FeiRouter Contract FeiRouter.sol implements IFeiRouter Description A router for swapping FEI and ETH The router implements methods for buying and selling FEI with a single added slippage parameter to bound Direct Incentives. For the buyFei method the minReward parameter is the minimum amount of FEI mint the contract should allow without reverting. This is the mint applied by the UniswapIncentive contract. For the sellFei method the maxPenalty parameter is the maximum amount of FEI burn the contract should allow without reverting. This is the burn applied by the UniswapIncentive contract. Public State-Changing Functions buyFei function buyFei( uint256 minReward, uint256 amountOutMin, address to, uint256 deadline ) external payable returns (uint256 amountOut); Buy at least amountOutMin FEI for ETH and send the FEI to address to before the block timestamp exceeds deadline . Calculates the reward received by calculating how much the balance of \"to\" increased beyond the expected amountOut. Revert if the FEI reward received is less than minReward . {% hint style=\"warning\" %} If you get a UNISWAP_V2:TRANSFER _ FAILED error then you may have ran out of gas, or there was another error inside the UniswapIncentive hook execution for the FEI transfer {% endhint %} sellFei function sellFei( uint256 maxPenalty, uint256 amountIn, uint256 amountOutMin, address to, uint256 deadline ) external returns (uint256 amountOut); Sell amountIn FEI to receive at least amountOutMin ETH and send the ETH to address to before the block timestamp exceeds deadline . Calculates the penalty by calculating the amount that was removed from in-flight after the FEI transfer to Uniswap. Revert if the FEI penalty received is more than maxPenalty . ABIs {% file src=\"../../.gitbook/assets/feirouter.json\" caption=\"FeiRouter ABI\" %} {% file src=\"../../.gitbook/assets/ifeirouter.json\" caption=\"FeiRouter Interface ABI\" %}","title":"FeiRouter"},{"location":"old/protocol/trading/feirouter/#feirouter","text":"","title":"FeiRouter"},{"location":"old/protocol/trading/feirouter/#contract","text":"FeiRouter.sol implements IFeiRouter","title":"Contract"},{"location":"old/protocol/trading/feirouter/#description","text":"A router for swapping FEI and ETH The router implements methods for buying and selling FEI with a single added slippage parameter to bound Direct Incentives. For the buyFei method the minReward parameter is the minimum amount of FEI mint the contract should allow without reverting. This is the mint applied by the UniswapIncentive contract. For the sellFei method the maxPenalty parameter is the maximum amount of FEI burn the contract should allow without reverting. This is the burn applied by the UniswapIncentive contract.","title":"Description"},{"location":"old/protocol/trading/feirouter/#public-state-changing-functions","text":"","title":"Public State-Changing Functions"},{"location":"old/protocol/trading/feirouter/#buyfei","text":"function buyFei( uint256 minReward, uint256 amountOutMin, address to, uint256 deadline ) external payable returns (uint256 amountOut); Buy at least amountOutMin FEI for ETH and send the FEI to address to before the block timestamp exceeds deadline . Calculates the reward received by calculating how much the balance of \"to\" increased beyond the expected amountOut. Revert if the FEI reward received is less than minReward . {% hint style=\"warning\" %} If you get a UNISWAP_V2:TRANSFER _ FAILED error then you may have ran out of gas, or there was another error inside the UniswapIncentive hook execution for the FEI transfer {% endhint %}","title":"buyFei"},{"location":"old/protocol/trading/feirouter/#sellfei","text":"function sellFei( uint256 maxPenalty, uint256 amountIn, uint256 amountOutMin, address to, uint256 deadline ) external returns (uint256 amountOut); Sell amountIn FEI to receive at least amountOutMin ETH and send the ETH to address to before the block timestamp exceeds deadline . Calculates the penalty by calculating the amount that was removed from in-flight after the FEI transfer to Uniswap. Revert if the FEI penalty received is more than maxPenalty .","title":"sellFei"},{"location":"old/protocol/trading/feirouter/#abis","text":"{% file src=\"../../.gitbook/assets/feirouter.json\" caption=\"FeiRouter ABI\" %} {% file src=\"../../.gitbook/assets/ifeirouter.json\" caption=\"FeiRouter Interface ABI\" %}","title":"ABIs"},{"location":"old/protocol/trading/uniswapsingleethrouter/","text":"UniswapSingleEthRouter Contract UniswapSingleEthRouter.sol implements IUniswapSingleEthRouter Description A router for swapping tokens and ETH on a single predetermined Uniswap pair. The router implements only two of the standard Uniswap router methods: swapExactETHForTokens swapExactTokensForETH Both have the same standard behavior as the Uniswap router, specifying a amountOutMin to protect against slippage and a deadline to timebox trades. State-Changing Functions Public swapExactETHForTokens function swapExactETHForTokens( uint256 amountOutMin, address to, uint256 deadline ) external payable returns (uint256 amountOut); Buy at least amountOutMin tokens for ETH and send the ETH to address to before the block timestamp exceeds deadline . swapExactTokensForETH function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address to, uint256 deadline ) external returns (uint256 amountOut); Sell amountIn FEI to receive at least amountOutMin ETH and send the FEI to address to before the block timestamp exceeds deadline .","title":"UniswapSingleEthRouter"},{"location":"old/protocol/trading/uniswapsingleethrouter/#uniswapsingleethrouter","text":"","title":"UniswapSingleEthRouter"},{"location":"old/protocol/trading/uniswapsingleethrouter/#contract","text":"UniswapSingleEthRouter.sol implements IUniswapSingleEthRouter","title":"Contract"},{"location":"old/protocol/trading/uniswapsingleethrouter/#description","text":"A router for swapping tokens and ETH on a single predetermined Uniswap pair. The router implements only two of the standard Uniswap router methods: swapExactETHForTokens swapExactTokensForETH Both have the same standard behavior as the Uniswap router, specifying a amountOutMin to protect against slippage and a deadline to timebox trades.","title":"Description"},{"location":"old/protocol/trading/uniswapsingleethrouter/#state-changing-functions","text":"","title":"State-Changing Functions "},{"location":"old/protocol/trading/uniswapsingleethrouter/#public","text":"","title":"Public"},{"location":"old/protocol/trading/uniswapsingleethrouter/#swapexactethfortokens","text":"function swapExactETHForTokens( uint256 amountOutMin, address to, uint256 deadline ) external payable returns (uint256 amountOut); Buy at least amountOutMin tokens for ETH and send the ETH to address to before the block timestamp exceeds deadline .","title":"swapExactETHForTokens"},{"location":"old/protocol/trading/uniswapsingleethrouter/#swapexacttokensforeth","text":"function swapExactTokensForETH( uint256 amountIn, uint256 amountOutMin, address to, uint256 deadline ) external returns (uint256 amountOut); Sell amountIn FEI to receive at least amountOutMin ETH and send the FEI to address to before the block timestamp exceeds deadline .","title":"swapExactTokensForETH"},{"location":"old/staking-fei-tribe-lp/","text":"Staking FEI:TRIBE LP TRIBE is the Fei Protocol governance token. You can earn TRIBE staking rewards by providing liquidity to Uniswap\u2019s FEI-TRIBE pool . To participate in this staking pool, you need to acquire FEI-TRIBE LP Tokens . Before participating in LP Pool Staking you should further research and explore the risks and potential rewards associated with providing staking pool liquidity. Loss of funds is possible due to a number of factors such as IL (Impermanent Loss), reward token (TRIBE) volatility, and associated transaction ( gas fees ) costs. Fei Protocol staking pool is set for 2 years, with a linearly decreasing rate for reward release of 200M TRIBE tokens. Additional program details and contracts available here . Currently, the Fei Protocol staking pool only accepts LP Tokens from the Fei-Tribe Uniswap v2 pool. Please ensure that you are using Uniswap v2 when making LP's. {% page-ref page=\"steps-for-staking.md\" %} {% page-ref page=\"unstaking.md\" %}","title":"Staking FEI:TRIBE LP"},{"location":"old/staking-fei-tribe-lp/#staking-feitribe-lp","text":"TRIBE is the Fei Protocol governance token. You can earn TRIBE staking rewards by providing liquidity to Uniswap\u2019s FEI-TRIBE pool . To participate in this staking pool, you need to acquire FEI-TRIBE LP Tokens . Before participating in LP Pool Staking you should further research and explore the risks and potential rewards associated with providing staking pool liquidity. Loss of funds is possible due to a number of factors such as IL (Impermanent Loss), reward token (TRIBE) volatility, and associated transaction ( gas fees ) costs. Fei Protocol staking pool is set for 2 years, with a linearly decreasing rate for reward release of 200M TRIBE tokens. Additional program details and contracts available here . Currently, the Fei Protocol staking pool only accepts LP Tokens from the Fei-Tribe Uniswap v2 pool. Please ensure that you are using Uniswap v2 when making LP's. {% page-ref page=\"steps-for-staking.md\" %} {% page-ref page=\"unstaking.md\" %}","title":"Staking FEI:TRIBE LP"},{"location":"old/staking-fei-tribe-lp/steps-for-staking/","text":"Steps for Staking 1. Acquire FEI: To acquire FEI, we recommend using the Fei app : 2. Acquire TRIBE: To acquire TRIBE, you need to use Uniswap or another secondary market. Add TRIBE as a token by clicking on \u201cselect a token\u201d: {% hint style=\"info\" %} If TRIBE is not an option in the drop down menu, paste in the contract address (0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B) to add TRIBE: {% endhint %} Now you will have the ability to insert the desired amount of TRIBE. 3. Approve FEI and TRIBE on Uniswap : Once you have 50/50 TRIBE and FEI in value, you can add them as liquidity here . But first , approve Uniswap FEI and TRIBE as they are ERC-20 tokens: 4. Supply FEI and TRIBE in order to receive FEI-TRIBE LP tokens: After you approve your tokens, you can supply the desired amount: 5. Staking the LP tokens: Following receipt of FEI-TRIBE LP Tokens, you can supply the tokens on the Fei app staking tab , start by allowing your LP tokens: Now you can stake your tokens: 6. Claiming rewards: You can view the status of your staking rewards as well as claim rewards: {% hint style=\"info\" %} * You can claim rewards at any time, and they will never disappear. * We recommend that you consider the cost of gas fees relative to your reward amount when claiming rewards. * For smaller investors, the current gas price might be of interest when claiming the reward. * The cadence at which to claim is up to you, rewards will not disappear over time. {% endhint %}","title":"Steps for Staking"},{"location":"old/staking-fei-tribe-lp/steps-for-staking/#steps-for-staking","text":"1. Acquire FEI: To acquire FEI, we recommend using the Fei app : 2. Acquire TRIBE: To acquire TRIBE, you need to use Uniswap or another secondary market. Add TRIBE as a token by clicking on \u201cselect a token\u201d: {% hint style=\"info\" %} If TRIBE is not an option in the drop down menu, paste in the contract address (0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B) to add TRIBE: {% endhint %} Now you will have the ability to insert the desired amount of TRIBE. 3. Approve FEI and TRIBE on Uniswap : Once you have 50/50 TRIBE and FEI in value, you can add them as liquidity here . But first , approve Uniswap FEI and TRIBE as they are ERC-20 tokens: 4. Supply FEI and TRIBE in order to receive FEI-TRIBE LP tokens: After you approve your tokens, you can supply the desired amount: 5. Staking the LP tokens: Following receipt of FEI-TRIBE LP Tokens, you can supply the tokens on the Fei app staking tab , start by allowing your LP tokens: Now you can stake your tokens: 6. Claiming rewards: You can view the status of your staking rewards as well as claim rewards: {% hint style=\"info\" %} * You can claim rewards at any time, and they will never disappear. * We recommend that you consider the cost of gas fees relative to your reward amount when claiming rewards. * For smaller investors, the current gas price might be of interest when claiming the reward. * The cadence at which to claim is up to you, rewards will not disappear over time. {% endhint %}","title":"Steps for Staking"},{"location":"old/staking-fei-tribe-lp/unstaking/","text":"Unstaking {% hint style=\"warning\" %} If you would like to participate in the on-chain DAO vote, you must withdraw your LP tokens, and have TRIBE in your wallet, as LP tokens are not eligible for on-chain voting. {% endhint %} When you decide to unstake and exchange your LP tokens into FEI and TRIBE, you should follow these simple steps: 1. Unstake from Fei app : 2. Remove liquidity on Uniswap : Removing your liquidity is straightforward, click on remove and you can swap your FEI and TRIBE again:","title":"Unstaking"},{"location":"old/staking-fei-tribe-lp/unstaking/#unstaking","text":"{% hint style=\"warning\" %} If you would like to participate in the on-chain DAO vote, you must withdraw your LP tokens, and have TRIBE in your wallet, as LP tokens are not eligible for on-chain voting. {% endhint %} When you decide to unstake and exchange your LP tokens into FEI and TRIBE, you should follow these simple steps: 1. Unstake from Fei app : 2. Remove liquidity on Uniswap : Removing your liquidity is straightforward, click on remove and you can swap your FEI and TRIBE again:","title":"Unstaking"},{"location":"operator/keeper/","text":"Keepers A list of routine protocol operations which need executing and their trigger conditions. These may include an FEI incentive paid via minted FEI. Name Incentive Trigger Collateralization Oracle 1000 FEI When the collateralization oracle wrapper is out of date or beyond deviation threshold collateralizationOracleWrepper.isOutdatedOrExceededDeviationThreshold() ETH Bonding Curve 500 FEI Timer passed and premium exceeds incentive DAI Bonding Curve 100 FEI Timer passed and premium exceeds incentive DAI PCV Dripper 0 FEI Timer passed and target balance < threshold PCV Equity Minter 1000 FEI Timer passed and auction ended Tribe Rewards Dripper 0 FEI Timer passed Aave ETH PCV Dripper 100 FEI Timer passed and target balance < threshold Compound ETH PCV Dripper 100 FEI Timer passed and target balance < threshold TRIBE Reserve Stabilizer 0 FEI Collateralization below (above) threshold and time not yet started (already started) FeiRari TRIBE Syncer 0 FEI Ideal drip != current reward rate","title":"Keepers"},{"location":"operator/keeper/#keepers","text":"A list of routine protocol operations which need executing and their trigger conditions. These may include an FEI incentive paid via minted FEI. Name Incentive Trigger Collateralization Oracle 1000 FEI When the collateralization oracle wrapper is out of date or beyond deviation threshold collateralizationOracleWrepper.isOutdatedOrExceededDeviationThreshold() ETH Bonding Curve 500 FEI Timer passed and premium exceeds incentive DAI Bonding Curve 100 FEI Timer passed and premium exceeds incentive DAI PCV Dripper 0 FEI Timer passed and target balance < threshold PCV Equity Minter 1000 FEI Timer passed and auction ended Tribe Rewards Dripper 0 FEI Timer passed Aave ETH PCV Dripper 100 FEI Timer passed and target balance < threshold Compound ETH PCV Dripper 100 FEI Timer passed and target balance < threshold TRIBE Reserve Stabilizer 0 FEI Collateralization below (above) threshold and time not yet started (already started) FeiRari TRIBE Syncer 0 FEI Ideal drip != current reward rate","title":"Keepers"},{"location":"operator/operator/","text":"Fei Operator Documentation Table of Contents Fei Improvement Proposals - TODO Optimistic Approval - TODO Keepers Moderation - TODO","title":"Operator"},{"location":"operator/operator/#fei-operator-documentation","text":"","title":"Fei Operator Documentation"},{"location":"operator/operator/#table-of-contents","text":"Fei Improvement Proposals - TODO Optimistic Approval - TODO Keepers Moderation - TODO","title":"Table of Contents"},{"location":"user/user/","text":"Fei User Documentation Table of Contents Fei Improvement Proposals - TODO Optimistic Approval - TODO Moderation - TODO","title":"User"},{"location":"user/user/#fei-user-documentation","text":"","title":"Fei User Documentation"},{"location":"user/user/#table-of-contents","text":"Fei Improvement Proposals - TODO Optimistic Approval - TODO Moderation - TODO","title":"Table of Contents"}]}